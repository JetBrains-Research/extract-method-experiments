COMMIT ID: 8ae6a3925ab3bcfa0450b9aa92f4d00693b4c8d2
URL: https://github.com/apache/commons-lang/commit/8ae6a3925ab3bcfa0450b9aa92f4d00693b4c8d2
DESCRIPTION: Extract Method	public newInstance(type Class<T>, length int) : T[] extracted from public addAll(array1 T[], array2 T...) : T[] in class org.apache.commons.lang3.ArrayUtils
REFACTORING FILE DIFF URL: https://github.com/apache/commons-lang/commit/8ae6a3925ab3bcfa0450b9aa92f4d00693b4c8d2/src/main/java/org/apache/commons/lang3/ArrayUtils.java
REFACTORING URL: https://github.com/apache/commons-lang/blob/8ae6a3925ab3bcfa0450b9aa92f4d00693b4c8d2/src/main/java/org/apache/commons/lang3/ArrayUtils.java#L4217
DIRECTLY EXTRACTED OPERATION:
     * Delegates to {@link Array#newInstance(Class,int)} using generics.
     *
     * @param <T> The array type.
     * @param type The array class.
     * @param length the array length
     * @return The new array.
     * @since 3.13.0
     */
    @SuppressWarnings("unchecked") // OK, because array and values are of type T
    public static <T> T[] newInstance(final Class<T> type, final int length) {
        return (T[]) Array.newInstance(type, length);
    }

PARAMS COUNT: 2
IS VOID METHOD: false
FRAGMENT LENGTH: 468
FRAGMENT LINE AVG SIZE: 36.0
DEPTHS:
0 1 1 1 1 1 1 1 1 1 2 1 1 
AREA: 13
AVG DEPTH: 1.0
NUMBER OF LINES IN FRAGMENT: 13
---REFACTORING_FINISH---
DESCRIPTION: Extract Method	public newInstance(type Class<T>, length int) : T[] extracted from public subarray(array T[], startIndexInclusive int, endIndexExclusive int) : T[] in class org.apache.commons.lang3.ArrayUtils
REFACTORING FILE DIFF URL: https://github.com/apache/commons-lang/commit/8ae6a3925ab3bcfa0450b9aa92f4d00693b4c8d2/src/main/java/org/apache/commons/lang3/ArrayUtils.java
REFACTORING URL: https://github.com/apache/commons-lang/blob/8ae6a3925ab3bcfa0450b9aa92f4d00693b4c8d2/src/main/java/org/apache/commons/lang3/ArrayUtils.java#L4217
DIRECTLY EXTRACTED OPERATION:
     * Delegates to {@link Array#newInstance(Class,int)} using generics.
     *
     * @param <T> The array type.
     * @param type The array class.
     * @param length the array length
     * @return The new array.
     * @since 3.13.0
     */
    @SuppressWarnings("unchecked") // OK, because array and values are of type T
    public static <T> T[] newInstance(final Class<T> type, final int length) {
        return (T[]) Array.newInstance(type, length);
    }

PARAMS COUNT: 2
IS VOID METHOD: false
FRAGMENT LENGTH: 468
FRAGMENT LINE AVG SIZE: 36.0
DEPTHS:
0 1 1 1 1 1 1 1 1 1 2 1 1 
AREA: 13
AVG DEPTH: 1.0
NUMBER OF LINES IN FRAGMENT: 13
---REFACTORING_FINISH---
DESCRIPTION: Extract Method	public newInstance(type Class<T>, length int) : T[] extracted from public subarray(array T[], startIndexInclusive int, endIndexExclusive int) : T[] in class org.apache.commons.lang3.ArrayUtils
REFACTORING FILE DIFF URL: https://github.com/apache/commons-lang/commit/8ae6a3925ab3bcfa0450b9aa92f4d00693b4c8d2/src/main/java/org/apache/commons/lang3/ArrayUtils.java
REFACTORING URL: https://github.com/apache/commons-lang/blob/8ae6a3925ab3bcfa0450b9aa92f4d00693b4c8d2/src/main/java/org/apache/commons/lang3/ArrayUtils.java#L4217
DIRECTLY EXTRACTED OPERATION:
     * Delegates to {@link Array#newInstance(Class,int)} using generics.
     *
     * @param <T> The array type.
     * @param type The array class.
     * @param length the array length
     * @return The new array.
     * @since 3.13.0
     */
    @SuppressWarnings("unchecked") // OK, because array and values are of type T
    public static <T> T[] newInstance(final Class<T> type, final int length) {
        return (T[]) Array.newInstance(type, length);
    }

PARAMS COUNT: 2
IS VOID METHOD: false
FRAGMENT LENGTH: 468
FRAGMENT LINE AVG SIZE: 36.0
DEPTHS:
0 1 1 1 1 1 1 1 1 1 2 1 1 
AREA: 13
AVG DEPTH: 1.0
NUMBER OF LINES IN FRAGMENT: 13
---REFACTORING_FINISH---
-----REFACTORINGS_END-----
COMMIT ID: 79eb89e351ef350707d082f3713e4b9fd3a81aeb
URL: https://github.com/apache/commons-lang/commit/79eb89e351ef350707d082f3713e4b9fd3a81aeb
DESCRIPTION: Extract Method	public getFirstEnumIgnoreCase(enumClass Class<E>, enumName String, stringFunction Function<E,String>, defaultEnum E) : E extracted from public getEnumIgnoreCase(enumClass Class<E>, enumName String, defaultEnum E) : E in class org.apache.commons.lang3.EnumUtils
REFACTORING FILE DIFF URL: https://github.com/apache/commons-lang/commit/79eb89e351ef350707d082f3713e4b9fd3a81aeb/src/main/java/org/apache/commons/lang3/EnumUtils.java
REFACTORING URL: https://github.com/apache/commons-lang/blob/79eb89e351ef350707d082f3713e4b9fd3a81aeb/src/main/java/org/apache/commons/lang3/EnumUtils.java#L261
DIRECTLY EXTRACTED OPERATION:
     * <p>Gets the enum for the class, returning {@code defaultEnum} if not found.</p>
     *
     * <p>This method differs from {@link Enum#valueOf} in that it does not throw an exception
     * for an invalid enum name and performs case insensitive matching of the name.</p>
     *
     * @param <E>         the type of the enumeration
     * @param enumClass   the class of the enum to query, not null
     * @param enumName    the enum name, null returns default enum
     * @param stringFunction the function that gets the string for an enum for comparison to {@code enumName}.
     * @param defaultEnum the default enum
     * @return the enum, default enum if not found
     * @since 3.13.0
     */
    public static <E extends Enum<E>> E getFirstEnumIgnoreCase(final Class<E> enumClass, final String enumName,
        final Function<E, String> stringFunction, final E defaultEnum) {
        if (enumName == null || !enumClass.isEnum()) {
            return defaultEnum;
        }
        for (final E each : enumClass.getEnumConstants()) {
            if (enumName.equalsIgnoreCase(stringFunction.apply(each))) {
                return each;
            }
        }
        return defaultEnum;
    }

PARAMS COUNT: 4
IS VOID METHOD: false
FRAGMENT LENGTH: 1209
FRAGMENT LINE AVG SIZE: 46.5
DEPTHS:
0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 2 3 2 2 3 4 3 2 2 1 1 
AREA: 39
AVG DEPTH: 1.5
NUMBER OF LINES IN FRAGMENT: 26
---REFACTORING_FINISH---
-----REFACTORINGS_END-----
COMMIT ID: a2b2b35ac3b969686c647e57f5ca3bacc63f2c56
URL: https://github.com/apache/commons-lang/commit/a2b2b35ac3b969686c647e57f5ca3bacc63f2c56
DESCRIPTION: Extract Method	private isZero(mant String, dec String) : boolean extracted from public createNumber(str String) : Number in class org.apache.commons.lang3.math.NumberUtils
REFACTORING FILE DIFF URL: https://github.com/apache/commons-lang/commit/a2b2b35ac3b969686c647e57f5ca3bacc63f2c56/src/main/java/org/apache/commons/lang3/math/NumberUtils.java
REFACTORING URL: https://github.com/apache/commons-lang/blob/a2b2b35ac3b969686c647e57f5ca3bacc63f2c56/src/main/java/org/apache/commons/lang3/math/NumberUtils.java#L852
DIRECTLY EXTRACTED OPERATION:
     * Utility method for {@link #createNumber(java.lang.String)}.
     *
     * <p>This will check if the magnitude of the number is zero by checking if there
     * are only zeros before and after the decimal place.</p>
     *
     * <p>Note: It is <strong>assumed</strong> that the input string has been converted
     * to either a Float or Double with a value of zero when this method is called.
     * This eliminates invalid input for example {@code ".", ".D", ".e0"}.</p>
     *
     * <p>Thus the method only requires checking if both arguments are null, empty or
     * contain only zeros.</p>
     *
     * <p>Given {@code s = mant + "." + dec}:</p>
     * <ul>
     * <li>{@code true} if s is {@code "0.0"}
     * <li>{@code true} if s is {@code "0."}
     * <li>{@code true} if s is {@code ".0"}
     * <li>{@code false} otherwise (this assumes {@code "."} is not possible)
     * </ul>
     *
     * @param mant the mantissa decimal digits before the decimal point (sign must be removed; never null)
     * @param dec the decimal digits after the decimal point (exponent and type specifier removed;
     *            can be null)
     * @return true if the magnitude is zero
     */
    private static boolean isZero(final String mant, String dec) {
        return isAllZeros(mant) && isAllZeros(dec);
    }

PARAMS COUNT: 2
IS VOID METHOD: false
FRAGMENT LENGTH: 1323
FRAGMENT LINE AVG SIZE: 45.62068965517241
DEPTHS:
0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 2 1 1 
AREA: 29
AVG DEPTH: 1.0
NUMBER OF LINES IN FRAGMENT: 29
---REFACTORING_FINISH---
DESCRIPTION: Extract Method	private isZero(mant String, dec String) : boolean extracted from public createNumber(str String) : Number in class org.apache.commons.lang3.math.NumberUtils
REFACTORING FILE DIFF URL: https://github.com/apache/commons-lang/commit/a2b2b35ac3b969686c647e57f5ca3bacc63f2c56/src/main/java/org/apache/commons/lang3/math/NumberUtils.java
REFACTORING URL: https://github.com/apache/commons-lang/blob/a2b2b35ac3b969686c647e57f5ca3bacc63f2c56/src/main/java/org/apache/commons/lang3/math/NumberUtils.java#L852
DIRECTLY EXTRACTED OPERATION:
     * Utility method for {@link #createNumber(java.lang.String)}.
     *
     * <p>This will check if the magnitude of the number is zero by checking if there
     * are only zeros before and after the decimal place.</p>
     *
     * <p>Note: It is <strong>assumed</strong> that the input string has been converted
     * to either a Float or Double with a value of zero when this method is called.
     * This eliminates invalid input for example {@code ".", ".D", ".e0"}.</p>
     *
     * <p>Thus the method only requires checking if both arguments are null, empty or
     * contain only zeros.</p>
     *
     * <p>Given {@code s = mant + "." + dec}:</p>
     * <ul>
     * <li>{@code true} if s is {@code "0.0"}
     * <li>{@code true} if s is {@code "0."}
     * <li>{@code true} if s is {@code ".0"}
     * <li>{@code false} otherwise (this assumes {@code "."} is not possible)
     * </ul>
     *
     * @param mant the mantissa decimal digits before the decimal point (sign must be removed; never null)
     * @param dec the decimal digits after the decimal point (exponent and type specifier removed;
     *            can be null)
     * @return true if the magnitude is zero
     */
    private static boolean isZero(final String mant, String dec) {
        return isAllZeros(mant) && isAllZeros(dec);
    }

PARAMS COUNT: 2
IS VOID METHOD: false
FRAGMENT LENGTH: 1323
FRAGMENT LINE AVG SIZE: 45.62068965517241
DEPTHS:
0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 2 1 1 
AREA: 29
AVG DEPTH: 1.0
NUMBER OF LINES IN FRAGMENT: 29
---REFACTORING_FINISH---
DESCRIPTION: Extract Method	private isZero(mant String, dec String) : boolean extracted from public createNumber(str String) : Number in class org.apache.commons.lang3.math.NumberUtils
REFACTORING FILE DIFF URL: https://github.com/apache/commons-lang/commit/a2b2b35ac3b969686c647e57f5ca3bacc63f2c56/src/main/java/org/apache/commons/lang3/math/NumberUtils.java
REFACTORING URL: https://github.com/apache/commons-lang/blob/a2b2b35ac3b969686c647e57f5ca3bacc63f2c56/src/main/java/org/apache/commons/lang3/math/NumberUtils.java#L852
DIRECTLY EXTRACTED OPERATION:
     * Utility method for {@link #createNumber(java.lang.String)}.
     *
     * <p>This will check if the magnitude of the number is zero by checking if there
     * are only zeros before and after the decimal place.</p>
     *
     * <p>Note: It is <strong>assumed</strong> that the input string has been converted
     * to either a Float or Double with a value of zero when this method is called.
     * This eliminates invalid input for example {@code ".", ".D", ".e0"}.</p>
     *
     * <p>Thus the method only requires checking if both arguments are null, empty or
     * contain only zeros.</p>
     *
     * <p>Given {@code s = mant + "." + dec}:</p>
     * <ul>
     * <li>{@code true} if s is {@code "0.0"}
     * <li>{@code true} if s is {@code "0."}
     * <li>{@code true} if s is {@code ".0"}
     * <li>{@code false} otherwise (this assumes {@code "."} is not possible)
     * </ul>
     *
     * @param mant the mantissa decimal digits before the decimal point (sign must be removed; never null)
     * @param dec the decimal digits after the decimal point (exponent and type specifier removed;
     *            can be null)
     * @return true if the magnitude is zero
     */
    private static boolean isZero(final String mant, String dec) {
        return isAllZeros(mant) && isAllZeros(dec);
    }

PARAMS COUNT: 2
IS VOID METHOD: false
FRAGMENT LENGTH: 1323
FRAGMENT LINE AVG SIZE: 45.62068965517241
DEPTHS:
0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 2 1 1 
AREA: 29
AVG DEPTH: 1.0
NUMBER OF LINES IN FRAGMENT: 29
---REFACTORING_FINISH---
DESCRIPTION: Extract Method	private isZero(mant String, dec String) : boolean extracted from public createNumber(str String) : Number in class org.apache.commons.lang3.math.NumberUtils
REFACTORING FILE DIFF URL: https://github.com/apache/commons-lang/commit/a2b2b35ac3b969686c647e57f5ca3bacc63f2c56/src/main/java/org/apache/commons/lang3/math/NumberUtils.java
REFACTORING URL: https://github.com/apache/commons-lang/blob/a2b2b35ac3b969686c647e57f5ca3bacc63f2c56/src/main/java/org/apache/commons/lang3/math/NumberUtils.java#L852
DIRECTLY EXTRACTED OPERATION:
     * Utility method for {@link #createNumber(java.lang.String)}.
     *
     * <p>This will check if the magnitude of the number is zero by checking if there
     * are only zeros before and after the decimal place.</p>
     *
     * <p>Note: It is <strong>assumed</strong> that the input string has been converted
     * to either a Float or Double with a value of zero when this method is called.
     * This eliminates invalid input for example {@code ".", ".D", ".e0"}.</p>
     *
     * <p>Thus the method only requires checking if both arguments are null, empty or
     * contain only zeros.</p>
     *
     * <p>Given {@code s = mant + "." + dec}:</p>
     * <ul>
     * <li>{@code true} if s is {@code "0.0"}
     * <li>{@code true} if s is {@code "0."}
     * <li>{@code true} if s is {@code ".0"}
     * <li>{@code false} otherwise (this assumes {@code "."} is not possible)
     * </ul>
     *
     * @param mant the mantissa decimal digits before the decimal point (sign must be removed; never null)
     * @param dec the decimal digits after the decimal point (exponent and type specifier removed;
     *            can be null)
     * @return true if the magnitude is zero
     */
    private static boolean isZero(final String mant, String dec) {
        return isAllZeros(mant) && isAllZeros(dec);
    }

PARAMS COUNT: 2
IS VOID METHOD: false
FRAGMENT LENGTH: 1323
FRAGMENT LINE AVG SIZE: 45.62068965517241
DEPTHS:
0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 2 1 1 
AREA: 29
AVG DEPTH: 1.0
NUMBER OF LINES IN FRAGMENT: 29
---REFACTORING_FINISH---
-----REFACTORINGS_END-----
COMMIT ID: dddd8c4e26f1d254c55749e4b44ae7c6cce5001d
URL: https://github.com/apache/commons-lang/commit/dddd8c4e26f1d254c55749e4b44ae7c6cce5001d
DESCRIPTION: Extract Method	public isNotEmpty() : boolean extracted from public appendSeparator(separator char) : StrBuilder in class org.apache.commons.lang3.text.StrBuilder
REFACTORING FILE DIFF URL: https://github.com/apache/commons-lang/commit/dddd8c4e26f1d254c55749e4b44ae7c6cce5001d/src/main/java/org/apache/commons/lang3/text/StrBuilder.java
REFACTORING URL: https://github.com/apache/commons-lang/blob/dddd8c4e26f1d254c55749e4b44ae7c6cce5001d/src/main/java/org/apache/commons/lang3/text/StrBuilder.java#L285
DIRECTLY EXTRACTED OPERATION:
     * Checks is the string builder is not empty (convenience Collections API style method).
     * <p>
     * This method is the same as checking {@link #length()} and is provided to match the
     * API of Collections.
     *
     * @return {@code true} if the size is greater than {@code 0}.
     * @since 3.12
     */
    public boolean isNotEmpty() {
        return size > 0;
    }

IS VOID METHOD: false
FRAGMENT LENGTH: 388
FRAGMENT LINE AVG SIZE: 32.333333333333336
DEPTHS:
0 1 1 1 1 1 1 1 1 2 1 1 
AREA: 12
AVG DEPTH: 1.0
NUMBER OF LINES IN FRAGMENT: 12
---REFACTORING_FINISH---
DESCRIPTION: Extract Method	public isNotEmpty() : boolean extracted from public appendSeparator(standard char, defaultIfEmpty char) : StrBuilder in class org.apache.commons.lang3.text.StrBuilder
REFACTORING FILE DIFF URL: https://github.com/apache/commons-lang/commit/dddd8c4e26f1d254c55749e4b44ae7c6cce5001d/src/main/java/org/apache/commons/lang3/text/StrBuilder.java
REFACTORING URL: https://github.com/apache/commons-lang/blob/dddd8c4e26f1d254c55749e4b44ae7c6cce5001d/src/main/java/org/apache/commons/lang3/text/StrBuilder.java#L285
DIRECTLY EXTRACTED OPERATION:
     * Checks is the string builder is not empty (convenience Collections API style method).
     * <p>
     * This method is the same as checking {@link #length()} and is provided to match the
     * API of Collections.
     *
     * @return {@code true} if the size is greater than {@code 0}.
     * @since 3.12
     */
    public boolean isNotEmpty() {
        return size > 0;
    }

IS VOID METHOD: false
FRAGMENT LENGTH: 388
FRAGMENT LINE AVG SIZE: 32.333333333333336
DEPTHS:
0 1 1 1 1 1 1 1 1 2 1 1 
AREA: 12
AVG DEPTH: 1.0
NUMBER OF LINES IN FRAGMENT: 12
---REFACTORING_FINISH---
-----REFACTORINGS_END-----
COMMIT ID: 2a8356cd433ccbe3338c823ad7c61b6f895cccf2
URL: https://github.com/apache/commons-lang/commit/2a8356cd433ccbe3338c823ad7c61b6f895cccf2
DESCRIPTION: Extract Method	private toStringOrEmpty(obj Object) : String extracted from public join(iterator Iterator<?>, separator char) : String in class org.apache.commons.lang3.StringUtils
REFACTORING FILE DIFF URL: https://github.com/apache/commons-lang/commit/2a8356cd433ccbe3338c823ad7c61b6f895cccf2/src/main/java/org/apache/commons/lang3/StringUtils.java
REFACTORING URL: https://github.com/apache/commons-lang/blob/2a8356cd433ccbe3338c823ad7c61b6f895cccf2/src/main/java/org/apache/commons/lang3/StringUtils.java#L9051
DIRECTLY EXTRACTED OPERATION:
        return Objects.toString(obj, EMPTY);
    }

PARAMS COUNT: 1
IS VOID METHOD: false
FRAGMENT LENGTH: 52
FRAGMENT LINE AVG SIZE: 17.333333333333332
DEPTHS:
1 1 1 
AREA: 3
AVG DEPTH: 1.0
NUMBER OF LINES IN FRAGMENT: 3
---REFACTORING_FINISH---
-----REFACTORINGS_END-----
COMMIT ID: c9722131d50de2a78aaf79a222fa5135431b9a73
URL: https://github.com/apache/commons-lang/commit/c9722131d50de2a78aaf79a222fa5135431b9a73
DESCRIPTION: Extract Method	private sleepQuietly(millis int) : void extracted from public testLang315() : void in class org.apache.commons.lang3.time.StopWatchTest
REFACTORING FILE DIFF URL: https://github.com/apache/commons-lang/commit/c9722131d50de2a78aaf79a222fa5135431b9a73/src/test/java/org/apache/commons/lang3/time/StopWatchTest.java
REFACTORING URL: https://github.com/apache/commons-lang/blob/c9722131d50de2a78aaf79a222fa5135431b9a73/src/test/java/org/apache/commons/lang3/time/StopWatchTest.java#L72
DIRECTLY EXTRACTED OPERATION:
        try {
            Thread.sleep(millis);
        } catch (final InterruptedException ex) {
            // ignore
        }
    }

PARAMS COUNT: 1
IS VOID METHOD: true
FRAGMENT LENGTH: 137
FRAGMENT LINE AVG SIZE: 19.571428571428573
DEPTHS:
2 3 3 3 2 1 1 
AREA: 15
AVG DEPTH: 2.142857142857143
NUMBER OF LINES IN FRAGMENT: 7
---REFACTORING_FINISH---
DESCRIPTION: Extract Method	private sleepQuietly(millis int) : void extracted from public testLang315() : void in class org.apache.commons.lang3.time.StopWatchTest
REFACTORING FILE DIFF URL: https://github.com/apache/commons-lang/commit/c9722131d50de2a78aaf79a222fa5135431b9a73/src/test/java/org/apache/commons/lang3/time/StopWatchTest.java
REFACTORING URL: https://github.com/apache/commons-lang/blob/c9722131d50de2a78aaf79a222fa5135431b9a73/src/test/java/org/apache/commons/lang3/time/StopWatchTest.java#L72
DIRECTLY EXTRACTED OPERATION:
        try {
            Thread.sleep(millis);
        } catch (final InterruptedException ex) {
            // ignore
        }
    }

PARAMS COUNT: 1
IS VOID METHOD: true
FRAGMENT LENGTH: 137
FRAGMENT LINE AVG SIZE: 19.571428571428573
DEPTHS:
2 3 3 3 2 1 1 
AREA: 15
AVG DEPTH: 2.142857142857143
NUMBER OF LINES IN FRAGMENT: 7
---REFACTORING_FINISH---
DESCRIPTION: Extract Method	private sleepQuietly(millis int) : void extracted from public testStopWatchSimple() : void in class org.apache.commons.lang3.time.StopWatchTest
REFACTORING FILE DIFF URL: https://github.com/apache/commons-lang/commit/c9722131d50de2a78aaf79a222fa5135431b9a73/src/test/java/org/apache/commons/lang3/time/StopWatchTest.java
REFACTORING URL: https://github.com/apache/commons-lang/blob/c9722131d50de2a78aaf79a222fa5135431b9a73/src/test/java/org/apache/commons/lang3/time/StopWatchTest.java#L72
DIRECTLY EXTRACTED OPERATION:
        try {
            Thread.sleep(millis);
        } catch (final InterruptedException ex) {
            // ignore
        }
    }

PARAMS COUNT: 1
IS VOID METHOD: true
FRAGMENT LENGTH: 137
FRAGMENT LINE AVG SIZE: 19.571428571428573
DEPTHS:
2 3 3 3 2 1 1 
AREA: 15
AVG DEPTH: 2.142857142857143
NUMBER OF LINES IN FRAGMENT: 7
---REFACTORING_FINISH---
DESCRIPTION: Extract Method	private sleepQuietly(millis int) : void extracted from public testStopWatchSimpleGet() : void in class org.apache.commons.lang3.time.StopWatchTest
REFACTORING FILE DIFF URL: https://github.com/apache/commons-lang/commit/c9722131d50de2a78aaf79a222fa5135431b9a73/src/test/java/org/apache/commons/lang3/time/StopWatchTest.java
REFACTORING URL: https://github.com/apache/commons-lang/blob/c9722131d50de2a78aaf79a222fa5135431b9a73/src/test/java/org/apache/commons/lang3/time/StopWatchTest.java#L72
DIRECTLY EXTRACTED OPERATION:
        try {
            Thread.sleep(millis);
        } catch (final InterruptedException ex) {
            // ignore
        }
    }

PARAMS COUNT: 1
IS VOID METHOD: true
FRAGMENT LENGTH: 137
FRAGMENT LINE AVG SIZE: 19.571428571428573
DEPTHS:
2 3 3 3 2 1 1 
AREA: 15
AVG DEPTH: 2.142857142857143
NUMBER OF LINES IN FRAGMENT: 7
---REFACTORING_FINISH---
DESCRIPTION: Extract Method	private sleepQuietly(millis int) : void extracted from public testStopWatchSplit() : void in class org.apache.commons.lang3.time.StopWatchTest
REFACTORING FILE DIFF URL: https://github.com/apache/commons-lang/commit/c9722131d50de2a78aaf79a222fa5135431b9a73/src/test/java/org/apache/commons/lang3/time/StopWatchTest.java
REFACTORING URL: https://github.com/apache/commons-lang/blob/c9722131d50de2a78aaf79a222fa5135431b9a73/src/test/java/org/apache/commons/lang3/time/StopWatchTest.java#L72
DIRECTLY EXTRACTED OPERATION:
        try {
            Thread.sleep(millis);
        } catch (final InterruptedException ex) {
            // ignore
        }
    }

PARAMS COUNT: 1
IS VOID METHOD: true
FRAGMENT LENGTH: 137
FRAGMENT LINE AVG SIZE: 19.571428571428573
DEPTHS:
2 3 3 3 2 1 1 
AREA: 15
AVG DEPTH: 2.142857142857143
NUMBER OF LINES IN FRAGMENT: 7
---REFACTORING_FINISH---
DESCRIPTION: Extract Method	private sleepQuietly(millis int) : void extracted from public testStopWatchSplit() : void in class org.apache.commons.lang3.time.StopWatchTest
REFACTORING FILE DIFF URL: https://github.com/apache/commons-lang/commit/c9722131d50de2a78aaf79a222fa5135431b9a73/src/test/java/org/apache/commons/lang3/time/StopWatchTest.java
REFACTORING URL: https://github.com/apache/commons-lang/blob/c9722131d50de2a78aaf79a222fa5135431b9a73/src/test/java/org/apache/commons/lang3/time/StopWatchTest.java#L72
DIRECTLY EXTRACTED OPERATION:
        try {
            Thread.sleep(millis);
        } catch (final InterruptedException ex) {
            // ignore
        }
    }

PARAMS COUNT: 1
IS VOID METHOD: true
FRAGMENT LENGTH: 137
FRAGMENT LINE AVG SIZE: 19.571428571428573
DEPTHS:
2 3 3 3 2 1 1 
AREA: 15
AVG DEPTH: 2.142857142857143
NUMBER OF LINES IN FRAGMENT: 7
---REFACTORING_FINISH---
DESCRIPTION: Extract Method	private sleepQuietly(millis int) : void extracted from public testStopWatchSplit() : void in class org.apache.commons.lang3.time.StopWatchTest
REFACTORING FILE DIFF URL: https://github.com/apache/commons-lang/commit/c9722131d50de2a78aaf79a222fa5135431b9a73/src/test/java/org/apache/commons/lang3/time/StopWatchTest.java
REFACTORING URL: https://github.com/apache/commons-lang/blob/c9722131d50de2a78aaf79a222fa5135431b9a73/src/test/java/org/apache/commons/lang3/time/StopWatchTest.java#L72
DIRECTLY EXTRACTED OPERATION:
        try {
            Thread.sleep(millis);
        } catch (final InterruptedException ex) {
            // ignore
        }
    }

PARAMS COUNT: 1
IS VOID METHOD: true
FRAGMENT LENGTH: 137
FRAGMENT LINE AVG SIZE: 19.571428571428573
DEPTHS:
2 3 3 3 2 1 1 
AREA: 15
AVG DEPTH: 2.142857142857143
NUMBER OF LINES IN FRAGMENT: 7
---REFACTORING_FINISH---
DESCRIPTION: Extract Method	private sleepQuietly(millis int) : void extracted from public testStopWatchSuspend() : void in class org.apache.commons.lang3.time.StopWatchTest
REFACTORING FILE DIFF URL: https://github.com/apache/commons-lang/commit/c9722131d50de2a78aaf79a222fa5135431b9a73/src/test/java/org/apache/commons/lang3/time/StopWatchTest.java
REFACTORING URL: https://github.com/apache/commons-lang/blob/c9722131d50de2a78aaf79a222fa5135431b9a73/src/test/java/org/apache/commons/lang3/time/StopWatchTest.java#L72
DIRECTLY EXTRACTED OPERATION:
        try {
            Thread.sleep(millis);
        } catch (final InterruptedException ex) {
            // ignore
        }
    }

PARAMS COUNT: 1
IS VOID METHOD: true
FRAGMENT LENGTH: 137
FRAGMENT LINE AVG SIZE: 19.571428571428573
DEPTHS:
2 3 3 3 2 1 1 
AREA: 15
AVG DEPTH: 2.142857142857143
NUMBER OF LINES IN FRAGMENT: 7
---REFACTORING_FINISH---
DESCRIPTION: Extract Method	private sleepQuietly(millis int) : void extracted from public testStopWatchSuspend() : void in class org.apache.commons.lang3.time.StopWatchTest
REFACTORING FILE DIFF URL: https://github.com/apache/commons-lang/commit/c9722131d50de2a78aaf79a222fa5135431b9a73/src/test/java/org/apache/commons/lang3/time/StopWatchTest.java
REFACTORING URL: https://github.com/apache/commons-lang/blob/c9722131d50de2a78aaf79a222fa5135431b9a73/src/test/java/org/apache/commons/lang3/time/StopWatchTest.java#L72
DIRECTLY EXTRACTED OPERATION:
        try {
            Thread.sleep(millis);
        } catch (final InterruptedException ex) {
            // ignore
        }
    }

PARAMS COUNT: 1
IS VOID METHOD: true
FRAGMENT LENGTH: 137
FRAGMENT LINE AVG SIZE: 19.571428571428573
DEPTHS:
2 3 3 3 2 1 1 
AREA: 15
AVG DEPTH: 2.142857142857143
NUMBER OF LINES IN FRAGMENT: 7
---REFACTORING_FINISH---
DESCRIPTION: Extract Method	private sleepQuietly(millis int) : void extracted from public testStopWatchSuspend() : void in class org.apache.commons.lang3.time.StopWatchTest
REFACTORING FILE DIFF URL: https://github.com/apache/commons-lang/commit/c9722131d50de2a78aaf79a222fa5135431b9a73/src/test/java/org/apache/commons/lang3/time/StopWatchTest.java
REFACTORING URL: https://github.com/apache/commons-lang/blob/c9722131d50de2a78aaf79a222fa5135431b9a73/src/test/java/org/apache/commons/lang3/time/StopWatchTest.java#L72
DIRECTLY EXTRACTED OPERATION:
        try {
            Thread.sleep(millis);
        } catch (final InterruptedException ex) {
            // ignore
        }
    }

PARAMS COUNT: 1
IS VOID METHOD: true
FRAGMENT LENGTH: 137
FRAGMENT LINE AVG SIZE: 19.571428571428573
DEPTHS:
2 3 3 3 2 1 1 
AREA: 15
AVG DEPTH: 2.142857142857143
NUMBER OF LINES IN FRAGMENT: 7
---REFACTORING_FINISH---
DESCRIPTION: Extract Method	private sleepQuietly(millis int) : void extracted from public testToSplitString() : void in class org.apache.commons.lang3.time.StopWatchTest
REFACTORING FILE DIFF URL: https://github.com/apache/commons-lang/commit/c9722131d50de2a78aaf79a222fa5135431b9a73/src/test/java/org/apache/commons/lang3/time/StopWatchTest.java
REFACTORING URL: https://github.com/apache/commons-lang/blob/c9722131d50de2a78aaf79a222fa5135431b9a73/src/test/java/org/apache/commons/lang3/time/StopWatchTest.java#L72
DIRECTLY EXTRACTED OPERATION:
        try {
            Thread.sleep(millis);
        } catch (final InterruptedException ex) {
            // ignore
        }
    }

PARAMS COUNT: 1
IS VOID METHOD: true
FRAGMENT LENGTH: 137
FRAGMENT LINE AVG SIZE: 19.571428571428573
DEPTHS:
2 3 3 3 2 1 1 
AREA: 15
AVG DEPTH: 2.142857142857143
NUMBER OF LINES IN FRAGMENT: 7
---REFACTORING_FINISH---
DESCRIPTION: Extract Method	private sleepQuietly(millis int) : void extracted from public testToSplitStringWithMessage() : void in class org.apache.commons.lang3.time.StopWatchTest
REFACTORING FILE DIFF URL: https://github.com/apache/commons-lang/commit/c9722131d50de2a78aaf79a222fa5135431b9a73/src/test/java/org/apache/commons/lang3/time/StopWatchTest.java
REFACTORING URL: https://github.com/apache/commons-lang/blob/c9722131d50de2a78aaf79a222fa5135431b9a73/src/test/java/org/apache/commons/lang3/time/StopWatchTest.java#L72
DIRECTLY EXTRACTED OPERATION:
        try {
            Thread.sleep(millis);
        } catch (final InterruptedException ex) {
            // ignore
        }
    }

PARAMS COUNT: 1
IS VOID METHOD: true
FRAGMENT LENGTH: 137
FRAGMENT LINE AVG SIZE: 19.571428571428573
DEPTHS:
2 3 3 3 2 1 1 
AREA: 15
AVG DEPTH: 2.142857142857143
NUMBER OF LINES IN FRAGMENT: 7
---REFACTORING_FINISH---
DESCRIPTION: Extract Method	private sleepQuietly(millis int) : void extracted from public testToString() : void in class org.apache.commons.lang3.time.StopWatchTest
REFACTORING FILE DIFF URL: https://github.com/apache/commons-lang/commit/c9722131d50de2a78aaf79a222fa5135431b9a73/src/test/java/org/apache/commons/lang3/time/StopWatchTest.java
REFACTORING URL: https://github.com/apache/commons-lang/blob/c9722131d50de2a78aaf79a222fa5135431b9a73/src/test/java/org/apache/commons/lang3/time/StopWatchTest.java#L72
DIRECTLY EXTRACTED OPERATION:
        try {
            Thread.sleep(millis);
        } catch (final InterruptedException ex) {
            // ignore
        }
    }

PARAMS COUNT: 1
IS VOID METHOD: true
FRAGMENT LENGTH: 137
FRAGMENT LINE AVG SIZE: 19.571428571428573
DEPTHS:
2 3 3 3 2 1 1 
AREA: 15
AVG DEPTH: 2.142857142857143
NUMBER OF LINES IN FRAGMENT: 7
---REFACTORING_FINISH---
DESCRIPTION: Extract Method	private sleepQuietly(millis int) : void extracted from public testToStringWithMessage() : void in class org.apache.commons.lang3.time.StopWatchTest
REFACTORING FILE DIFF URL: https://github.com/apache/commons-lang/commit/c9722131d50de2a78aaf79a222fa5135431b9a73/src/test/java/org/apache/commons/lang3/time/StopWatchTest.java
REFACTORING URL: https://github.com/apache/commons-lang/blob/c9722131d50de2a78aaf79a222fa5135431b9a73/src/test/java/org/apache/commons/lang3/time/StopWatchTest.java#L72
DIRECTLY EXTRACTED OPERATION:
        try {
            Thread.sleep(millis);
        } catch (final InterruptedException ex) {
            // ignore
        }
    }

PARAMS COUNT: 1
IS VOID METHOD: true
FRAGMENT LENGTH: 137
FRAGMENT LINE AVG SIZE: 19.571428571428573
DEPTHS:
2 3 3 3 2 1 1 
AREA: 15
AVG DEPTH: 2.142857142857143
NUMBER OF LINES IN FRAGMENT: 7
---REFACTORING_FINISH---
-----REFACTORINGS_END-----
COMMIT ID: 93d520a3e1781d99f99711df7016f474b36fbf82
URL: https://github.com/apache/commons-lang/commit/93d520a3e1781d99f99711df7016f474b36fbf82
DESCRIPTION: Extract Method	private containsAny(test ToBooleanBiFunction<CharSequence,CharSequence>, cs CharSequence, searchCharSequences CharSequence...) : boolean extracted from public containsAny(cs CharSequence, searchCharSequences CharSequence...) : boolean in class org.apache.commons.lang3.StringUtils
REFACTORING FILE DIFF URL: https://github.com/apache/commons-lang/commit/93d520a3e1781d99f99711df7016f474b36fbf82/src/main/java/org/apache/commons/lang3/StringUtils.java
REFACTORING URL: https://github.com/apache/commons-lang/blob/93d520a3e1781d99f99711df7016f474b36fbf82/src/main/java/org/apache/commons/lang3/StringUtils.java#L1182
DIRECTLY EXTRACTED OPERATION:
     * <p>
     * Checks if the CharSequence contains any of the CharSequences in the given array.
     * </p>
     *
     * <p>
     * A {@code null} {@code cs} CharSequence will return {@code false}. A {@code null} or zero length search array will
     * return {@code false}.
     * </p>
     *
     * @param cs The CharSequence to check, may be null
     * @param searchCharSequences The array of CharSequences to search for, may be null. Individual CharSequences may be
     *        null as well.
     * @return {@code true} if any of the search CharSequences are found, {@code false} otherwise
     * @since 3.12
     */
    private static boolean containsAny(final ToBooleanBiFunction<CharSequence, CharSequence> test,
        final CharSequence cs, final CharSequence... searchCharSequences) {
        if (isEmpty(cs) || ArrayUtils.isEmpty(searchCharSequences)) {
            return false;
        }
        for (final CharSequence searchCharSequence : searchCharSequences) {
            if (test.applyAsBoolean(cs, searchCharSequence)) {
                return true;
            }
        }
        return false;
    }

PARAMS COUNT: 3
IS VOID METHOD: false
FRAGMENT LENGTH: 1130
FRAGMENT LINE AVG SIZE: 40.357142857142854
DEPTHS:
0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 2 3 2 2 3 4 3 2 2 1 1 
AREA: 41
AVG DEPTH: 1.4642857142857142
NUMBER OF LINES IN FRAGMENT: 28
---REFACTORING_FINISH---
-----REFACTORINGS_END-----
COMMIT ID: dd5d284e86cc83b1ef8088fa8cba383d95957850
URL: https://github.com/apache/commons-lang/commit/dd5d284e86cc83b1ef8088fa8cba383d95957850
DESCRIPTION: Extract Method	private testSingleLocale(locale Locale) : void extracted from public java15BuggyLocaleTest() : void in class org.apache.commons.lang3.time.FastDateParserTest
REFACTORING FILE DIFF URL: https://github.com/apache/commons-lang/commit/dd5d284e86cc83b1ef8088fa8cba383d95957850/src/test/java/org/apache/commons/lang3/time/FastDateParserTest.java
REFACTORING URL: https://github.com/apache/commons-lang/blob/dd5d284e86cc83b1ef8088fa8cba383d95957850/src/test/java/org/apache/commons/lang3/time/FastDateParserTest.java#L734
DIRECTLY EXTRACTED OPERATION:
        final Calendar cal = Calendar.getInstance(GMT);
        cal.clear();
        cal.set(2003, Calendar.FEBRUARY, 10);
        final SimpleDateFormat sdf = new SimpleDateFormat(LONG_FORMAT, locale);
        final String formattedDate = sdf.format(cal.getTime());
        sdf.parse(formattedDate);
        sdf.parse(formattedDate.toUpperCase(locale));
        sdf.parse(formattedDate.toLowerCase(locale));
    }
}
PARAMS COUNT: 1
IS VOID METHOD: true
FRAGMENT LENGTH: 417
FRAGMENT LINE AVG SIZE: 41.7
DEPTHS:
1 2 2 2 2 2 2 2 1 0 
AREA: 16
AVG DEPTH: 1.6
NUMBER OF LINES IN FRAGMENT: 10
---REFACTORING_FINISH---
-----REFACTORINGS_END-----
COMMIT ID: 1dddec8ba867bc31233ba194f0753ea35818cbfd
URL: https://github.com/apache/commons-lang/commit/1dddec8ba867bc31233ba194f0753ea35818cbfd
DESCRIPTION: Extract Method	protected appendDetail(buffer StringBuffer, fieldName String, i int, item Object) : void extracted from protected appendDetail(buffer StringBuffer, fieldName String, array Object[]) : void in class org.apache.commons.lang3.builder.ToStringStyle
REFACTORING FILE DIFF URL: https://github.com/apache/commons-lang/commit/1dddec8ba867bc31233ba194f0753ea35818cbfd/src/main/java/org/apache/commons/lang3/builder/ToStringStyle.java
REFACTORING URL: https://github.com/apache/commons-lang/blob/1dddec8ba867bc31233ba194f0753ea35818cbfd/src/main/java/org/apache/commons/lang3/builder/ToStringStyle.java#L937
DIRECTLY EXTRACTED OPERATION:
     * <p>Append to the {@code toString} the detail of an
     * {@code Object} array item.</p>
     *
     * @param buffer  the {@code StringBuffer} to populate
     * @param fieldName  the field name, typically not used as already appended
     * @param i the array item index to add
     * @param item the array item to add
     * @since 3.11
     */
    protected void appendDetail(final StringBuffer buffer, final String fieldName, int i, final Object item) {
        if (i > 0) {
            buffer.append(arraySeparator);
        }
        if (item == null) {
            appendNullText(buffer, fieldName);
        } else {
            appendInternal(buffer, fieldName, item, arrayContentDetail);
        }
    }

PARAMS COUNT: 4
IS VOID METHOD: true
FRAGMENT LENGTH: 721
FRAGMENT LINE AVG SIZE: 36.05
DEPTHS:
0 1 1 1 1 1 1 1 1 1 2 3 2 2 3 3 3 2 1 1 
AREA: 31
AVG DEPTH: 1.55
NUMBER OF LINES IN FRAGMENT: 20
---REFACTORING_FINISH---
DESCRIPTION: Extract Method	protected appendDetail(buffer StringBuffer, fieldName String, i int, item Object) : void extracted from protected reflectionAppendArrayDetail(buffer StringBuffer, fieldName String, array Object) : void in class org.apache.commons.lang3.builder.ToStringStyle
REFACTORING FILE DIFF URL: https://github.com/apache/commons-lang/commit/1dddec8ba867bc31233ba194f0753ea35818cbfd/src/main/java/org/apache/commons/lang3/builder/ToStringStyle.java
REFACTORING URL: https://github.com/apache/commons-lang/blob/1dddec8ba867bc31233ba194f0753ea35818cbfd/src/main/java/org/apache/commons/lang3/builder/ToStringStyle.java#L937
DIRECTLY EXTRACTED OPERATION:
     * <p>Append to the {@code toString} the detail of an
     * {@code Object} array item.</p>
     *
     * @param buffer  the {@code StringBuffer} to populate
     * @param fieldName  the field name, typically not used as already appended
     * @param i the array item index to add
     * @param item the array item to add
     * @since 3.11
     */
    protected void appendDetail(final StringBuffer buffer, final String fieldName, int i, final Object item) {
        if (i > 0) {
            buffer.append(arraySeparator);
        }
        if (item == null) {
            appendNullText(buffer, fieldName);
        } else {
            appendInternal(buffer, fieldName, item, arrayContentDetail);
        }
    }

PARAMS COUNT: 4
IS VOID METHOD: true
FRAGMENT LENGTH: 721
FRAGMENT LINE AVG SIZE: 36.05
DEPTHS:
0 1 1 1 1 1 1 1 1 1 2 3 2 2 3 3 3 2 1 1 
AREA: 31
AVG DEPTH: 1.55
NUMBER OF LINES IN FRAGMENT: 20
---REFACTORING_FINISH---
-----REFACTORINGS_END-----
COMMIT ID: 3d4ed4a8ac63db1e51601ffc31fed44dccbb276c
URL: https://github.com/apache/commons-lang/commit/3d4ed4a8ac63db1e51601ffc31fed44dccbb276c
DESCRIPTION: Extract Method	private runTest(delay long, exclusiveLock boolean, runTimeCheck LongConsumer) : void extracted from package testReadLock() : void in class org.apache.commons.lang3.LocksTest
REFACTORING FILE DIFF URL: https://github.com/apache/commons-lang/commit/3d4ed4a8ac63db1e51601ffc31fed44dccbb276c/src/test/java/org/apache/commons/lang3/LocksTest.java
REFACTORING URL: https://github.com/apache/commons-lang/blob/3d4ed4a8ac63db1e51601ffc31fed44dccbb276c/src/test/java/org/apache/commons/lang3/LocksTest.java#L47
DIRECTLY EXTRACTED OPERATION:
        final boolean[] booleanValues = new boolean[10];
        final Lock<boolean[]> lock = Locks.lock(booleanValues);
        final boolean[] runningValues = new boolean[10];

        final long startTime = System.currentTimeMillis();
        for (int i = 0;  i < booleanValues.length;  i++) {
            final int index = i;
            final FailableConsumer<boolean[], ?> consumer = (b) -> {
                b[index] = false;
                Thread.sleep(delay);
                b[index] = true;
                modify(runningValues, index, false);
            };
            final Thread t = new Thread(() -> {
                if (exclusiveLock) {
                    lock.runWriteLocked(consumer);
                } else {
                    lock.runReadLocked(consumer);
                }
            });
            modify(runningValues, i, true);
            t.start();
        }
        while (someValueIsTrue(runningValues)) {
            Thread.sleep(100);
        }
        final long endTime = System.currentTimeMillis();
        for (int i = 0;  i < booleanValues.length;  i++) {
            assertTrue(booleanValues[i]);
        }
        runTimeCheck.accept(endTime-startTime);
    }

PARAMS COUNT: 3
IS VOID METHOD: true
FRAGMENT LENGTH: 1206
FRAGMENT LINE AVG SIZE: 36.54545454545455
DEPTHS:
1 2 2 2 2 2 3 3 4 4 4 4 3 3 4 5 5 5 4 3 3 3 2 2 3 2 2 2 3 2 2 1 1 
AREA: 93
AVG DEPTH: 2.8181818181818183
---REFACTORING_FINISH---
-----REFACTORINGS_END-----
COMMIT ID: 4a934610e7d911df707a23ad338ab2e4aa14daa4
URL: https://github.com/apache/commons-lang/commit/4a934610e7d911df707a23ad338ab2e4aa14daa4
DESCRIPTION: Extract Method	public getEnum(enumClass Class<E>, enumName String, defaultEnum E) : E extracted from public getEnum(enumClass Class<E>, enumName String) : E in class org.apache.commons.lang3.EnumUtils
REFACTORING FILE DIFF URL: https://github.com/apache/commons-lang/commit/4a934610e7d911df707a23ad338ab2e4aa14daa4/src/main/java/org/apache/commons/lang3/EnumUtils.java
REFACTORING URL: https://github.com/apache/commons-lang/blob/4a934610e7d911df707a23ad338ab2e4aa14daa4/src/main/java/org/apache/commons/lang3/EnumUtils.java#L125
DIRECTLY EXTRACTED OPERATION:
     * <p>Gets the enum for the class, returning {@code defaultEnum} if not found.</p>
     *
     * <p>This method differs from {@link Enum#valueOf} in that it does not throw an exception
     * for an invalid enum name.</p>
     *
     * @param <E> the type of the enumeration
     * @param enumClass   the class of the enum to query, not null
     * @param enumName    the enum name, null returns default enum
     * @param defaultEnum the default enum
     * @return the enum, default enum if not found
     * @since 3.10
     */
    public static <E extends Enum<E>> E getEnum(final Class<E> enumClass, final String enumName, final E defaultEnum) {
        if (enumName == null) {
            return defaultEnum;
        }
        try {
            return Enum.valueOf(enumClass, enumName);
        } catch (final IllegalArgumentException ex) {
            return defaultEnum;
        }
    }

PARAMS COUNT: 3
IS VOID METHOD: false
FRAGMENT LENGTH: 899
FRAGMENT LINE AVG SIZE: 39.08695652173913
DEPTHS:
0 1 1 1 1 1 1 1 1 1 1 1 1 2 3 2 2 3 3 3 2 1 1 
AREA: 34
AVG DEPTH: 1.4782608695652173
NUMBER OF LINES IN FRAGMENT: 23
---REFACTORING_FINISH---
DESCRIPTION: Extract Method	public getEnumIgnoreCase(enumClass Class<E>, enumName String, defaultEnum E) : E extracted from public getEnumIgnoreCase(enumClass Class<E>, enumName String) : E in class org.apache.commons.lang3.EnumUtils
REFACTORING FILE DIFF URL: https://github.com/apache/commons-lang/commit/4a934610e7d911df707a23ad338ab2e4aa14daa4/src/main/java/org/apache/commons/lang3/EnumUtils.java
REFACTORING URL: https://github.com/apache/commons-lang/blob/4a934610e7d911df707a23ad338ab2e4aa14daa4/src/main/java/org/apache/commons/lang3/EnumUtils.java#L165
DIRECTLY EXTRACTED OPERATION:
     * <p>Gets the enum for the class, returning {@code defaultEnum} if not found.</p>
     *
     * <p>This method differs from {@link Enum#valueOf} in that it does not throw an exception
     * for an invalid enum name and performs case insensitive matching of the name.</p>
     *
     * @param <E>         the type of the enumeration
     * @param enumClass   the class of the enum to query, not null
     * @param enumName    the enum name, null returns default enum
     * @param defaultEnum the default enum
     * @return the enum, default enum if not found
     * @since 3.10
     */
    public static <E extends Enum<E>> E getEnumIgnoreCase(final Class<E> enumClass, final String enumName, final E defaultEnum) {
        if (enumName == null || !enumClass.isEnum()) {
            return defaultEnum;
        }
        for (final E each : enumClass.getEnumConstants()) {
            if (each.name().equalsIgnoreCase(enumName)) {
                return each;
            }
        }
        return defaultEnum;
    }

PARAMS COUNT: 3
IS VOID METHOD: false
FRAGMENT LENGTH: 1026
FRAGMENT LINE AVG SIZE: 42.75
DEPTHS:
0 1 1 1 1 1 1 1 1 1 1 1 1 2 3 2 2 3 4 3 2 2 1 1 
AREA: 37
AVG DEPTH: 1.5416666666666667
NUMBER OF LINES IN FRAGMENT: 24
---REFACTORING_FINISH---
-----REFACTORINGS_END-----
COMMIT ID: bedae6950d43008929d9cd109c9e8fb163793bd7
URL: https://github.com/apache/commons-lang/commit/bedae6950d43008929d9cd109c9e8fb163793bd7
DESCRIPTION: Extract Method	private useFull(runAheadTarget int, source int, originalLength int, desiredLength int) : boolean extracted from public getAbbreviatedName(className String, len int) : String in class org.apache.commons.lang3.ClassUtils
REFACTORING FILE DIFF URL: https://github.com/apache/commons-lang/commit/bedae6950d43008929d9cd109c9e8fb163793bd7/src/main/java/org/apache/commons/lang3/ClassUtils.java
REFACTORING URL: https://github.com/apache/commons-lang/blob/bedae6950d43008929d9cd109c9e8fb163793bd7/src/main/java/org/apache/commons/lang3/ClassUtils.java#L518
DIRECTLY EXTRACTED OPERATION:
     * <p>Decides if the part that was just copied to its destination
     * location in the work array can be kept as it was copied or must be
     * abbreviated. It must be kept when the part is the last one, which
     * is the simple name of the class. In this case the {@code source}
     * index, from where the characters are copied points one position
     * after the last character, a.k.a. {@code source ==
     * originalLength}</p>
     *
     * <p>If the part is not the last one then it can be kept
     * unabridged if the number of the characters copied so far plus
     * the character that are to be copied is less than or equal to the
     * desired length.</p>
     *
     * @param runAheadTarget the target index (where the characters were
     *                       copied to) pointing after the last character
     *                       copied when the current part was copied
     * @param source         the source index (where the characters were
     *                       copied from) pointing after the last
     *                       character copied when the current part was
     *                       copied
     * @param originalLength the original length of the class full name,
     *                       which is abbreviated
     * @param desiredLength  the desired length of the abbreviated class
     *                       name
     * @return {@code true} if it can be kept in its original length
     * {@code false} if the current part has to be abbreviated and
     */
    private static boolean useFull(final int runAheadTarget,
                                   final int source,
                                   final int originalLength,
                                   final int desiredLength) {
        return source >= originalLength ||
            runAheadTarget + originalLength - source <= desiredLength;
    }

PARAMS COUNT: 4
IS VOID METHOD: false
FRAGMENT LENGTH: 1883
FRAGMENT LINE AVG SIZE: 53.8
DEPTHS:
0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 2 2 1 1 
AREA: 36
AVG DEPTH: 1.0285714285714285
NUMBER OF LINES IN FRAGMENT: 35
---REFACTORING_FINISH---
-----REFACTORINGS_END-----
COMMIT ID: a32c188c32fd0c4a8149bcda524d704dd609da6e
URL: https://github.com/apache/commons-lang/commit/a32c188c32fd0c4a8149bcda524d704dd609da6e
DESCRIPTION: Extract Method	private throwOnOdd() : void extracted from package FailureOnOddInvocations() in class org.apache.commons.lang3.FunctionsTest.FailureOnOddInvocations
REFACTORING FILE DIFF URL: https://github.com/apache/commons-lang/commit/a32c188c32fd0c4a8149bcda524d704dd609da6e/src/test/java/org/apache/commons/lang3/FunctionsTest.java
REFACTORING URL: https://github.com/apache/commons-lang/blob/a32c188c32fd0c4a8149bcda524d704dd609da6e/src/test/java/org/apache/commons/lang3/FunctionsTest.java#L102
DIRECTLY EXTRACTED OPERATION:
            final int i = ++invocation;
            if (i % 2 == 1) {
                throw new SomeException("Odd Invocation: " + i);
            }
        }
        static boolean failingBool() throws SomeException {
IS VOID METHOD: true
FRAGMENT LENGTH: 219
FRAGMENT LINE AVG SIZE: 36.5
DEPTHS:
2 3 4 3 2 2 
AREA: 16
AVG DEPTH: 2.6666666666666665
NUMBER OF LINES IN FRAGMENT: 6
---REFACTORING_FINISH---
-----REFACTORINGS_END-----
COMMIT ID: 5e7d64d6b2719afb1e5f4785d80d24ac5a19a782
URL: https://github.com/apache/commons-lang/commit/5e7d64d6b2719afb1e5f4785d80d24ac5a19a782
DESCRIPTION: Extract Method	private nullDateIllegalArgumentException() : IllegalArgumentException extracted from public isSameDay(date1 Date, date2 Date) : boolean in class org.apache.commons.lang3.time.DateUtils
REFACTORING FILE DIFF URL: https://github.com/apache/commons-lang/commit/5e7d64d6b2719afb1e5f4785d80d24ac5a19a782/src/main/java/org/apache/commons/lang3/time/DateUtils.java
REFACTORING URL: https://github.com/apache/commons-lang/blob/5e7d64d6b2719afb1e5f4785d80d24ac5a19a782/src/main/java/org/apache/commons/lang3/time/DateUtils.java#L751
DIRECTLY EXTRACTED OPERATION:
        return new IllegalArgumentException("The date must not be null");
    }

IS VOID METHOD: false
FRAGMENT LENGTH: 81
FRAGMENT LINE AVG SIZE: 27.0
DEPTHS:
1 1 1 
AREA: 3
AVG DEPTH: 1.0
NUMBER OF LINES IN FRAGMENT: 3
---REFACTORING_FINISH---
DESCRIPTION: Extract Method	private nullDateIllegalArgumentException() : IllegalArgumentException extracted from public isSameDay(cal1 Calendar, cal2 Calendar) : boolean in class org.apache.commons.lang3.time.DateUtils
REFACTORING FILE DIFF URL: https://github.com/apache/commons-lang/commit/5e7d64d6b2719afb1e5f4785d80d24ac5a19a782/src/main/java/org/apache/commons/lang3/time/DateUtils.java
REFACTORING URL: https://github.com/apache/commons-lang/blob/5e7d64d6b2719afb1e5f4785d80d24ac5a19a782/src/main/java/org/apache/commons/lang3/time/DateUtils.java#L751
DIRECTLY EXTRACTED OPERATION:
        return new IllegalArgumentException("The date must not be null");
    }

IS VOID METHOD: false
FRAGMENT LENGTH: 81
FRAGMENT LINE AVG SIZE: 27.0
DEPTHS:
1 1 1 
AREA: 3
AVG DEPTH: 1.0
NUMBER OF LINES IN FRAGMENT: 3
---REFACTORING_FINISH---
DESCRIPTION: Extract Method	private nullDateIllegalArgumentException() : IllegalArgumentException extracted from public isSameInstant(date1 Date, date2 Date) : boolean in class org.apache.commons.lang3.time.DateUtils
REFACTORING FILE DIFF URL: https://github.com/apache/commons-lang/commit/5e7d64d6b2719afb1e5f4785d80d24ac5a19a782/src/main/java/org/apache/commons/lang3/time/DateUtils.java
REFACTORING URL: https://github.com/apache/commons-lang/blob/5e7d64d6b2719afb1e5f4785d80d24ac5a19a782/src/main/java/org/apache/commons/lang3/time/DateUtils.java#L751
DIRECTLY EXTRACTED OPERATION:
        return new IllegalArgumentException("The date must not be null");
    }

IS VOID METHOD: false
FRAGMENT LENGTH: 81
FRAGMENT LINE AVG SIZE: 27.0
DEPTHS:
1 1 1 
AREA: 3
AVG DEPTH: 1.0
NUMBER OF LINES IN FRAGMENT: 3
---REFACTORING_FINISH---
DESCRIPTION: Extract Method	private nullDateIllegalArgumentException() : IllegalArgumentException extracted from public isSameInstant(cal1 Calendar, cal2 Calendar) : boolean in class org.apache.commons.lang3.time.DateUtils
REFACTORING FILE DIFF URL: https://github.com/apache/commons-lang/commit/5e7d64d6b2719afb1e5f4785d80d24ac5a19a782/src/main/java/org/apache/commons/lang3/time/DateUtils.java
REFACTORING URL: https://github.com/apache/commons-lang/blob/5e7d64d6b2719afb1e5f4785d80d24ac5a19a782/src/main/java/org/apache/commons/lang3/time/DateUtils.java#L751
DIRECTLY EXTRACTED OPERATION:
        return new IllegalArgumentException("The date must not be null");
    }

IS VOID METHOD: false
FRAGMENT LENGTH: 81
FRAGMENT LINE AVG SIZE: 27.0
DEPTHS:
1 1 1 
AREA: 3
AVG DEPTH: 1.0
NUMBER OF LINES IN FRAGMENT: 3
---REFACTORING_FINISH---
DESCRIPTION: Extract Method	private nullDateIllegalArgumentException() : IllegalArgumentException extracted from public isSameLocalTime(cal1 Calendar, cal2 Calendar) : boolean in class org.apache.commons.lang3.time.DateUtils
REFACTORING FILE DIFF URL: https://github.com/apache/commons-lang/commit/5e7d64d6b2719afb1e5f4785d80d24ac5a19a782/src/main/java/org/apache/commons/lang3/time/DateUtils.java
REFACTORING URL: https://github.com/apache/commons-lang/blob/5e7d64d6b2719afb1e5f4785d80d24ac5a19a782/src/main/java/org/apache/commons/lang3/time/DateUtils.java#L751
DIRECTLY EXTRACTED OPERATION:
        return new IllegalArgumentException("The date must not be null");
    }

IS VOID METHOD: false
FRAGMENT LENGTH: 81
FRAGMENT LINE AVG SIZE: 27.0
DEPTHS:
1 1 1 
AREA: 3
AVG DEPTH: 1.0
NUMBER OF LINES IN FRAGMENT: 3
---REFACTORING_FINISH---
DESCRIPTION: Extract Method	private nullDateIllegalArgumentException() : IllegalArgumentException extracted from public round(date Calendar, field int) : Calendar in class org.apache.commons.lang3.time.DateUtils
REFACTORING FILE DIFF URL: https://github.com/apache/commons-lang/commit/5e7d64d6b2719afb1e5f4785d80d24ac5a19a782/src/main/java/org/apache/commons/lang3/time/DateUtils.java
REFACTORING URL: https://github.com/apache/commons-lang/blob/5e7d64d6b2719afb1e5f4785d80d24ac5a19a782/src/main/java/org/apache/commons/lang3/time/DateUtils.java#L751
DIRECTLY EXTRACTED OPERATION:
        return new IllegalArgumentException("The date must not be null");
    }

IS VOID METHOD: false
FRAGMENT LENGTH: 81
FRAGMENT LINE AVG SIZE: 27.0
DEPTHS:
1 1 1 
AREA: 3
AVG DEPTH: 1.0
NUMBER OF LINES IN FRAGMENT: 3
---REFACTORING_FINISH---
DESCRIPTION: Extract Method	private nullDateIllegalArgumentException() : IllegalArgumentException extracted from public round(date Object, field int) : Date in class org.apache.commons.lang3.time.DateUtils
REFACTORING FILE DIFF URL: https://github.com/apache/commons-lang/commit/5e7d64d6b2719afb1e5f4785d80d24ac5a19a782/src/main/java/org/apache/commons/lang3/time/DateUtils.java
REFACTORING URL: https://github.com/apache/commons-lang/blob/5e7d64d6b2719afb1e5f4785d80d24ac5a19a782/src/main/java/org/apache/commons/lang3/time/DateUtils.java#L751
DIRECTLY EXTRACTED OPERATION:
        return new IllegalArgumentException("The date must not be null");
    }

IS VOID METHOD: false
FRAGMENT LENGTH: 81
FRAGMENT LINE AVG SIZE: 27.0
DEPTHS:
1 1 1 
AREA: 3
AVG DEPTH: 1.0
NUMBER OF LINES IN FRAGMENT: 3
---REFACTORING_FINISH---
DESCRIPTION: Extract Method	private nullDateIllegalArgumentException() : IllegalArgumentException extracted from public truncate(date Calendar, field int) : Calendar in class org.apache.commons.lang3.time.DateUtils
REFACTORING FILE DIFF URL: https://github.com/apache/commons-lang/commit/5e7d64d6b2719afb1e5f4785d80d24ac5a19a782/src/main/java/org/apache/commons/lang3/time/DateUtils.java
REFACTORING URL: https://github.com/apache/commons-lang/blob/5e7d64d6b2719afb1e5f4785d80d24ac5a19a782/src/main/java/org/apache/commons/lang3/time/DateUtils.java#L751
DIRECTLY EXTRACTED OPERATION:
        return new IllegalArgumentException("The date must not be null");
    }

IS VOID METHOD: false
FRAGMENT LENGTH: 81
FRAGMENT LINE AVG SIZE: 27.0
DEPTHS:
1 1 1 
AREA: 3
AVG DEPTH: 1.0
NUMBER OF LINES IN FRAGMENT: 3
---REFACTORING_FINISH---
DESCRIPTION: Extract Method	private nullDateIllegalArgumentException() : IllegalArgumentException extracted from public truncate(date Object, field int) : Date in class org.apache.commons.lang3.time.DateUtils
REFACTORING FILE DIFF URL: https://github.com/apache/commons-lang/commit/5e7d64d6b2719afb1e5f4785d80d24ac5a19a782/src/main/java/org/apache/commons/lang3/time/DateUtils.java
REFACTORING URL: https://github.com/apache/commons-lang/blob/5e7d64d6b2719afb1e5f4785d80d24ac5a19a782/src/main/java/org/apache/commons/lang3/time/DateUtils.java#L751
DIRECTLY EXTRACTED OPERATION:
        return new IllegalArgumentException("The date must not be null");
    }

IS VOID METHOD: false
FRAGMENT LENGTH: 81
FRAGMENT LINE AVG SIZE: 27.0
DEPTHS:
1 1 1 
AREA: 3
AVG DEPTH: 1.0
NUMBER OF LINES IN FRAGMENT: 3
---REFACTORING_FINISH---
DESCRIPTION: Extract Method	private nullDateIllegalArgumentException() : IllegalArgumentException extracted from public ceiling(date Calendar, field int) : Calendar in class org.apache.commons.lang3.time.DateUtils
REFACTORING FILE DIFF URL: https://github.com/apache/commons-lang/commit/5e7d64d6b2719afb1e5f4785d80d24ac5a19a782/src/main/java/org/apache/commons/lang3/time/DateUtils.java
REFACTORING URL: https://github.com/apache/commons-lang/blob/5e7d64d6b2719afb1e5f4785d80d24ac5a19a782/src/main/java/org/apache/commons/lang3/time/DateUtils.java#L751
DIRECTLY EXTRACTED OPERATION:
        return new IllegalArgumentException("The date must not be null");
    }

IS VOID METHOD: false
FRAGMENT LENGTH: 81
FRAGMENT LINE AVG SIZE: 27.0
DEPTHS:
1 1 1 
AREA: 3
AVG DEPTH: 1.0
NUMBER OF LINES IN FRAGMENT: 3
---REFACTORING_FINISH---
DESCRIPTION: Extract Method	private nullDateIllegalArgumentException() : IllegalArgumentException extracted from public ceiling(date Object, field int) : Date in class org.apache.commons.lang3.time.DateUtils
REFACTORING FILE DIFF URL: https://github.com/apache/commons-lang/commit/5e7d64d6b2719afb1e5f4785d80d24ac5a19a782/src/main/java/org/apache/commons/lang3/time/DateUtils.java
REFACTORING URL: https://github.com/apache/commons-lang/blob/5e7d64d6b2719afb1e5f4785d80d24ac5a19a782/src/main/java/org/apache/commons/lang3/time/DateUtils.java#L751
DIRECTLY EXTRACTED OPERATION:
        return new IllegalArgumentException("The date must not be null");
    }

IS VOID METHOD: false
FRAGMENT LENGTH: 81
FRAGMENT LINE AVG SIZE: 27.0
DEPTHS:
1 1 1 
AREA: 3
AVG DEPTH: 1.0
NUMBER OF LINES IN FRAGMENT: 3
---REFACTORING_FINISH---
DESCRIPTION: Extract Method	private nullDateIllegalArgumentException() : IllegalArgumentException extracted from public iterator(focus Calendar, rangeStyle int) : Iterator<Calendar> in class org.apache.commons.lang3.time.DateUtils
REFACTORING FILE DIFF URL: https://github.com/apache/commons-lang/commit/5e7d64d6b2719afb1e5f4785d80d24ac5a19a782/src/main/java/org/apache/commons/lang3/time/DateUtils.java
REFACTORING URL: https://github.com/apache/commons-lang/blob/5e7d64d6b2719afb1e5f4785d80d24ac5a19a782/src/main/java/org/apache/commons/lang3/time/DateUtils.java#L751
DIRECTLY EXTRACTED OPERATION:
        return new IllegalArgumentException("The date must not be null");
    }

IS VOID METHOD: false
FRAGMENT LENGTH: 81
FRAGMENT LINE AVG SIZE: 27.0
DEPTHS:
1 1 1 
AREA: 3
AVG DEPTH: 1.0
NUMBER OF LINES IN FRAGMENT: 3
---REFACTORING_FINISH---
DESCRIPTION: Extract Method	private nullDateIllegalArgumentException() : IllegalArgumentException extracted from public iterator(focus Object, rangeStyle int) : Iterator<?> in class org.apache.commons.lang3.time.DateUtils
REFACTORING FILE DIFF URL: https://github.com/apache/commons-lang/commit/5e7d64d6b2719afb1e5f4785d80d24ac5a19a782/src/main/java/org/apache/commons/lang3/time/DateUtils.java
REFACTORING URL: https://github.com/apache/commons-lang/blob/5e7d64d6b2719afb1e5f4785d80d24ac5a19a782/src/main/java/org/apache/commons/lang3/time/DateUtils.java#L751
DIRECTLY EXTRACTED OPERATION:
        return new IllegalArgumentException("The date must not be null");
    }

IS VOID METHOD: false
FRAGMENT LENGTH: 81
FRAGMENT LINE AVG SIZE: 27.0
DEPTHS:
1 1 1 
AREA: 3
AVG DEPTH: 1.0
NUMBER OF LINES IN FRAGMENT: 3
---REFACTORING_FINISH---
DESCRIPTION: Extract Method	private nullDateIllegalArgumentException() : IllegalArgumentException extracted from private getFragment(calendar Calendar, fragment int, unit TimeUnit) : long in class org.apache.commons.lang3.time.DateUtils
REFACTORING FILE DIFF URL: https://github.com/apache/commons-lang/commit/5e7d64d6b2719afb1e5f4785d80d24ac5a19a782/src/main/java/org/apache/commons/lang3/time/DateUtils.java
REFACTORING URL: https://github.com/apache/commons-lang/blob/5e7d64d6b2719afb1e5f4785d80d24ac5a19a782/src/main/java/org/apache/commons/lang3/time/DateUtils.java#L751
DIRECTLY EXTRACTED OPERATION:
        return new IllegalArgumentException("The date must not be null");
    }

IS VOID METHOD: false
FRAGMENT LENGTH: 81
FRAGMENT LINE AVG SIZE: 27.0
DEPTHS:
1 1 1 
AREA: 3
AVG DEPTH: 1.0
NUMBER OF LINES IN FRAGMENT: 3
---REFACTORING_FINISH---
-----REFACTORINGS_END-----
COMMIT ID: 81ee0d062c888d8f8bcbc154cd7f0143710f458c
URL: https://github.com/apache/commons-lang/commit/81ee0d062c888d8f8bcbc154cd7f0143710f458c
DESCRIPTION: Extract Method	private newStringBuilder(noOfItems int) : StringBuilder extracted from public join(array Object[], separator char, startIndex int, endIndex int) : String in class org.apache.commons.lang3.StringUtils
REFACTORING FILE DIFF URL: https://github.com/apache/commons-lang/commit/81ee0d062c888d8f8bcbc154cd7f0143710f458c/src/main/java/org/apache/commons/lang3/StringUtils.java
REFACTORING URL: https://github.com/apache/commons-lang/blob/81ee0d062c888d8f8bcbc154cd7f0143710f458c/src/main/java/org/apache/commons/lang3/StringUtils.java#L2836
DIRECTLY EXTRACTED OPERATION:
        return new StringBuilder(noOfItems * 16);
    }

PARAMS COUNT: 1
IS VOID METHOD: false
FRAGMENT LENGTH: 57
FRAGMENT LINE AVG SIZE: 19.0
DEPTHS:
1 1 1 
AREA: 3
AVG DEPTH: 1.0
NUMBER OF LINES IN FRAGMENT: 3
---REFACTORING_FINISH---
DESCRIPTION: Extract Method	private newStringBuilder(noOfItems int) : StringBuilder extracted from public join(array long[], separator char, startIndex int, endIndex int) : String in class org.apache.commons.lang3.StringUtils
REFACTORING FILE DIFF URL: https://github.com/apache/commons-lang/commit/81ee0d062c888d8f8bcbc154cd7f0143710f458c/src/main/java/org/apache/commons/lang3/StringUtils.java
REFACTORING URL: https://github.com/apache/commons-lang/blob/81ee0d062c888d8f8bcbc154cd7f0143710f458c/src/main/java/org/apache/commons/lang3/StringUtils.java#L2836
DIRECTLY EXTRACTED OPERATION:
        return new StringBuilder(noOfItems * 16);
    }

PARAMS COUNT: 1
IS VOID METHOD: false
FRAGMENT LENGTH: 57
FRAGMENT LINE AVG SIZE: 19.0
DEPTHS:
1 1 1 
AREA: 3
AVG DEPTH: 1.0
NUMBER OF LINES IN FRAGMENT: 3
---REFACTORING_FINISH---
DESCRIPTION: Extract Method	private newStringBuilder(noOfItems int) : StringBuilder extracted from public join(array int[], separator char, startIndex int, endIndex int) : String in class org.apache.commons.lang3.StringUtils
REFACTORING FILE DIFF URL: https://github.com/apache/commons-lang/commit/81ee0d062c888d8f8bcbc154cd7f0143710f458c/src/main/java/org/apache/commons/lang3/StringUtils.java
REFACTORING URL: https://github.com/apache/commons-lang/blob/81ee0d062c888d8f8bcbc154cd7f0143710f458c/src/main/java/org/apache/commons/lang3/StringUtils.java#L2836
DIRECTLY EXTRACTED OPERATION:
        return new StringBuilder(noOfItems * 16);
    }

PARAMS COUNT: 1
IS VOID METHOD: false
FRAGMENT LENGTH: 57
FRAGMENT LINE AVG SIZE: 19.0
DEPTHS:
1 1 1 
AREA: 3
AVG DEPTH: 1.0
NUMBER OF LINES IN FRAGMENT: 3
---REFACTORING_FINISH---
DESCRIPTION: Extract Method	private newStringBuilder(noOfItems int) : StringBuilder extracted from public join(array byte[], separator char, startIndex int, endIndex int) : String in class org.apache.commons.lang3.StringUtils
REFACTORING FILE DIFF URL: https://github.com/apache/commons-lang/commit/81ee0d062c888d8f8bcbc154cd7f0143710f458c/src/main/java/org/apache/commons/lang3/StringUtils.java
REFACTORING URL: https://github.com/apache/commons-lang/blob/81ee0d062c888d8f8bcbc154cd7f0143710f458c/src/main/java/org/apache/commons/lang3/StringUtils.java#L2836
DIRECTLY EXTRACTED OPERATION:
        return new StringBuilder(noOfItems * 16);
    }

PARAMS COUNT: 1
IS VOID METHOD: false
FRAGMENT LENGTH: 57
FRAGMENT LINE AVG SIZE: 19.0
DEPTHS:
1 1 1 
AREA: 3
AVG DEPTH: 1.0
NUMBER OF LINES IN FRAGMENT: 3
---REFACTORING_FINISH---
DESCRIPTION: Extract Method	private newStringBuilder(noOfItems int) : StringBuilder extracted from public join(array short[], separator char, startIndex int, endIndex int) : String in class org.apache.commons.lang3.StringUtils
REFACTORING FILE DIFF URL: https://github.com/apache/commons-lang/commit/81ee0d062c888d8f8bcbc154cd7f0143710f458c/src/main/java/org/apache/commons/lang3/StringUtils.java
REFACTORING URL: https://github.com/apache/commons-lang/blob/81ee0d062c888d8f8bcbc154cd7f0143710f458c/src/main/java/org/apache/commons/lang3/StringUtils.java#L2836
DIRECTLY EXTRACTED OPERATION:
        return new StringBuilder(noOfItems * 16);
    }

PARAMS COUNT: 1
IS VOID METHOD: false
FRAGMENT LENGTH: 57
FRAGMENT LINE AVG SIZE: 19.0
DEPTHS:
1 1 1 
AREA: 3
AVG DEPTH: 1.0
NUMBER OF LINES IN FRAGMENT: 3
---REFACTORING_FINISH---
DESCRIPTION: Extract Method	private newStringBuilder(noOfItems int) : StringBuilder extracted from public join(array char[], separator char, startIndex int, endIndex int) : String in class org.apache.commons.lang3.StringUtils
REFACTORING FILE DIFF URL: https://github.com/apache/commons-lang/commit/81ee0d062c888d8f8bcbc154cd7f0143710f458c/src/main/java/org/apache/commons/lang3/StringUtils.java
REFACTORING URL: https://github.com/apache/commons-lang/blob/81ee0d062c888d8f8bcbc154cd7f0143710f458c/src/main/java/org/apache/commons/lang3/StringUtils.java#L2836
DIRECTLY EXTRACTED OPERATION:
        return new StringBuilder(noOfItems * 16);
    }

PARAMS COUNT: 1
IS VOID METHOD: false
FRAGMENT LENGTH: 57
FRAGMENT LINE AVG SIZE: 19.0
DEPTHS:
1 1 1 
AREA: 3
AVG DEPTH: 1.0
NUMBER OF LINES IN FRAGMENT: 3
---REFACTORING_FINISH---
DESCRIPTION: Extract Method	private newStringBuilder(noOfItems int) : StringBuilder extracted from public join(array double[], separator char, startIndex int, endIndex int) : String in class org.apache.commons.lang3.StringUtils
REFACTORING FILE DIFF URL: https://github.com/apache/commons-lang/commit/81ee0d062c888d8f8bcbc154cd7f0143710f458c/src/main/java/org/apache/commons/lang3/StringUtils.java
REFACTORING URL: https://github.com/apache/commons-lang/blob/81ee0d062c888d8f8bcbc154cd7f0143710f458c/src/main/java/org/apache/commons/lang3/StringUtils.java#L2836
DIRECTLY EXTRACTED OPERATION:
        return new StringBuilder(noOfItems * 16);
    }

PARAMS COUNT: 1
IS VOID METHOD: false
FRAGMENT LENGTH: 57
FRAGMENT LINE AVG SIZE: 19.0
DEPTHS:
1 1 1 
AREA: 3
AVG DEPTH: 1.0
NUMBER OF LINES IN FRAGMENT: 3
---REFACTORING_FINISH---
DESCRIPTION: Extract Method	private newStringBuilder(noOfItems int) : StringBuilder extracted from public join(array float[], separator char, startIndex int, endIndex int) : String in class org.apache.commons.lang3.StringUtils
REFACTORING FILE DIFF URL: https://github.com/apache/commons-lang/commit/81ee0d062c888d8f8bcbc154cd7f0143710f458c/src/main/java/org/apache/commons/lang3/StringUtils.java
REFACTORING URL: https://github.com/apache/commons-lang/blob/81ee0d062c888d8f8bcbc154cd7f0143710f458c/src/main/java/org/apache/commons/lang3/StringUtils.java#L2836
DIRECTLY EXTRACTED OPERATION:
        return new StringBuilder(noOfItems * 16);
    }

PARAMS COUNT: 1
IS VOID METHOD: false
FRAGMENT LENGTH: 57
FRAGMENT LINE AVG SIZE: 19.0
DEPTHS:
1 1 1 
AREA: 3
AVG DEPTH: 1.0
NUMBER OF LINES IN FRAGMENT: 3
---REFACTORING_FINISH---
DESCRIPTION: Extract Method	private newStringBuilder(noOfItems int) : StringBuilder extracted from public join(array Object[], separator String, startIndex int, endIndex int) : String in class org.apache.commons.lang3.StringUtils
REFACTORING FILE DIFF URL: https://github.com/apache/commons-lang/commit/81ee0d062c888d8f8bcbc154cd7f0143710f458c/src/main/java/org/apache/commons/lang3/StringUtils.java
REFACTORING URL: https://github.com/apache/commons-lang/blob/81ee0d062c888d8f8bcbc154cd7f0143710f458c/src/main/java/org/apache/commons/lang3/StringUtils.java#L2836
DIRECTLY EXTRACTED OPERATION:
        return new StringBuilder(noOfItems * 16);
    }

PARAMS COUNT: 1
IS VOID METHOD: false
FRAGMENT LENGTH: 57
FRAGMENT LINE AVG SIZE: 19.0
DEPTHS:
1 1 1 
AREA: 3
AVG DEPTH: 1.0
NUMBER OF LINES IN FRAGMENT: 3
---REFACTORING_FINISH---
-----REFACTORINGS_END-----
COMMIT ID: 8e8e78d849825696237b9f540f3e082a44b1e838
URL: https://github.com/apache/commons-lang/commit/8e8e78d849825696237b9f540f3e082a44b1e838
DESCRIPTION: Extract Method	public getSimpleName(cls Class<?>, valueIfNull String) : String extracted from public getSimpleName(cls Class<?>) : String in class org.apache.commons.lang3.ClassUtils
REFACTORING FILE DIFF URL: https://github.com/apache/commons-lang/commit/8e8e78d849825696237b9f540f3e082a44b1e838/src/main/java/org/apache/commons/lang3/ClassUtils.java
REFACTORING URL: https://github.com/apache/commons-lang/blob/8e8e78d849825696237b9f540f3e082a44b1e838/src/main/java/org/apache/commons/lang3/ClassUtils.java#L255
DIRECTLY EXTRACTED OPERATION:
     * <p>Null-safe version of <code>aClass.getSimpleName()</code></p>
     *
     * @param cls the class for which to get the simple name; may be null
     * @param valueIfNull  the value to return if null
     * @return the simple class name or {@code valueIfNull}
     * @since 3.0
     * @see Class#getSimpleName()
     */
    public static String getSimpleName(final Class<?> cls, String valueIfNull) {
        return cls == null ? valueIfNull : cls.getSimpleName();
    }

PARAMS COUNT: 2
IS VOID METHOD: false
FRAGMENT LENGTH: 479
FRAGMENT LINE AVG SIZE: 39.916666666666664
DEPTHS:
0 1 1 1 1 1 1 1 1 2 1 1 
AREA: 12
AVG DEPTH: 1.0
NUMBER OF LINES IN FRAGMENT: 12
---REFACTORING_FINISH---
-----REFACTORINGS_END-----
COMMIT ID: 46007c151e4cd79891eed4d289ff372ba39d5b8c
URL: https://github.com/apache/commons-lang/commit/46007c151e4cd79891eed4d289ff372ba39d5b8c
DESCRIPTION: Extract Method	public getMethodsWithAnnotation(cls Class<?>, annotationCls Class<? extends Annotation>, searchSupers boolean, ignoreAccess boolean) : Method[] extracted from public getMethodsWithAnnotation(cls Class<?>, annotationCls Class<? extends Annotation>) : Method[] in class org.apache.commons.lang3.reflect.MethodUtils
REFACTORING FILE DIFF URL: https://github.com/apache/commons-lang/commit/46007c151e4cd79891eed4d289ff372ba39d5b8c/src/main/java/org/apache/commons/lang3/reflect/MethodUtils.java
REFACTORING URL: https://github.com/apache/commons-lang/blob/46007c151e4cd79891eed4d289ff372ba39d5b8c/src/main/java/org/apache/commons/lang3/reflect/MethodUtils.java#L862
DIRECTLY EXTRACTED OPERATION:
     * Gets all methods of the given class that are annotated with the given annotation.
     * @param cls
     *            the {@link Class} to query
     * @param annotationCls
     *            the {@link java.lang.annotation.Annotation} that must be present on a method to be matched
     * @param searchSupers
     *            determines if also a lookup in the entire inheritance hierarchy of the given class should be performed
     * @param ignoreAccess
     *            determines if also non public methods should be considered
     * @return an array of Methods (possibly empty).
     * @throws IllegalArgumentException
     *            if the class or annotation are {@code null}
     * @since 3.6
     */
    public static Method[] getMethodsWithAnnotation(final Class<?> cls, final Class<? extends Annotation> annotationCls,
                                                    boolean searchSupers, boolean ignoreAccess) {
        final List<Method> annotatedMethodsList = getMethodsListWithAnnotation(cls, annotationCls, searchSupers,
                ignoreAccess);
        return annotatedMethodsList.toArray(new Method[annotatedMethodsList.size()]);
    }

PARAMS COUNT: 4
IS VOID METHOD: false
FRAGMENT LENGTH: 1178
FRAGMENT LINE AVG SIZE: 56.095238095238095
DEPTHS:
-1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 0 0 0 -1 -1 
AREA: -18
AVG DEPTH: -0.8571428571428571
NUMBER OF LINES IN FRAGMENT: 21
---REFACTORING_FINISH---
DESCRIPTION: Extract Method	public getMethodsListWithAnnotation(cls Class<?>, annotationCls Class<? extends Annotation>, searchSupers boolean, ignoreAccess boolean) : List<Method> extracted from public getMethodsListWithAnnotation(cls Class<?>, annotationCls Class<? extends Annotation>) : List<Method> in class org.apache.commons.lang3.reflect.MethodUtils
REFACTORING FILE DIFF URL: https://github.com/apache/commons-lang/commit/46007c151e4cd79891eed4d289ff372ba39d5b8c/src/main/java/org/apache/commons/lang3/reflect/MethodUtils.java
REFACTORING URL: https://github.com/apache/commons-lang/blob/46007c151e4cd79891eed4d289ff372ba39d5b8c/src/main/java/org/apache/commons/lang3/reflect/MethodUtils.java#L884
DIRECTLY EXTRACTED OPERATION:
     * Gets all methods of the given class that are annotated with the given annotation.
     * @param cls
     *            the {@link Class} to query
     * @param annotationCls
     *            the {@link Annotation} that must be present on a method to be matched
     * @param searchSupers
     *            determines if also a lookup in the entire inheritance hierarchy of the given class should be performed
     * @param ignoreAccess
     *            determines if also non public methods should be considered
     * @return a list of Methods (possibly empty).
     * @throws IllegalArgumentException
     *            if the class or annotation are {@code null}
     * @since 3.6
     */
    public static List<Method> getMethodsListWithAnnotation(final Class<?> cls,
                                                            final Class<? extends Annotation> annotationCls,
                                                            boolean searchSupers, boolean ignoreAccess) {

        Validate.isTrue(cls != null, "The class must not be null");
        Validate.isTrue(annotationCls != null, "The annotation class must not be null");
        List<Class<?>> classes = (searchSupers ? getAllSuperclassesAndInterfaces(cls)
                : new ArrayList<Class<?>>());
        classes.add(0, cls);
        final List<Method> annotatedMethods = new ArrayList<>();
        for (Class<?> acls : classes) {
            final Method[] methods = (ignoreAccess ? acls.getDeclaredMethods() : acls.getMethods());
            for (final Method method : methods) {
                if (method.getAnnotation(annotationCls) != null) {
                    annotatedMethods.add(method);
                }
            }
        }
        return annotatedMethods;
    }

PARAMS COUNT: 4
IS VOID METHOD: false
FRAGMENT LENGTH: 1768
FRAGMENT LINE AVG SIZE: 50.51428571428571
DEPTHS:
-1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 1 1 2 3 2 1 0 0 -1 -1 
AREA: -9
AVG DEPTH: -0.2571428571428571
NUMBER OF LINES IN FRAGMENT: 35
---REFACTORING_FINISH---
-----REFACTORINGS_END-----
COMMIT ID: d3146a545612422d3f8078f10afa00342b327199
URL: https://github.com/apache/commons-lang/commit/d3146a545612422d3f8078f10afa00342b327199
DESCRIPTION: Extract Method	private isISO639LanguageCode(str String) : boolean extracted from private parseLocale(str String, len int) : Locale in class org.apache.commons.lang3.LocaleUtils
REFACTORING FILE DIFF URL: https://github.com/apache/commons-lang/commit/d3146a545612422d3f8078f10afa00342b327199/src/main/java/org/apache/commons/lang3/LocaleUtils.java
REFACTORING URL: https://github.com/apache/commons-lang/blob/d3146a545612422d3f8078f10afa00342b327199/src/main/java/org/apache/commons/lang3/LocaleUtils.java#L167
DIRECTLY EXTRACTED OPERATION:
     * Checks whether the given String is a ISO 639 compliant language code.
     *
     * @param str the String to check.
     * @return true, if the given String is a ISO 639 compliant language code.
     */
    private static boolean isISO639LanguageCode(final String str) {
        return StringUtils.isAllLowerCase(str) && (str.length() == 2 || str.length() == 3);
    }

PARAMS COUNT: 1
IS VOID METHOD: false
FRAGMENT LENGTH: 377
FRAGMENT LINE AVG SIZE: 41.888888888888886
DEPTHS:
0 1 1 1 1 1 2 1 1 
AREA: 9
AVG DEPTH: 1.0
NUMBER OF LINES IN FRAGMENT: 9
---REFACTORING_FINISH---
DESCRIPTION: Extract Method	private isISO3166CountryCode(str String) : boolean extracted from private parseLocale(str String, len int) : Locale in class org.apache.commons.lang3.LocaleUtils
REFACTORING FILE DIFF URL: https://github.com/apache/commons-lang/commit/d3146a545612422d3f8078f10afa00342b327199/src/main/java/org/apache/commons/lang3/LocaleUtils.java
REFACTORING URL: https://github.com/apache/commons-lang/blob/d3146a545612422d3f8078f10afa00342b327199/src/main/java/org/apache/commons/lang3/LocaleUtils.java#L177
DIRECTLY EXTRACTED OPERATION:
     * Checks whether the given String is a ISO 3166 alpha-2 country code.
     *
     * @param str the String to check
     * @return true, is the given String is a ISO 3166 compliant country code.
     */
    private static boolean isISO3166CountryCode(final String str) {
        return StringUtils.isAllUpperCase(str) && str.length() == 2;
    }

PARAMS COUNT: 1
IS VOID METHOD: false
FRAGMENT LENGTH: 351
FRAGMENT LINE AVG SIZE: 39.0
DEPTHS:
0 1 1 1 1 1 2 1 1 
AREA: 9
AVG DEPTH: 1.0
NUMBER OF LINES IN FRAGMENT: 9
---REFACTORING_FINISH---
-----REFACTORINGS_END-----
COMMIT ID: d547412bbd2a1ca56769a2bfa13b7ed9547310ca
URL: https://github.com/apache/commons-lang/commit/d547412bbd2a1ca56769a2bfa13b7ed9547310ca
DESCRIPTION: Extract Method	private parseLocale(str String, len int) : Locale extracted from public toLocale(str String) : Locale in class org.apache.commons.lang3.LocaleUtils
REFACTORING FILE DIFF URL: https://github.com/apache/commons-lang/commit/d547412bbd2a1ca56769a2bfa13b7ed9547310ca/src/main/java/org/apache/commons/lang3/LocaleUtils.java
REFACTORING URL: https://github.com/apache/commons-lang/blob/d547412bbd2a1ca56769a2bfa13b7ed9547310ca/src/main/java/org/apache/commons/lang3/LocaleUtils.java#L129
DIRECTLY EXTRACTED OPERATION:
        final String[] segments = str.split("_", -1);
        final int segmentCount = segments.length -1;
        final String country = segments[0];
        switch (segmentCount) {
            case 0:
                if (StringUtils.isAllLowerCase(str) && (len == 2 || len == 3)) {
                    return new Locale(str);
                }
                throw new IllegalArgumentException("Invalid locale format: " + str);

            case 1:
                if (StringUtils.isAllLowerCase(country) &&
                    (country.length() == 2 || country.length() == 3) &&
                     (segments[1].length() == 2 && StringUtils.isAllUpperCase(segments[1])) ||
                      (segments[1].length() == 3 && StringUtils.isNumeric(segments[1]))) {
                    return new Locale(country, segments[1]);
                }
                throw new IllegalArgumentException("Invalid locale format: " + str);

            case 2:
                if (StringUtils.isAllLowerCase(country) &&
                    (country.length() == 2 || country.length() == 3) &&
                    (segments[1].length() == 0 || segments[1].length() == 2 && StringUtils.isAllUpperCase(segments[1])) &&
                     segments[2].length() > 0) {
                    return new Locale(country, segments[1], segments[2]);
                }

            //$FALL-THROUGH$
            default:
                throw new IllegalArgumentException("Invalid locale format: " + str);
        }
    }

PARAMS COUNT: 2
IS VOID METHOD: false
FRAGMENT LENGTH: 1502
FRAGMENT LINE AVG SIZE: 45.515151515151516
DEPTHS:
1 2 2 2 3 3 4 3 3 3 3 3 3 3 3 4 3 3 3 3 3 3 3 3 4 3 3 3 3 3 2 1 1 
AREA: 92
AVG DEPTH: 2.787878787878788
NUMBER OF LINES IN FRAGMENT: 33
---REFACTORING_FINISH---
-----REFACTORINGS_END-----
COMMIT ID: 0095d8adf26b9469115b1be0358cb09d1fcb5fd4
URL: https://github.com/apache/commons-lang/commit/0095d8adf26b9469115b1be0358cb09d1fcb5fd4
DESCRIPTION: Extract Method	public setTestTransients(testTransients boolean) : EqualsBuilder extracted from public reflectionEquals(lhs Object, rhs Object, testTransients boolean, reflectUpToClass Class<?>, excludeFields String...) : boolean in class org.apache.commons.lang3.builder.EqualsBuilder
REFACTORING FILE DIFF URL: https://github.com/apache/commons-lang/commit/0095d8adf26b9469115b1be0358cb09d1fcb5fd4/src/main/java/org/apache/commons/lang3/builder/EqualsBuilder.java
REFACTORING URL: https://github.com/apache/commons-lang/blob/0095d8adf26b9469115b1be0358cb09d1fcb5fd4/src/main/java/org/apache/commons/lang3/builder/EqualsBuilder.java#L240
DIRECTLY EXTRACTED OPERATION:
     * Set testing transients behavior for calls 
     * of {@link #reflectionAppend(Object, Object)}.
     * @param testTransients whether to test transient fields
     * @return EqualsBuilder - used to chain calls.
     */
    public EqualsBuilder setTestTransients(boolean testTransients) {
        this.testTransients = testTransients;
        return this;
    }

PARAMS COUNT: 1
IS VOID METHOD: false
FRAGMENT LENGTH: 368
FRAGMENT LINE AVG SIZE: 36.8
DEPTHS:
0 1 1 1 1 1 2 2 1 1 
AREA: 11
AVG DEPTH: 1.1
NUMBER OF LINES IN FRAGMENT: 10
---REFACTORING_FINISH---
DESCRIPTION: Extract Method	public setTestRecursive(testRecursive boolean) : EqualsBuilder extracted from public reflectionEquals(lhs Object, rhs Object, testTransients boolean, reflectUpToClass Class<?>, excludeFields String...) : boolean in class org.apache.commons.lang3.builder.EqualsBuilder
REFACTORING FILE DIFF URL: https://github.com/apache/commons-lang/commit/0095d8adf26b9469115b1be0358cb09d1fcb5fd4/src/main/java/org/apache/commons/lang3/builder/EqualsBuilder.java
REFACTORING URL: https://github.com/apache/commons-lang/blob/0095d8adf26b9469115b1be0358cb09d1fcb5fd4/src/main/java/org/apache/commons/lang3/builder/EqualsBuilder.java#L262
DIRECTLY EXTRACTED OPERATION:
     * Set recursive test behavior 
     * of {@link #reflectionAppend(Object, Object)}.
     * @param testRecursive  whether to do a recursive test
     * @return EqualsBuilder - used to chain calls.
     */
    public EqualsBuilder setTestRecursive(boolean testRecursive) {
        this.testRecursive = testRecursive;
        return this;
    }

PARAMS COUNT: 1
IS VOID METHOD: false
FRAGMENT LENGTH: 348
FRAGMENT LINE AVG SIZE: 34.8
DEPTHS:
0 1 1 1 1 1 2 2 1 1 
AREA: 11
AVG DEPTH: 1.1
NUMBER OF LINES IN FRAGMENT: 10
---REFACTORING_FINISH---
DESCRIPTION: Extract Method	public setReflectUpToClass(reflectUpToClass Class<?>) : EqualsBuilder extracted from public reflectionEquals(lhs Object, rhs Object, testTransients boolean, reflectUpToClass Class<?>, excludeFields String...) : boolean in class org.apache.commons.lang3.builder.EqualsBuilder
REFACTORING FILE DIFF URL: https://github.com/apache/commons-lang/commit/0095d8adf26b9469115b1be0358cb09d1fcb5fd4/src/main/java/org/apache/commons/lang3/builder/EqualsBuilder.java
REFACTORING URL: https://github.com/apache/commons-lang/blob/0095d8adf26b9469115b1be0358cb09d1fcb5fd4/src/main/java/org/apache/commons/lang3/builder/EqualsBuilder.java#L283
DIRECTLY EXTRACTED OPERATION:
     * Set the superclass to reflect up to
     * at reflective tests.
     * @return EqualsBuilder - used to chain calls.
     */
    public EqualsBuilder setReflectUpToClass(Class<?> reflectUpToClass) {
        this.reflectUpToClass = reflectUpToClass;
        return this;
    }

PARAMS COUNT: 1
IS VOID METHOD: false
FRAGMENT LENGTH: 283
FRAGMENT LINE AVG SIZE: 31.444444444444443
DEPTHS:
0 1 1 1 1 2 2 1 1 
AREA: 10
AVG DEPTH: 1.1111111111111112
NUMBER OF LINES IN FRAGMENT: 9
---REFACTORING_FINISH---
DESCRIPTION: Extract Method	public setExcludeFields(excludeFields String...) : EqualsBuilder extracted from public reflectionEquals(lhs Object, rhs Object, testTransients boolean, reflectUpToClass Class<?>, excludeFields String...) : boolean in class org.apache.commons.lang3.builder.EqualsBuilder
REFACTORING FILE DIFF URL: https://github.com/apache/commons-lang/commit/0095d8adf26b9469115b1be0358cb09d1fcb5fd4/src/main/java/org/apache/commons/lang3/builder/EqualsBuilder.java
REFACTORING URL: https://github.com/apache/commons-lang/blob/0095d8adf26b9469115b1be0358cb09d1fcb5fd4/src/main/java/org/apache/commons/lang3/builder/EqualsBuilder.java#L302
DIRECTLY EXTRACTED OPERATION:
     * Set field names to be excluded by reflection tests.
     * @param excludeFields
     * @return EqualsBuilder - used to chain calls.
     */
    public EqualsBuilder setExcludeFields(String... excludeFields) {
        this.excludeFields = excludeFields;
        return this;
    }
    
PARAMS COUNT: 1
IS VOID METHOD: false
FRAGMENT LENGTH: 292
FRAGMENT LINE AVG SIZE: 32.44444444444444
DEPTHS:
0 1 1 1 1 2 2 1 1 
AREA: 10
AVG DEPTH: 1.1111111111111112
NUMBER OF LINES IN FRAGMENT: 9
---REFACTORING_FINISH---
DESCRIPTION: Extract Method	public reflectionAppend(lhs Object, rhs Object) : EqualsBuilder extracted from public reflectionEquals(lhs Object, rhs Object, testTransients boolean, reflectUpToClass Class<?>, excludeFields String...) : boolean in class org.apache.commons.lang3.builder.EqualsBuilder
REFACTORING FILE DIFF URL: https://github.com/apache/commons-lang/commit/0095d8adf26b9469115b1be0358cb09d1fcb5fd4/src/main/java/org/apache/commons/lang3/builder/EqualsBuilder.java
REFACTORING URL: https://github.com/apache/commons-lang/blob/0095d8adf26b9469115b1be0358cb09d1fcb5fd4/src/main/java/org/apache/commons/lang3/builder/EqualsBuilder.java#L479
DIRECTLY EXTRACTED OPERATION:
     * <p>Tests if two <code>objects</code> by using reflection.</p>
     * 
     * <p>It uses <code>AccessibleObject.setAccessible</code> to gain access to private
     * fields. This means that it will throw a security exception if run under
     * a security manager, if the permissions are not set up correctly. It is also
     * not as efficient as testing explicitly. Non-primitive fields are compared using 
     * <code>equals()</code>.</p>
     * 
     * <p>If the testTransients field is set to <code>true</code>, transient
     * members will be tested, otherwise they are ignored, as they are likely
     * derived fields, and not part of the value of the <code>Object</code>.</p>
     *
     * <p>Static fields will not be included. Superclass fields will be appended
     * up to and including the specified superclass in field <code>reflectUpToClass</code>.
     * A null superclass is treated as java.lang.Object.</p>
     * 
     * <p>Field names listed in field <code>excludeFields</code> will be ignored.</p>
     * 
     * @param lhs  the left hand object
     * @param rhs  the left hand object
     * @return EqualsBuilder - used to chain calls.
     */
    public EqualsBuilder reflectionAppend(final Object lhs, final Object rhs) {
        if(!isEquals)
            return this;
        
        if (lhs == rhs) {
            return this;
        }
        if (lhs == null || rhs == null) {
            isEquals = false;
            return this;
        }
        // Find the leaf class since there may be transients in the leaf
        // class or in classes between the leaf and root.
        // If we are not testing transients or a subclass has no ivars,
        // then a subclass can test equals to a superclass.
        final Class<?> lhsClass = lhs.getClass();
        final Class<?> rhsClass = rhs.getClass();
        Class<?> testClass;
        if (lhsClass.isInstance(rhs)) {
            testClass = lhsClass;
            if (!rhsClass.isInstance(lhs)) {
                // rhsClass is a subclass of lhsClass
                testClass = rhsClass;
            }
        } else if (rhsClass.isInstance(lhs)) {
            testClass = rhsClass;
            if (!lhsClass.isInstance(rhs)) {
                // lhsClass is a subclass of rhsClass
                testClass = lhsClass;
            }
        } else {
            // The two classes are not related.
            isEquals = false;
            return this;
        }
        
        try {
            if (testClass.isArray()) {
                append(lhs, rhs);
            } else {
                reflectionAppend(lhs, rhs, testClass);
                while (testClass.getSuperclass() != null && testClass != reflectUpToClass) {
                    testClass = testClass.getSuperclass();
                    reflectionAppend(lhs, rhs, testClass);
                }
            }
        } catch (final IllegalArgumentException e) {
            // In this case, we tried to test a subclass vs. a superclass and
            // the subclass has ivars or the ivars are transient and
            // we are testing transients.
            // If a subclass has ivars that we are trying to test them, we get an
            // exception and we know that the objects are not equal.
            isEquals = false;
            return this;
        }
        return this;
    }

PARAMS COUNT: 2
IS VOID METHOD: false
FRAGMENT LENGTH: 3359
FRAGMENT LINE AVG SIZE: 41.9875
DEPTHS:
0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 2 2 2 2 3 2 2 3 3 2 2 2 2 2 2 2 2 2 3 3 4 4 3 3 3 3 4 4 3 3 3 3 3 2 2 2 3 4 4 4 4 5 5 4 3 3 3 3 3 3 3 3 3 2 2 1 1 
AREA: 182
AVG DEPTH: 2.275
NUMBER OF LINES IN FRAGMENT: 80
---REFACTORING_FINISH---
DESCRIPTION: Extract Method	public reflectionEquals(lhs Object, rhs Object, testTransients boolean, reflectUpToClass Class<?>, testRecursive boolean, excludeFields String...) : boolean extracted from public reflectionEquals(lhs Object, rhs Object, testTransients boolean, reflectUpToClass Class<?>, excludeFields String...) : boolean in class org.apache.commons.lang3.builder.EqualsBuilder
REFACTORING FILE DIFF URL: https://github.com/apache/commons-lang/commit/0095d8adf26b9469115b1be0358cb09d1fcb5fd4/src/main/java/org/apache/commons/lang3/builder/EqualsBuilder.java
REFACTORING URL: https://github.com/apache/commons-lang/blob/0095d8adf26b9469115b1be0358cb09d1fcb5fd4/src/main/java/org/apache/commons/lang3/builder/EqualsBuilder.java#L426
DIRECTLY EXTRACTED OPERATION:
     * <p>This method uses reflection to determine if the two <code>Object</code>s
     * are equal.</p>
     *
     * <p>It uses <code>AccessibleObject.setAccessible</code> to gain access to private
     * fields. This means that it will throw a security exception if run under
     * a security manager, if the permissions are not set up correctly. It is also
     * not as efficient as testing explicitly. Non-primitive fields are compared using 
     * <code>equals()</code>.</p>
     *
     * <p>If the testTransients parameter is set to <code>true</code>, transient
     * members will be tested, otherwise they are ignored, as they are likely
     * derived fields, and not part of the value of the <code>Object</code>.</p>
     *
     * <p>Static fields will not be included. Superclass fields will be appended
     * up to and including the specified superclass. A null superclass is treated
     * as java.lang.Object.</p>
     * 
     * <p>If the testRecursive parameter is set to <code>true</code>, non primitive
     * (and non primitive wrapper) field types will be compared by 
     * <code>EqualsBuilder</code> recursively instead of invoking their 
     * <code>equals()</code> method. Leading to a deep reflection equals test.
     *
     * @param lhs  <code>this</code> object
     * @param rhs  the other object
     * @param testTransients  whether to include transient fields
     * @param reflectUpToClass  the superclass to reflect up to (inclusive),
     *  may be <code>null</code>
     * @param testRecursive  whether to call reflection equals on non primitive
     *  fields recursively. 
     * @param excludeFields  array of field names to exclude from testing
     * @return <code>true</code> if the two Objects have tested equals.
     * 
     * @see EqualsExclude
     */
    public static boolean reflectionEquals(final Object lhs, final Object rhs, final boolean testTransients, final Class<?> reflectUpToClass,
            boolean testRecursive, final String... excludeFields) {
        if (lhs == rhs) {
            return true;
        }
        if (lhs == null || rhs == null) {
            return false;
        }
        final EqualsBuilder equalsBuilder = new EqualsBuilder();
        equalsBuilder.setExcludeFields(excludeFields)
                    .setReflectUpToClass(reflectUpToClass)
                    .setTestTransients(testTransients)
                    .setTestRecursive(testRecursive);
        
        equalsBuilder.reflectionAppend(lhs, rhs);
        return equalsBuilder.isEquals();
    }
    
PARAMS COUNT: 6
IS VOID METHOD: false
FRAGMENT LENGTH: 2552
FRAGMENT LINE AVG SIZE: 49.07692307692308
DEPTHS:
0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 2 3 2 2 3 2 2 2 2 2 2 2 2 2 1 1 
AREA: 67
AVG DEPTH: 1.2884615384615385
NUMBER OF LINES IN FRAGMENT: 52
---REFACTORING_FINISH---
-----REFACTORINGS_END-----
COMMIT ID: c37a911d3a1541adc25c8d76f717015b2266d123
URL: https://github.com/apache/commons-lang/commit/c37a911d3a1541adc25c8d76f717015b2266d123
DESCRIPTION: Extract Method	public abbreviate(str String, abbrevMarker String, maxWidth int) : String extracted from public abbreviate(str String, offset int, maxWidth int) : String in class org.apache.commons.lang3.StringUtils
REFACTORING FILE DIFF URL: https://github.com/apache/commons-lang/commit/c37a911d3a1541adc25c8d76f717015b2266d123/src/main/java/org/apache/commons/lang3/StringUtils.java
REFACTORING URL: https://github.com/apache/commons-lang/blob/c37a911d3a1541adc25c8d76f717015b2266d123/src/main/java/org/apache/commons/lang3/StringUtils.java#L7424
DIRECTLY EXTRACTED OPERATION:
     * <p>Abbreviates a String using another given String as replacement marker. This will turn
     * "Now is the time for all good men" into "Now is the time for..." if "..." was defined
     * as the replacement marker.</p>
     *
     * <p>Specifically:</p>
     * <ul>
     *   <li>If the number of characters in {@code str} is less than or equal to 
     *       {@code maxWidth}, return {@code str}.</li>
     *   <li>Else abbreviate it to {@code (substring(str, 0, max-abbrevMarker.length) + abbrevMarker)}.</li>
     *   <li>If {@code maxWidth} is less than {@code abbrevMarker.length + 1}, throw an
     *       {@code IllegalArgumentException}.</li>
     *   <li>In no case will it return a String of length greater than
     *       {@code maxWidth}.</li>
     * </ul>
     *
     * <pre>
     * StringUtils.abbreviate(null, "...", *)      = null
     * StringUtils.abbreviate("abcdefg", null, *)  = "abcdefg"
     * StringUtils.abbreviate("", "...", 4)        = ""
     * StringUtils.abbreviate("abcdefg", ".", 5)   = "abcd."
     * StringUtils.abbreviate("abcdefg", ".", 7)   = "abcdefg"
     * StringUtils.abbreviate("abcdefg", ".", 8)   = "abcdefg"
     * StringUtils.abbreviate("abcdefg", "..", 4)  = "ab.."
     * StringUtils.abbreviate("abcdefg", "..", 3)  = "a.."
     * StringUtils.abbreviate("abcdefg", "..", 2)  = IllegalArgumentException
     * StringUtils.abbreviate("abcdefg", "...", 3) = IllegalArgumentException
     * </pre>
     *
     * @param str  the String to check, may be null
     * @param abbrevMarker  the String used as replacement marker
     * @param maxWidth  maximum length of result String, must be at least {@code abbrevMarker.length + 1}
     * @return abbreviated String, {@code null} if null String input
     * @throws IllegalArgumentException if the width is too small
     * @since 3.5
     */
    public static String abbreviate(final String str, final String abbrevMarker, final int maxWidth) {
        return abbreviate(str, abbrevMarker, 0, maxWidth);
    }

PARAMS COUNT: 3
IS VOID METHOD: false
FRAGMENT LENGTH: 2015
FRAGMENT LINE AVG SIZE: 51.666666666666664
DEPTHS:
0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 2 1 1 
AREA: 39
AVG DEPTH: 1.0
NUMBER OF LINES IN FRAGMENT: 39
---REFACTORING_FINISH---
DESCRIPTION: Extract Method	public abbreviate(str String, abbrevMarker String, offset int, maxWidth int) : String extracted from public abbreviate(str String, offset int, maxWidth int) : String in class org.apache.commons.lang3.StringUtils
REFACTORING FILE DIFF URL: https://github.com/apache/commons-lang/commit/c37a911d3a1541adc25c8d76f717015b2266d123/src/main/java/org/apache/commons/lang3/StringUtils.java
REFACTORING URL: https://github.com/apache/commons-lang/blob/c37a911d3a1541adc25c8d76f717015b2266d123/src/main/java/org/apache/commons/lang3/StringUtils.java#L7464
DIRECTLY EXTRACTED OPERATION:
     * <p>Abbreviates a String using a given replacement marker. This will turn
     * "Now is the time for all good men" into "...is the time for..." if "..." was defined
     * as the replacement marker.</p>
     *
     * <p>Works like {@code abbreviate(String, String, int)}, but allows you to specify
     * a "left edge" offset.  Note that this left edge is not necessarily going to
     * be the leftmost character in the result, or the first character following the
     * replacement marker, but it will appear somewhere in the result.
     *
     * <p>In no case will it return a String of length greater than {@code maxWidth}.</p>
     *
     * <pre>
     * StringUtils.abbreviate(null, null, *, *)                 = null
     * StringUtils.abbreviate("abcdefghijklmno", null, *, *)    = "abcdefghijklmno"
     * StringUtils.abbreviate("", "...", 0, 4)                  = ""
     * StringUtils.abbreviate("abcdefghijklmno", "---", -1, 10) = "abcdefg---"
     * StringUtils.abbreviate("abcdefghijklmno", ",", 0, 10)    = "abcdefghi,"
     * StringUtils.abbreviate("abcdefghijklmno", ",", 1, 10)    = "abcdefghi,"
     * StringUtils.abbreviate("abcdefghijklmno", ",", 2, 10)    = "abcdefghi,"
     * StringUtils.abbreviate("abcdefghijklmno", "::", 4, 10)   = "::efghij::"
     * StringUtils.abbreviate("abcdefghijklmno", "...", 6, 10)  = "...ghij..."
     * StringUtils.abbreviate("abcdefghijklmno", "*", 9, 10)    = "*ghijklmno"
     * StringUtils.abbreviate("abcdefghijklmno", "'", 10, 10)   = "'ghijklmno"
     * StringUtils.abbreviate("abcdefghijklmno", "!", 12, 10)   = "!ghijklmno"
     * StringUtils.abbreviate("abcdefghij", "abra", 0, 4)       = IllegalArgumentException
     * StringUtils.abbreviate("abcdefghij", "...", 5, 6)        = IllegalArgumentException
     * </pre>
     *
     * @param str  the String to check, may be null
     * @param abbrevMarker  the String used as replacement marker
     * @param offset  left edge of source String
     * @param maxWidth  maximum length of result String, must be at least 4
     * @return abbreviated String, {@code null} if null String input
     * @throws IllegalArgumentException if the width is too small
     * @since 3.5
     */
    public static String abbreviate(final String str, final String abbrevMarker, int offset, final int maxWidth) {
        if (isEmpty(str) || isEmpty(abbrevMarker)) {
            return str;
        }

        final int abbrevMarkerLength = abbrevMarker.length();
        final int minAbbrevWidth = abbrevMarkerLength + 1;
        final int minAbbrevWidthOffset = abbrevMarkerLength + abbrevMarkerLength + 1;

        if (maxWidth < minAbbrevWidth) {
            throw new IllegalArgumentException(String.format("Minimum abbreviation width is %d", minAbbrevWidth));
        }
        if (str.length() <= maxWidth) {
            return str;
        }
        if (offset > str.length()) {
            offset = str.length();
        }
        if (str.length() - offset < maxWidth - abbrevMarkerLength) {
            offset = str.length() - (maxWidth - abbrevMarkerLength);
        }
        if (offset <= abbrevMarkerLength+1) {
            return str.substring(0, maxWidth - abbrevMarkerLength) + abbrevMarker;
        }
        if (maxWidth < minAbbrevWidthOffset) {
            throw new IllegalArgumentException(String.format("Minimum abbreviation width with offset is %d", minAbbrevWidthOffset));
        }
        if (offset + maxWidth - abbrevMarkerLength < str.length()) {
            return abbrevMarker + abbreviate(str.substring(offset), abbrevMarker, maxWidth - abbrevMarkerLength);
        }
        return abbrevMarker + str.substring(str.length() - (maxWidth - abbrevMarkerLength));
    }

PARAMS COUNT: 4
IS VOID METHOD: false
FRAGMENT LENGTH: 3706
FRAGMENT LINE AVG SIZE: 53.710144927536234
DEPTHS:
0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 2 3 2 2 2 2 2 2 2 3 2 2 3 2 2 3 2 2 3 2 2 3 2 2 3 2 2 3 2 2 1 1 
AREA: 106
AVG DEPTH: 1.536231884057971
NUMBER OF LINES IN FRAGMENT: 69
---REFACTORING_FINISH---
-----REFACTORINGS_END-----
COMMIT ID: 809e2bed22f02264e0ac58bba070f6d84386cfc5
URL: https://github.com/apache/commons-lang/commit/809e2bed22f02264e0ac58bba070f6d84386cfc5
DESCRIPTION: Extract Method	private prepareAcquire() : void extracted from public acquire() : void in class org.apache.commons.lang3.concurrent.TimedSemaphore
REFACTORING FILE DIFF URL: https://github.com/apache/commons-lang/commit/809e2bed22f02264e0ac58bba070f6d84386cfc5/src/main/java/org/apache/commons/lang3/concurrent/TimedSemaphore.java
REFACTORING URL: https://github.com/apache/commons-lang/blob/809e2bed22f02264e0ac58bba070f6d84386cfc5/src/main/java/org/apache/commons/lang3/concurrent/TimedSemaphore.java#L441
DIRECTLY EXTRACTED OPERATION:
     * Prepares an acquire operation. Checks for the current state and starts the internal
     * timer if necessary. This method must be called with the lock of this object held.
     */
    private void prepareAcquire() {
        if (isShutdown()) {
            throw new IllegalStateException("TimedSemaphore is shut down!");
        }

        if (task == null) {
            task = startTimer();
        }
    }

IS VOID METHOD: true
FRAGMENT LENGTH: 418
FRAGMENT LINE AVG SIZE: 32.15384615384615
DEPTHS:
0 1 1 1 2 3 2 2 2 3 2 1 1 
AREA: 21
AVG DEPTH: 1.6153846153846154
NUMBER OF LINES IN FRAGMENT: 13
---REFACTORING_FINISH---
DESCRIPTION: Extract Method	private acquirePermit() : boolean extracted from public acquire() : void in class org.apache.commons.lang3.concurrent.TimedSemaphore
REFACTORING FILE DIFF URL: https://github.com/apache/commons-lang/commit/809e2bed22f02264e0ac58bba070f6d84386cfc5/src/main/java/org/apache/commons/lang3/concurrent/TimedSemaphore.java
REFACTORING URL: https://github.com/apache/commons-lang/blob/809e2bed22f02264e0ac58bba070f6d84386cfc5/src/main/java/org/apache/commons/lang3/concurrent/TimedSemaphore.java#L455
DIRECTLY EXTRACTED OPERATION:
     * Internal helper method for acquiring a permit. This method checks whether currently
     * a permit can be acquired and - if so - increases the internal counter. The return
     * value indicates whether a permit could be acquired. This method must be called with
     * the lock of this object held.
     *
     * @return a flag whether a permit could be acquired
     */
    private boolean acquirePermit() {
        if (getLimit() <= NO_LIMIT || acquireCount < getLimit()) {
            acquireCount++;
            return true;
        }
        return false;
    }
}
IS VOID METHOD: false
FRAGMENT LENGTH: 578
FRAGMENT LINE AVG SIZE: 38.53333333333333
DEPTHS:
0 1 1 1 1 1 1 1 2 3 3 2 2 1 0 
AREA: 20
AVG DEPTH: 1.3333333333333333
NUMBER OF LINES IN FRAGMENT: 15
---REFACTORING_FINISH---
-----REFACTORINGS_END-----
COMMIT ID: c503d742f094dc2048b72c3f78f5e2e6070a44e1
URL: https://github.com/apache/commons-lang/commit/c503d742f094dc2048b72c3f78f5e2e6070a44e1
DESCRIPTION: Extract Method	public isCreatable(str String) : boolean extracted from public isNumber(str String) : boolean in class org.apache.commons.lang3.math.NumberUtils
REFACTORING FILE DIFF URL: https://github.com/apache/commons-lang/commit/c503d742f094dc2048b72c3f78f5e2e6070a44e1/src/main/java/org/apache/commons/lang3/math/NumberUtils.java
REFACTORING URL: https://github.com/apache/commons-lang/blob/c503d742f094dc2048b72c3f78f5e2e6070a44e1/src/main/java/org/apache/commons/lang3/math/NumberUtils.java#L1376
DIRECTLY EXTRACTED OPERATION:
     * <p>Checks whether the String a valid Java number.</p>
     *
     * <p>Valid numbers include hexadecimal marked with the <code>0x</code> or
     * <code>0X</code> qualifier, octal numbers, scientific notation and numbers 
     * marked with a type qualifier (e.g. 123L).</p>
     * 
     * <p>Non-hexadecimal strings beginning with a leading zero are
     * treated as octal values. Thus the string <code>09</code> will return
     * <code>false</code>, since <code>9</code> is not a valid octal value.
     * However, numbers beginning with {@code 0.} are treated as decimal.</p>
     *
     * <p><code>null</code> and empty/blank {@code String} will return
     * <code>false</code>.</p>
     *
     * <p>Note, {@link #createNumber(String)} should return a number for every
     * input resuling in <code>true</code>.</p>
     *
     * @param str  the <code>String</code> to check
     * @return <code>true</code> if the string is a correctly formatted number
     * @since 3.3 the code supports hex {@code 0Xhhh} and octal {@code 0ddd} validation
     */
    public static boolean isCreatable(final String str) {
        if (StringUtils.isEmpty(str)) {
            return false;
        }
        final char[] chars = str.toCharArray();
        int sz = chars.length;
        boolean hasExp = false;
        boolean hasDecPoint = false;
        boolean allowSigns = false;
        boolean foundDigit = false;
        boolean isJava6 = StringUtils.startsWith(System.getProperty("java.version"), "1.6");
        // deal with any possible sign up front
        final int start = (chars[0] == '-' || chars[0] == '+') ? 1 : 0;
        final boolean hasLeadingPlusSign = (start == 1 && chars[0] == '+');
        if (sz > start + 1 && chars[start] == '0') { // leading 0
            if (
                 (chars[start + 1] == 'x') || 
                 (chars[start + 1] == 'X') 
            ) { // leading 0x/0X
                int i = start + 2;
                if (i == sz) {
                    return false; // str == "0x"
                }
                // checking hex (it can't be anything else)
                for (; i < chars.length; i++) {
                    if ((chars[i] < '0' || chars[i] > '9')
                        && (chars[i] < 'a' || chars[i] > 'f')
                        && (chars[i] < 'A' || chars[i] > 'F')) {
                        return false;
                    }
                }
                return true;
           } else if (Character.isDigit(chars[start + 1])) {
               // leading 0, but not hex, must be octal
               int i = start + 1;
               for (; i < chars.length; i++) {
                   if (chars[i] < '0' || chars[i] > '7') {
                       return false;
                   }
               }
               return true;               
           }
        }
        sz--; // don't want to loop to the last char, check it afterwords
              // for type qualifiers
        int i = start;
        // loop to the next to last char or to the last char if we need another digit to
        // make a valid number (e.g. chars[0..5] = "1234E")
        while (i < sz || (i < sz + 1 && allowSigns && !foundDigit)) {
            if (chars[i] >= '0' && chars[i] <= '9') {
                foundDigit = true;
                allowSigns = false;

            } else if (chars[i] == '.') {
                if (hasDecPoint || hasExp) {
                    // two decimal points or dec in exponent   
                    return false;
                }
                hasDecPoint = true;
            } else if (chars[i] == 'e' || chars[i] == 'E') {
                // we've already taken care of hex.
                if (hasExp) {
                    // two E's
                    return false;
                }
                if (!foundDigit) {
                    return false;
                }
                hasExp = true;
                allowSigns = true;
            } else if (chars[i] == '+' || chars[i] == '-') {
                if (!allowSigns) {
                    return false;
                }
                allowSigns = false;
                foundDigit = false; // we need a digit after the E
            } else {
                return false;
            }
            i++;
        }
        if (i < chars.length) {
            if (chars[i] >= '0' && chars[i] <= '9') {
                if (isJava6 && hasLeadingPlusSign && !hasDecPoint) {
                    return false;
                }
                // no type qualifier, OK
                return true;
            }
            if (chars[i] == 'e' || chars[i] == 'E') {
                // can't have an E at the last byte
                return false;
            }
            if (chars[i] == '.') {
                if (hasDecPoint || hasExp) {
                    // two decimal points or dec in exponent
                    return false;
                }
                // single trailing decimal point after non-exponent is ok
                return foundDigit;
            }
            if (!allowSigns
                && (chars[i] == 'd'
                    || chars[i] == 'D'
                    || chars[i] == 'f'
                    || chars[i] == 'F')) {
                return foundDigit;
            }
            if (chars[i] == 'l'
                || chars[i] == 'L') {
                // not allowing L with an exponent or decimal point
                return foundDigit && !hasExp && !hasDecPoint;
            }
            // last character is illegal
            return false;
        }
        // allowSigns is true iff the val ends in 'E'
        // found digit it to make sure weird stuff like '.' and '1E-' doesn't pass
        return !allowSigns && foundDigit;
    }
    
PARAMS COUNT: 1
IS VOID METHOD: false
FRAGMENT LENGTH: 5759
FRAGMENT LINE AVG SIZE: 40.556338028169016
DEPTHS:
0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 2 3 2 2 2 2 2 2 2 2 2 2 2 2 3 3 3 3 4 4 5 4 4 4 5 5 5 6 5 4 4 4 4 4 4 5 6 5 4 4 3 2 2 2 2 2 2 2 3 4 4 4 4 4 5 5 4 4 4 4 4 5 5 4 4 5 4 4 4 4 4 5 4 4 4 4 4 3 3 2 2 3 4 5 4 4 4 3 3 4 4 3 3 4 5 5 4 4 4 3 3 3 3 3 3 4 3 3 3 4 4 3 3 3 2 2 2 2 1 1 
AREA: 437
AVG DEPTH: 3.0774647887323945
NUMBER OF LINES IN FRAGMENT: 142
---REFACTORING_FINISH---
-----REFACTORINGS_END-----
COMMIT ID: c7c85ee39892df3ca007c6596c41654865be7e43
URL: https://github.com/apache/commons-lang/commit/c7c85ee39892df3ca007c6596c41654865be7e43
DESCRIPTION: Extract Method	private appendArray(lhs Object, rhs Object, comparator Comparator<?>) : void extracted from public append(lhs Object, rhs Object, comparator Comparator<?>) : CompareToBuilder in class org.apache.commons.lang3.builder.CompareToBuilder
REFACTORING FILE DIFF URL: https://github.com/apache/commons-lang/commit/c7c85ee39892df3ca007c6596c41654865be7e43/src/main/java/org/apache/commons/lang3/builder/CompareToBuilder.java
REFACTORING URL: https://github.com/apache/commons-lang/blob/c7c85ee39892df3ca007c6596c41654865be7e43/src/main/java/org/apache/commons/lang3/builder/CompareToBuilder.java#L438
DIRECTLY EXTRACTED OPERATION:
        // switch on type of array, to dispatch to the correct handler
        // handles multi dimensional arrays
        // throws a ClassCastException if rhs is not the correct array type
        if (lhs instanceof long[]) {
            append((long[]) lhs, (long[]) rhs);
        } else if (lhs instanceof int[]) {
            append((int[]) lhs, (int[]) rhs);
        } else if (lhs instanceof short[]) {
            append((short[]) lhs, (short[]) rhs);
        } else if (lhs instanceof char[]) {
            append((char[]) lhs, (char[]) rhs);
        } else if (lhs instanceof byte[]) {
            append((byte[]) lhs, (byte[]) rhs);
        } else if (lhs instanceof double[]) {
            append((double[]) lhs, (double[]) rhs);
        } else if (lhs instanceof float[]) {
            append((float[]) lhs, (float[]) rhs);
        } else if (lhs instanceof boolean[]) {
            append((boolean[]) lhs, (boolean[]) rhs);
        } else {
            // not an array of primitives
            // throws a ClassCastException if rhs is not an array
            append((Object[]) lhs, (Object[]) rhs, comparator);
        }
    }

PARAMS COUNT: 3
IS VOID METHOD: true
FRAGMENT LENGTH: 1144
FRAGMENT LINE AVG SIZE: 44.0
DEPTHS:
1 2 2 2 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 2 1 1 
AREA: 68
AVG DEPTH: 2.6153846153846154
NUMBER OF LINES IN FRAGMENT: 26
---REFACTORING_FINISH---
-----REFACTORINGS_END-----
COMMIT ID: 0fe9685c8a78ba2d780a3ec1e1a323990dc6d218
URL: https://github.com/apache/commons-lang/commit/0fe9685c8a78ba2d780a3ec1e1a323990dc6d218
DESCRIPTION: Extract Method	public wrap(str String, wrapLength int, newLineStr String, wrapLongWords boolean, wrapOn String) : String extracted from public wrap(str String, wrapLength int, newLineStr String, wrapLongWords boolean) : String in class org.apache.commons.lang3.text.WordUtils
REFACTORING FILE DIFF URL: https://github.com/apache/commons-lang/commit/0fe9685c8a78ba2d780a3ec1e1a323990dc6d218/src/main/java/org/apache/commons/lang3/text/WordUtils.java
REFACTORING URL: https://github.com/apache/commons-lang/blob/0fe9685c8a78ba2d780a3ec1e1a323990dc6d218/src/main/java/org/apache/commons/lang3/text/WordUtils.java#L179
DIRECTLY EXTRACTED OPERATION:
     * <p>Wraps a single line of text, identifying words by <code>' '</code>.</p>
     *
     * <p>Leading spaces on a new line are stripped.
     * Trailing spaces are not stripped.</p>
     *
     * <table border="1" summary="Wrap Results">
     *  <tr>
     *   <th>input</th>
     *   <th>wrapLenght</th>
     *   <th>newLineString</th>
     *   <th>wrapLongWords</th>
     *   <th>result</th>
     *  </tr>
     *  <tr>
     *   <td>null</td>
     *   <td>*</td>
     *   <td>*</td>
     *   <td>true/false</td>
     *   <td>null</td>
     *  </tr>
     *  <tr>
     *   <td>""</td>
     *   <td>*</td>
     *   <td>*</td>
     *   <td>true/false</td>
     *   <td>""</td>
     *  </tr>
     *  <tr>
     *   <td>"Here is one line of text that is going to be wrapped after 20 columns."</td>
     *   <td>20</td>
     *   <td>"\n"</td>
     *   <td>true/false</td>
     *   <td>"Here is one line of\ntext that is going\nto be wrapped after\n20 columns."</td>
     *  </tr>
     *  <tr>
     *   <td>"Here is one line of text that is going to be wrapped after 20 columns."</td>
     *   <td>20</td>
     *   <td>"&lt;br /&gt;"</td>
     *   <td>true/false</td>
     *   <td>"Here is one line of&lt;br /&gt;text that is going&lt;br /&gt;to be wrapped after&lt;br /&gt;20 columns."</td>
     *  </tr>
     *  <tr>
     *   <td>"Here is one line of text that is going to be wrapped after 20 columns."</td>
     *   <td>20</td>
     *   <td>null</td>
     *   <td>true/false</td>
     *   <td>"Here is one line of" + systemNewLine + "text that is going" + systemNewLine + "to be wrapped after" + systemNewLine + "20 columns."</td>
     *  </tr>
     *  <tr>
     *   <td>"Click here to jump to the commons website - http://commons.apache.org"</td>
     *   <td>20</td>
     *   <td>"\n"</td>
     *   <td>false</td>
     *   <td>"Click here to jump\nto the commons\nwebsite -\nhttp://commons.apache.org"</td>
     *  </tr>
     *  <tr>
     *   <td>"Click here to jump to the commons website - http://commons.apache.org"</td>
     *   <td>20</td>
     *   <td>"\n"</td>
     *   <td>true</td>
     *   <td>"Click here to jump\nto the commons\nwebsite -\nhttp://commons.apach\ne.org"</td>
     *  </tr>
     * </table>
     *
     * @param str  the String to be word wrapped, may be null
     * @param wrapLength  the column to wrap the words at, less than 1 is treated as 1
     * @param newLineStr  the string to insert for a new line,
     *  <code>null</code> uses the system property line separator
     * @param wrapLongWords  true if long words (such as URLs) should be wrapped
     * @param wrapOn regex expression to be used as a breakable characters,
     *               if blank string is provided a space character will be used
     * @return a line with newlines inserted, <code>null</code> if null input
     */
    public static String wrap(final String str, int wrapLength, String newLineStr, final boolean wrapLongWords, String wrapOn) {
        if (str == null) {
            return null;
        }
        if (newLineStr == null) {
            newLineStr = SystemUtils.LINE_SEPARATOR;
        }
        if (wrapLength < 1) {
            wrapLength = 1;
        }
        if (StringUtils.isBlank(wrapOn)) {
            wrapOn = " ";
        }
        Pattern patternToWrapOn = Pattern.compile(wrapOn);
        final int inputLineLength = str.length();
        int offset = 0;
        final StringBuilder wrappedLine = new StringBuilder(inputLineLength + 32);

        while (offset < inputLineLength) {
            int spaceToWrapAt = -1;
            Matcher matcher = patternToWrapOn.matcher(str.substring(offset, Math.min(offset + wrapLength + 1, inputLineLength)));
            if (matcher.find()) {
                if (matcher.start() == 0) {
                    offset += matcher.end();
                    continue;
                }else {
                    spaceToWrapAt = matcher.start();
                }
            }

            // only last line without leading spaces is left
            if(inputLineLength - offset <= wrapLength) {
                break;
            }

            while(matcher.find()){
                spaceToWrapAt = matcher.start() + offset;
            }

            if (spaceToWrapAt >= offset) {
                // normal case
                wrappedLine.append(str.substring(offset, spaceToWrapAt));
                wrappedLine.append(newLineStr);
                offset = spaceToWrapAt + 1;

            } else {
                // really long word or URL
                if (wrapLongWords) {
                    // wrap really long word one line at a time
                    wrappedLine.append(str.substring(offset, wrapLength + offset));
                    wrappedLine.append(newLineStr);
                    offset += wrapLength;
                } else {
                    // do not wrap really long word, just extend beyond limit
                    matcher = patternToWrapOn.matcher(str.substring(offset + wrapLength));
                    if (matcher.find()) {
                        spaceToWrapAt = matcher.start() + offset + wrapLength;
                    }

                    if (spaceToWrapAt >= 0) {
                        wrappedLine.append(str.substring(offset, spaceToWrapAt));
                        wrappedLine.append(newLineStr);
                        offset = spaceToWrapAt + 1;
                    } else {
                        wrappedLine.append(str.substring(offset));
                        offset = inputLineLength;
                    }
                }
            }
        }

        // Whatever is left in line is short enough to just pass through
        wrappedLine.append(str.substring(offset));

        return wrappedLine.toString();
    }

PARAMS COUNT: 5
IS VOID METHOD: false
FRAGMENT LENGTH: 5753
FRAGMENT LINE AVG SIZE: 38.35333333333333
DEPTHS:
0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 2 3 2 2 3 2 2 3 2 2 3 2 2 2 2 2 2 2 3 3 3 4 5 5 5 5 4 3 3 3 3 4 3 3 3 4 3 3 3 4 4 4 4 4 4 4 4 5 5 5 5 5 5 5 5 6 5 5 5 6 6 6 6 6 6 5 4 3 2 2 2 2 2 2 1 1 
AREA: 343
AVG DEPTH: 2.2866666666666666
NUMBER OF LINES IN FRAGMENT: 150
---REFACTORING_FINISH---
-----REFACTORINGS_END-----
COMMIT ID: 18b1bc203bdb236bfd9084193aa2d55d4b605139
URL: https://github.com/apache/commons-lang/commit/18b1bc203bdb236bfd9084193aa2d55d4b605139
DESCRIPTION: Extract Method	private appendArray(object Object) : void extracted from public append(object Object) : HashCodeBuilder in class org.apache.commons.lang3.builder.HashCodeBuilder
REFACTORING FILE DIFF URL: https://github.com/apache/commons-lang/commit/18b1bc203bdb236bfd9084193aa2d55d4b605139/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java
REFACTORING URL: https://github.com/apache/commons-lang/blob/18b1bc203bdb236bfd9084193aa2d55d4b605139/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java#L861
DIRECTLY EXTRACTED OPERATION:
     * <p>
     * Append a <code>hashCode</code> for an array.
     * </p>
     *
     * @param object
     *            the array to add to the <code>hashCode</code>
     */
    private void appendArray(final Object object) {
        // 'Switch' on type of array, to dispatch to the correct handler
        // This handles multi dimensional arrays
        if (object instanceof long[]) {
            append((long[]) object);
        } else if (object instanceof int[]) {
            append((int[]) object);
        } else if (object instanceof short[]) {
            append((short[]) object);
        } else if (object instanceof char[]) {
            append((char[]) object);
        } else if (object instanceof byte[]) {
            append((byte[]) object);
        } else if (object instanceof double[]) {
            append((double[]) object);
        } else if (object instanceof float[]) {
            append((float[]) object);
        } else if (object instanceof boolean[]) {
            append((boolean[]) object);
        } else {
            // Not an array of primitives
            append((Object[]) object);
        }
    }

PARAMS COUNT: 1
IS VOID METHOD: true
FRAGMENT LENGTH: 1141
FRAGMENT LINE AVG SIZE: 35.65625
DEPTHS:
0 1 1 1 1 1 1 1 2 2 2 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 2 1 1 
AREA: 71
AVG DEPTH: 2.21875
NUMBER OF LINES IN FRAGMENT: 32
---REFACTORING_FINISH---
-----REFACTORINGS_END-----
COMMIT ID: 5fef9575646f6583fd2d9ee01368b3deefe6ce82
URL: https://github.com/apache/commons-lang/commit/5fef9575646f6583fd2d9ee01368b3deefe6ce82
DESCRIPTION: Extract Method	public invokeMethod(object Object, forceAccess boolean, methodName String, args Object...) : Object extracted from public invokeMethod(object Object, methodName String, args Object[], parameterTypes Class<?>[]) : Object in class org.apache.commons.lang3.reflect.MethodUtils
REFACTORING FILE DIFF URL: https://github.com/apache/commons-lang/commit/5fef9575646f6583fd2d9ee01368b3deefe6ce82/src/main/java/org/apache/commons/lang3/reflect/MethodUtils.java
REFACTORING URL: https://github.com/apache/commons-lang/blob/5fef9575646f6583fd2d9ee01368b3deefe6ce82/src/main/java/org/apache/commons/lang3/reflect/MethodUtils.java#L150
DIRECTLY EXTRACTED OPERATION:
     * <p>Invokes a named method whose parameter type matches the object type.</p>
     *
     * <p>This method supports calls to methods taking primitive parameters 
     * via passing in wrapping classes. So, for example, a {@code Boolean} object
     * would match a {@code boolean} primitive.</p>
     *
     * <p>This is a convenient wrapper for
     * {@link #invokeMethod(Object object,boolean forceAccess,String methodName, Object[] args, Class[] parameterTypes)}.
     * </p>
     *
     * @param object invoke method on this object
     * @param methodName get method with this name
     * @param args use these arguments - treat null as empty array
     * @return The value returned by the invoked method
     *
     * @throws NoSuchMethodException if there is no such accessible method
     * @throws InvocationTargetException wraps an exception thrown by the method invoked
     * @throws IllegalAccessException if the requested method is not accessible via reflection
     * 
     * @since 3.5
     */
    public static Object invokeMethod(final Object object, final boolean forceAccess, final String methodName,
            Object... args) throws NoSuchMethodException,
            IllegalAccessException, InvocationTargetException {
        args = ArrayUtils.nullToEmpty(args);
        final Class<?>[] parameterTypes = ClassUtils.toClass(args);
        return invokeMethod(object, forceAccess, methodName, args, parameterTypes);
    }

PARAMS COUNT: 4
IS VOID METHOD: false
FRAGMENT LENGTH: 1453
FRAGMENT LINE AVG SIZE: 50.10344827586207
DEPTHS:
0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 2 2 2 1 1 
AREA: 31
AVG DEPTH: 1.0689655172413792
NUMBER OF LINES IN FRAGMENT: 29
---REFACTORING_FINISH---
DESCRIPTION: Extract Method	public invokeMethod(object Object, forceAccess boolean, methodName String, args Object[], parameterTypes Class<?>[]) : Object extracted from public invokeMethod(object Object, methodName String, args Object[], parameterTypes Class<?>[]) : Object in class org.apache.commons.lang3.reflect.MethodUtils
REFACTORING FILE DIFF URL: https://github.com/apache/commons-lang/commit/5fef9575646f6583fd2d9ee01368b3deefe6ce82/src/main/java/org/apache/commons/lang3/reflect/MethodUtils.java
REFACTORING URL: https://github.com/apache/commons-lang/blob/5fef9575646f6583fd2d9ee01368b3deefe6ce82/src/main/java/org/apache/commons/lang3/reflect/MethodUtils.java#L180
DIRECTLY EXTRACTED OPERATION:
     * <p>Invokes a named method whose parameter type matches the object type.</p>
     *
     * <p>This method supports calls to methods taking primitive parameters 
     * via passing in wrapping classes. So, for example, a {@code Boolean} object
     * would match a {@code boolean} primitive.</p>
     *
     * @param object invoke method on this object
     * @param forceAccess force access to invoke method even if it's not accessible
     * @param methodName get method with this name
     * @param args use these arguments - treat null as empty array
     * @param parameterTypes match these parameters - treat null as empty array
     * @return The value returned by the invoked method
     *
     * @throws NoSuchMethodException if there is no such accessible method
     * @throws InvocationTargetException wraps an exception thrown by the method invoked
     * @throws IllegalAccessException if the requested method is not accessible via reflection
     */
    public static Object invokeMethod(final Object object, final boolean forceAccess, final String methodName,
            Object[] args, Class<?>[] parameterTypes)
            throws NoSuchMethodException, IllegalAccessException,
            InvocationTargetException {
        parameterTypes = ArrayUtils.nullToEmpty(parameterTypes);
        args = ArrayUtils.nullToEmpty(args);
        
        final String messagePrefix;
        Method method = null;
        boolean isOriginallyAccessible = false;
        Object result = null;
        
        try {
            if (forceAccess) {
            	messagePrefix = "No such method: ";
            	method = getMatchingMethod(object.getClass(),
                        methodName, parameterTypes);
            	if (method != null) {
            	    isOriginallyAccessible = method.isAccessible();
            	    if (!isOriginallyAccessible) {
            	        method.setAccessible(true);
            	    }
            	}
            }  else {
            	messagePrefix = "No such accessible method: ";
            	method = getMatchingAccessibleMethod(object.getClass(),
                        methodName, parameterTypes);
            }
            
            if (method == null) {
                throw new NoSuchMethodException(messagePrefix
                        + methodName + "() on object: "
                        + object.getClass().getName());
            }
            args = toVarArgs(method, args);
            
            result = method.invoke(object, args);
        }
        finally {
            if (method != null && forceAccess && method.isAccessible() != isOriginallyAccessible) {
                method.setAccessible(isOriginallyAccessible);
            }
        }
        
        return result;
    }
    
PARAMS COUNT: 5
IS VOID METHOD: false
FRAGMENT LENGTH: 2767
FRAGMENT LINE AVG SIZE: 43.234375
DEPTHS:
0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 2 3 4 4 4 4 5 5 6 5 4 4 4 4 4 3 3 3 4 4 4 3 3 3 3 2 2 3 4 3 2 2 2 1 1 
AREA: 153
AVG DEPTH: 2.390625
NUMBER OF LINES IN FRAGMENT: 64
---REFACTORING_FINISH---
-----REFACTORINGS_END-----
COMMIT ID: eccf213204b776e40efcc031f4c0df560b9421e9
URL: https://github.com/apache/commons-lang/commit/eccf213204b776e40efcc031f4c0df560b9421e9
DESCRIPTION: Extract Method	private replace(text String, searchString String, replacement String, max int, ignoreCase boolean) : String extracted from public replace(text String, searchString String, replacement String, max int) : String in class org.apache.commons.lang3.StringUtils
REFACTORING FILE DIFF URL: https://github.com/apache/commons-lang/commit/eccf213204b776e40efcc031f4c0df560b9421e9/src/main/java/org/apache/commons/lang3/StringUtils.java
REFACTORING URL: https://github.com/apache/commons-lang/blob/eccf213204b776e40efcc031f4c0df560b9421e9/src/main/java/org/apache/commons/lang3/StringUtils.java#L5202
DIRECTLY EXTRACTED OPERATION:
     * <p>Replaces a String with another String inside a larger String,
     * for the first {@code max} values of the search String, 
     * case sensitively/insensisitively based on {@code ignoreCase} value.</p>
     *
     * <p>A {@code null} reference passed to this method is a no-op.</p>
     *
     * <pre>
     * StringUtils.replace(null, *, *, *, false)         = null
     * StringUtils.replace("", *, *, *, false)           = ""
     * StringUtils.replace("any", null, *, *, false)     = "any"
     * StringUtils.replace("any", *, null, *, false)     = "any"
     * StringUtils.replace("any", "", *, *, false)       = "any"
     * StringUtils.replace("any", *, *, 0, false)        = "any"
     * StringUtils.replace("abaa", "a", null, -1, false) = "abaa"
     * StringUtils.replace("abaa", "a", "", -1, false)   = "b"
     * StringUtils.replace("abaa", "a", "z", 0, false)   = "abaa"
     * StringUtils.replace("abaa", "A", "z", 1, false)   = "abaa"
     * StringUtils.replace("abaa", "A", "z", 1, true)   = "zbaa"
     * StringUtils.replace("abAa", "a", "z", 2, true)   = "zbza"
     * StringUtils.replace("abAa", "a", "z", -1, true)  = "zbzz"
     * </pre>
     *
     * @param text  text to search and replace in, may be null
     * @param searchString  the String to search for (case insensitive), may be null
     * @param replacement  the String to replace it with, may be null
     * @param max  maximum number of values to replace, or {@code -1} if no maximum
     * @param ignoreCase if true replace is case insensitive, otherwise case sensitive
     * @return the text with any replacements processed,
     *  {@code null} if null String input
     */
     private static String replace(String text, String searchString, String replacement, int max, boolean ignoreCase) {
         if (isEmpty(text) || isEmpty(searchString) || replacement == null || max == 0) {
             return text;
         }
         String searchText = text;
         if (ignoreCase) {
             searchText = text.toLowerCase();
             searchString = searchString.toLowerCase();
         }
         int start = 0;
         int end = searchText.indexOf(searchString, start);
         if (end == INDEX_NOT_FOUND) {
             return text;
         }
         final int replLength = searchString.length();
         int increase = replacement.length() - replLength;
         increase = increase < 0 ? 0 : increase;
         increase *= max < 0 ? 16 : max > 64 ? 64 : max;
         final StringBuilder buf = new StringBuilder(text.length() + increase);
         while (end != INDEX_NOT_FOUND) {
             buf.append(text.substring(start, end)).append(replacement);
             start = end + replLength;
             if (--max == 0) {
                 break;
             }
             end = searchText.indexOf(searchString, start);
         }
         buf.append(text.substring(start));
         return buf.toString();
     }

PARAMS COUNT: 5
IS VOID METHOD: false
FRAGMENT LENGTH: 2934
FRAGMENT LINE AVG SIZE: 48.09836065573771
DEPTHS:
0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 2 3 2 2 2 3 3 2 2 2 2 3 2 2 2 2 2 2 2 3 3 3 4 3 3 2 2 2 1 1 
AREA: 99
AVG DEPTH: 1.6229508196721312
NUMBER OF LINES IN FRAGMENT: 61
---REFACTORING_FINISH---
-----REFACTORINGS_END-----
COMMIT ID: bbd1dc343992fde4baaa0309178509dd07eed536
URL: https://github.com/apache/commons-lang/commit/bbd1dc343992fde4baaa0309178509dd07eed536
DESCRIPTION: Extract Method	private appendArray(lhs Object, rhs Object) : void extracted from public append(lhs Object, rhs Object) : EqualsBuilder in class org.apache.commons.lang3.builder.EqualsBuilder
REFACTORING FILE DIFF URL: https://github.com/apache/commons-lang/commit/bbd1dc343992fde4baaa0309178509dd07eed536/src/main/java/org/apache/commons/lang3/builder/EqualsBuilder.java
REFACTORING URL: https://github.com/apache/commons-lang/blob/bbd1dc343992fde4baaa0309178509dd07eed536/src/main/java/org/apache/commons/lang3/builder/EqualsBuilder.java#L490
DIRECTLY EXTRACTED OPERATION:
     * <p>Test if an <code>Object</code> is equal to an array.</p>
     *
     * @param lhs  the left hand object, an array
     * @param rhs  the right hand object
     */
    private void appendArray(final Object lhs, final Object rhs) {
        if (lhs.getClass() != rhs.getClass()) {
            // Here when we compare different dimensions, for example: a boolean[][] to a boolean[]
            this.setEquals(false);
        }
        // 'Switch' on type of array, to dispatch to the correct handler
        // This handles multi dimensional arrays of the same depth
        else if (lhs instanceof long[]) {
            append((long[]) lhs, (long[]) rhs);
        } else if (lhs instanceof int[]) {
            append((int[]) lhs, (int[]) rhs);
        } else if (lhs instanceof short[]) {
            append((short[]) lhs, (short[]) rhs);
        } else if (lhs instanceof char[]) {
            append((char[]) lhs, (char[]) rhs);
        } else if (lhs instanceof byte[]) {
            append((byte[]) lhs, (byte[]) rhs);
        } else if (lhs instanceof double[]) {
            append((double[]) lhs, (double[]) rhs);
        } else if (lhs instanceof float[]) {
            append((float[]) lhs, (float[]) rhs);
        } else if (lhs instanceof boolean[]) {
            append((boolean[]) lhs, (boolean[]) rhs);
        } else {
            // Not an array of primitives
            append((Object[]) lhs, (Object[]) rhs);
        }
    }

PARAMS COUNT: 2
IS VOID METHOD: true
FRAGMENT LENGTH: 1453
FRAGMENT LINE AVG SIZE: 42.73529411764706
DEPTHS:
0 1 1 1 1 1 2 3 3 2 2 2 2 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 2 1 1 
AREA: 79
AVG DEPTH: 2.323529411764706
NUMBER OF LINES IN FRAGMENT: 34
---REFACTORING_FINISH---
-----REFACTORINGS_END-----
COMMIT ID: a48071b0d489420bfdc0c2ed7254d1dba243f700
URL: https://github.com/apache/commons-lang/commit/a48071b0d489420bfdc0c2ed7254d1dba243f700
DESCRIPTION: Extract Method	public addListener(listener L, allowDuplicate boolean) : void extracted from public addListener(listener L) : void in class org.apache.commons.lang3.event.EventListenerSupport
REFACTORING FILE DIFF URL: https://github.com/apache/commons-lang/commit/a48071b0d489420bfdc0c2ed7254d1dba243f700/src/main/java/org/apache/commons/lang3/event/EventListenerSupport.java
REFACTORING URL: https://github.com/apache/commons-lang/blob/a48071b0d489420bfdc0c2ed7254d1dba243f700/src/main/java/org/apache/commons/lang3/event/EventListenerSupport.java#L185
DIRECTLY EXTRACTED OPERATION:
     * Registers an event listener.  Will not add a pre-existing listener
     * object to the list if <code>allowDuplicate</code> is false.
     *
     * @param listener the event listener (may not be <code>null</code>).
     * @param allowDuplicate the flag for determining if duplicate listener
     * objects are allowed to be registered.
     *
     * @throws NullPointerException if <code>listener</code> is
     * <code>null</code>.
     */
    public void addListener(final L listener, boolean allowDuplicate) {
        Validate.notNull(listener, "Listener object cannot be null.");
        if (allowDuplicate) {
            listeners.add(listener);
        } else if (!allowDuplicate && !listeners.contains(listener)) {
            listeners.add(listener);
        }
    }

PARAMS COUNT: 2
IS VOID METHOD: true
FRAGMENT LENGTH: 783
FRAGMENT LINE AVG SIZE: 41.21052631578947
DEPTHS:
0 1 1 1 1 1 1 1 1 1 1 2 2 3 3 3 2 1 1 
AREA: 27
AVG DEPTH: 1.4210526315789473
NUMBER OF LINES IN FRAGMENT: 19
---REFACTORING_FINISH---
-----REFACTORINGS_END-----
COMMIT ID: e8db7237a9c347d2225fce9b49ff92bb741adffa
URL: https://github.com/apache/commons-lang/commit/e8db7237a9c347d2225fce9b49ff92bb741adffa
DESCRIPTION: Extract Method	private isJsonArray(valueAsString String) : boolean extracted from protected appendDetail(buffer StringBuffer, fieldName String, value Object) : void in class org.apache.commons.lang3.builder.ToStringStyle.JsonToStringStyle
REFACTORING FILE DIFF URL: https://github.com/apache/commons-lang/commit/e8db7237a9c347d2225fce9b49ff92bb741adffa/src/main/java/org/apache/commons/lang3/builder/ToStringStyle.java
REFACTORING URL: https://github.com/apache/commons-lang/blob/e8db7237a9c347d2225fce9b49ff92bb741adffa/src/main/java/org/apache/commons/lang3/builder/ToStringStyle.java#L2594
DIRECTLY EXTRACTED OPERATION:
            return valueAsString.startsWith(getArrayStart())
                    && valueAsString.startsWith(getArrayEnd());
        }

PARAMS COUNT: 1
IS VOID METHOD: false
FRAGMENT LENGTH: 136
FRAGMENT LINE AVG SIZE: 34.0
DEPTHS:
2 3 2 2 
AREA: 9
AVG DEPTH: 2.25
NUMBER OF LINES IN FRAGMENT: 4
---REFACTORING_FINISH---
DESCRIPTION: Extract Method	private isJsonObject(valueAsString String) : boolean extracted from protected appendDetail(buffer StringBuffer, fieldName String, value Object) : void in class org.apache.commons.lang3.builder.ToStringStyle.JsonToStringStyle
REFACTORING FILE DIFF URL: https://github.com/apache/commons-lang/commit/e8db7237a9c347d2225fce9b49ff92bb741adffa/src/main/java/org/apache/commons/lang3/builder/ToStringStyle.java
REFACTORING URL: https://github.com/apache/commons-lang/blob/e8db7237a9c347d2225fce9b49ff92bb741adffa/src/main/java/org/apache/commons/lang3/builder/ToStringStyle.java#L2599
DIRECTLY EXTRACTED OPERATION:
            return valueAsString.startsWith(getContentStart())
                    && valueAsString.endsWith(getContentEnd());
        }

PARAMS COUNT: 1
IS VOID METHOD: false
FRAGMENT LENGTH: 138
FRAGMENT LINE AVG SIZE: 34.5
DEPTHS:
2 3 2 2 
AREA: 9
AVG DEPTH: 2.25
NUMBER OF LINES IN FRAGMENT: 4
---REFACTORING_FINISH---
-----REFACTORINGS_END-----
COMMIT ID: 775203dd2cfce017910d04c58a0b1b4e0a64923c
URL: https://github.com/apache/commons-lang/commit/775203dd2cfce017910d04c58a0b1b4e0a64923c
DESCRIPTION: Extract Method	private createJuneTestDate(timeZone TimeZone) : Calendar extracted from public testSMTP() : void in class org.apache.commons.lang3.time.DateFormatUtilsTest
REFACTORING FILE DIFF URL: https://github.com/apache/commons-lang/commit/775203dd2cfce017910d04c58a0b1b4e0a64923c/src/test/java/org/apache/commons/lang3/time/DateFormatUtilsTest.java
REFACTORING URL: https://github.com/apache/commons-lang/blob/775203dd2cfce017910d04c58a0b1b4e0a64923c/src/test/java/org/apache/commons/lang3/time/DateFormatUtilsTest.java#L124
DIRECTLY EXTRACTED OPERATION:
        final Calendar cal = Calendar.getInstance(timeZone);
        cal.set(2003, Calendar.JUNE, 8, 10, 11, 12);
        return cal;
    }

PARAMS COUNT: 1
IS VOID METHOD: false
FRAGMENT LENGTH: 141
FRAGMENT LINE AVG SIZE: 28.2
DEPTHS:
1 2 2 1 1 
AREA: 7
AVG DEPTH: 1.4
NUMBER OF LINES IN FRAGMENT: 5
---REFACTORING_FINISH---
DESCRIPTION: Extract Method	private assertFormats(expectedValue String, pattern String, timeZone TimeZone, cal Calendar) : void extracted from public testDateTimeISO() : void in class org.apache.commons.lang3.time.DateFormatUtilsTest
REFACTORING FILE DIFF URL: https://github.com/apache/commons-lang/commit/775203dd2cfce017910d04c58a0b1b4e0a64923c/src/test/java/org/apache/commons/lang3/time/DateFormatUtilsTest.java
REFACTORING URL: https://github.com/apache/commons-lang/blob/775203dd2cfce017910d04c58a0b1b4e0a64923c/src/test/java/org/apache/commons/lang3/time/DateFormatUtilsTest.java#L112
DIRECTLY EXTRACTED OPERATION:
        assertEquals(expectedValue, DateFormatUtils.format(cal.getTime(), pattern, timeZone));
        assertEquals(expectedValue, DateFormatUtils.format(cal.getTime().getTime(), pattern, timeZone));
        assertEquals(expectedValue, DateFormatUtils.format(cal, pattern, timeZone));
    }

PARAMS COUNT: 4
IS VOID METHOD: true
FRAGMENT LENGTH: 292
FRAGMENT LINE AVG SIZE: 58.4
DEPTHS:
1 2 2 1 1 
AREA: 7
AVG DEPTH: 1.4
NUMBER OF LINES IN FRAGMENT: 5
---REFACTORING_FINISH---
DESCRIPTION: Extract Method	private createFebruaryTestDate(timeZone TimeZone) : Calendar extracted from public testDateTimeISO() : void in class org.apache.commons.lang3.time.DateFormatUtilsTest
REFACTORING FILE DIFF URL: https://github.com/apache/commons-lang/commit/775203dd2cfce017910d04c58a0b1b4e0a64923c/src/test/java/org/apache/commons/lang3/time/DateFormatUtilsTest.java
REFACTORING URL: https://github.com/apache/commons-lang/blob/775203dd2cfce017910d04c58a0b1b4e0a64923c/src/test/java/org/apache/commons/lang3/time/DateFormatUtilsTest.java#L118
DIRECTLY EXTRACTED OPERATION:
        final Calendar cal = Calendar.getInstance(timeZone);
        cal.set(2002, Calendar.FEBRUARY, 23, 9, 11, 12);
        return cal;
    }

PARAMS COUNT: 1
IS VOID METHOD: false
FRAGMENT LENGTH: 145
FRAGMENT LINE AVG SIZE: 29.0
DEPTHS:
1 2 2 1 1 
AREA: 7
AVG DEPTH: 1.4
NUMBER OF LINES IN FRAGMENT: 5
---REFACTORING_FINISH---
DESCRIPTION: Extract Method	private testGmtMinus3(expectedValue String, pattern String) : void extracted from public testDateTimeISO() : void in class org.apache.commons.lang3.time.DateFormatUtilsTest
REFACTORING FILE DIFF URL: https://github.com/apache/commons-lang/commit/775203dd2cfce017910d04c58a0b1b4e0a64923c/src/test/java/org/apache/commons/lang3/time/DateFormatUtilsTest.java
REFACTORING URL: https://github.com/apache/commons-lang/blob/775203dd2cfce017910d04c58a0b1b4e0a64923c/src/test/java/org/apache/commons/lang3/time/DateFormatUtilsTest.java#L130
DIRECTLY EXTRACTED OPERATION:
        final TimeZone timeZone = TimeZone.getTimeZone("GMT-3");
        assertFormats(expectedValue, pattern, timeZone, createFebruaryTestDate(timeZone));
    }

PARAMS COUNT: 2
IS VOID METHOD: true
FRAGMENT LENGTH: 163
FRAGMENT LINE AVG SIZE: 40.75
DEPTHS:
1 2 1 1 
AREA: 5
AVG DEPTH: 1.25
NUMBER OF LINES IN FRAGMENT: 4
---REFACTORING_FINISH---
DESCRIPTION: Extract Method	private assertFormats(expectedValue String, pattern String, timeZone TimeZone, cal Calendar) : void extracted from public testDateISO() : void in class org.apache.commons.lang3.time.DateFormatUtilsTest
REFACTORING FILE DIFF URL: https://github.com/apache/commons-lang/commit/775203dd2cfce017910d04c58a0b1b4e0a64923c/src/test/java/org/apache/commons/lang3/time/DateFormatUtilsTest.java
REFACTORING URL: https://github.com/apache/commons-lang/blob/775203dd2cfce017910d04c58a0b1b4e0a64923c/src/test/java/org/apache/commons/lang3/time/DateFormatUtilsTest.java#L112
DIRECTLY EXTRACTED OPERATION:
        assertEquals(expectedValue, DateFormatUtils.format(cal.getTime(), pattern, timeZone));
        assertEquals(expectedValue, DateFormatUtils.format(cal.getTime().getTime(), pattern, timeZone));
        assertEquals(expectedValue, DateFormatUtils.format(cal, pattern, timeZone));
    }

PARAMS COUNT: 4
IS VOID METHOD: true
FRAGMENT LENGTH: 292
FRAGMENT LINE AVG SIZE: 58.4
DEPTHS:
1 2 2 1 1 
AREA: 7
AVG DEPTH: 1.4
NUMBER OF LINES IN FRAGMENT: 5
---REFACTORING_FINISH---
DESCRIPTION: Extract Method	private createFebruaryTestDate(timeZone TimeZone) : Calendar extracted from public testDateISO() : void in class org.apache.commons.lang3.time.DateFormatUtilsTest
REFACTORING FILE DIFF URL: https://github.com/apache/commons-lang/commit/775203dd2cfce017910d04c58a0b1b4e0a64923c/src/test/java/org/apache/commons/lang3/time/DateFormatUtilsTest.java
REFACTORING URL: https://github.com/apache/commons-lang/blob/775203dd2cfce017910d04c58a0b1b4e0a64923c/src/test/java/org/apache/commons/lang3/time/DateFormatUtilsTest.java#L118
DIRECTLY EXTRACTED OPERATION:
        final Calendar cal = Calendar.getInstance(timeZone);
        cal.set(2002, Calendar.FEBRUARY, 23, 9, 11, 12);
        return cal;
    }

PARAMS COUNT: 1
IS VOID METHOD: false
FRAGMENT LENGTH: 145
FRAGMENT LINE AVG SIZE: 29.0
DEPTHS:
1 2 2 1 1 
AREA: 7
AVG DEPTH: 1.4
NUMBER OF LINES IN FRAGMENT: 5
---REFACTORING_FINISH---
DESCRIPTION: Extract Method	private testGmtMinus3(expectedValue String, pattern String) : void extracted from public testDateISO() : void in class org.apache.commons.lang3.time.DateFormatUtilsTest
REFACTORING FILE DIFF URL: https://github.com/apache/commons-lang/commit/775203dd2cfce017910d04c58a0b1b4e0a64923c/src/test/java/org/apache/commons/lang3/time/DateFormatUtilsTest.java
REFACTORING URL: https://github.com/apache/commons-lang/blob/775203dd2cfce017910d04c58a0b1b4e0a64923c/src/test/java/org/apache/commons/lang3/time/DateFormatUtilsTest.java#L130
DIRECTLY EXTRACTED OPERATION:
        final TimeZone timeZone = TimeZone.getTimeZone("GMT-3");
        assertFormats(expectedValue, pattern, timeZone, createFebruaryTestDate(timeZone));
    }

PARAMS COUNT: 2
IS VOID METHOD: true
FRAGMENT LENGTH: 163
FRAGMENT LINE AVG SIZE: 40.75
DEPTHS:
1 2 1 1 
AREA: 5
AVG DEPTH: 1.25
NUMBER OF LINES IN FRAGMENT: 4
---REFACTORING_FINISH---
DESCRIPTION: Extract Method	private assertFormats(expectedValue String, pattern String, timeZone TimeZone, cal Calendar) : void extracted from public testTimeISO() : void in class org.apache.commons.lang3.time.DateFormatUtilsTest
REFACTORING FILE DIFF URL: https://github.com/apache/commons-lang/commit/775203dd2cfce017910d04c58a0b1b4e0a64923c/src/test/java/org/apache/commons/lang3/time/DateFormatUtilsTest.java
REFACTORING URL: https://github.com/apache/commons-lang/blob/775203dd2cfce017910d04c58a0b1b4e0a64923c/src/test/java/org/apache/commons/lang3/time/DateFormatUtilsTest.java#L112
DIRECTLY EXTRACTED OPERATION:
        assertEquals(expectedValue, DateFormatUtils.format(cal.getTime(), pattern, timeZone));
        assertEquals(expectedValue, DateFormatUtils.format(cal.getTime().getTime(), pattern, timeZone));
        assertEquals(expectedValue, DateFormatUtils.format(cal, pattern, timeZone));
    }

PARAMS COUNT: 4
IS VOID METHOD: true
FRAGMENT LENGTH: 292
FRAGMENT LINE AVG SIZE: 58.4
DEPTHS:
1 2 2 1 1 
AREA: 7
AVG DEPTH: 1.4
NUMBER OF LINES IN FRAGMENT: 5
---REFACTORING_FINISH---
DESCRIPTION: Extract Method	private createFebruaryTestDate(timeZone TimeZone) : Calendar extracted from public testTimeISO() : void in class org.apache.commons.lang3.time.DateFormatUtilsTest
REFACTORING FILE DIFF URL: https://github.com/apache/commons-lang/commit/775203dd2cfce017910d04c58a0b1b4e0a64923c/src/test/java/org/apache/commons/lang3/time/DateFormatUtilsTest.java
REFACTORING URL: https://github.com/apache/commons-lang/blob/775203dd2cfce017910d04c58a0b1b4e0a64923c/src/test/java/org/apache/commons/lang3/time/DateFormatUtilsTest.java#L118
DIRECTLY EXTRACTED OPERATION:
        final Calendar cal = Calendar.getInstance(timeZone);
        cal.set(2002, Calendar.FEBRUARY, 23, 9, 11, 12);
        return cal;
    }

PARAMS COUNT: 1
IS VOID METHOD: false
FRAGMENT LENGTH: 145
FRAGMENT LINE AVG SIZE: 29.0
DEPTHS:
1 2 2 1 1 
AREA: 7
AVG DEPTH: 1.4
NUMBER OF LINES IN FRAGMENT: 5
---REFACTORING_FINISH---
DESCRIPTION: Extract Method	private testGmtMinus3(expectedValue String, pattern String) : void extracted from public testTimeISO() : void in class org.apache.commons.lang3.time.DateFormatUtilsTest
REFACTORING FILE DIFF URL: https://github.com/apache/commons-lang/commit/775203dd2cfce017910d04c58a0b1b4e0a64923c/src/test/java/org/apache/commons/lang3/time/DateFormatUtilsTest.java
REFACTORING URL: https://github.com/apache/commons-lang/blob/775203dd2cfce017910d04c58a0b1b4e0a64923c/src/test/java/org/apache/commons/lang3/time/DateFormatUtilsTest.java#L130
DIRECTLY EXTRACTED OPERATION:
        final TimeZone timeZone = TimeZone.getTimeZone("GMT-3");
        assertFormats(expectedValue, pattern, timeZone, createFebruaryTestDate(timeZone));
    }

PARAMS COUNT: 2
IS VOID METHOD: true
FRAGMENT LENGTH: 163
FRAGMENT LINE AVG SIZE: 40.75
DEPTHS:
1 2 1 1 
AREA: 5
AVG DEPTH: 1.25
NUMBER OF LINES IN FRAGMENT: 4
---REFACTORING_FINISH---
DESCRIPTION: Extract Method	private assertFormats(expectedValue String, pattern String, timeZone TimeZone, cal Calendar) : void extracted from public testTimeNoTISO() : void in class org.apache.commons.lang3.time.DateFormatUtilsTest
REFACTORING FILE DIFF URL: https://github.com/apache/commons-lang/commit/775203dd2cfce017910d04c58a0b1b4e0a64923c/src/test/java/org/apache/commons/lang3/time/DateFormatUtilsTest.java
REFACTORING URL: https://github.com/apache/commons-lang/blob/775203dd2cfce017910d04c58a0b1b4e0a64923c/src/test/java/org/apache/commons/lang3/time/DateFormatUtilsTest.java#L112
DIRECTLY EXTRACTED OPERATION:
        assertEquals(expectedValue, DateFormatUtils.format(cal.getTime(), pattern, timeZone));
        assertEquals(expectedValue, DateFormatUtils.format(cal.getTime().getTime(), pattern, timeZone));
        assertEquals(expectedValue, DateFormatUtils.format(cal, pattern, timeZone));
    }

PARAMS COUNT: 4
IS VOID METHOD: true
FRAGMENT LENGTH: 292
FRAGMENT LINE AVG SIZE: 58.4
DEPTHS:
1 2 2 1 1 
AREA: 7
AVG DEPTH: 1.4
NUMBER OF LINES IN FRAGMENT: 5
---REFACTORING_FINISH---
DESCRIPTION: Extract Method	private createFebruaryTestDate(timeZone TimeZone) : Calendar extracted from public testTimeNoTISO() : void in class org.apache.commons.lang3.time.DateFormatUtilsTest
REFACTORING FILE DIFF URL: https://github.com/apache/commons-lang/commit/775203dd2cfce017910d04c58a0b1b4e0a64923c/src/test/java/org/apache/commons/lang3/time/DateFormatUtilsTest.java
REFACTORING URL: https://github.com/apache/commons-lang/blob/775203dd2cfce017910d04c58a0b1b4e0a64923c/src/test/java/org/apache/commons/lang3/time/DateFormatUtilsTest.java#L118
DIRECTLY EXTRACTED OPERATION:
        final Calendar cal = Calendar.getInstance(timeZone);
        cal.set(2002, Calendar.FEBRUARY, 23, 9, 11, 12);
        return cal;
    }

PARAMS COUNT: 1
IS VOID METHOD: false
FRAGMENT LENGTH: 145
FRAGMENT LINE AVG SIZE: 29.0
DEPTHS:
1 2 2 1 1 
AREA: 7
AVG DEPTH: 1.4
NUMBER OF LINES IN FRAGMENT: 5
---REFACTORING_FINISH---
DESCRIPTION: Extract Method	private testGmtMinus3(expectedValue String, pattern String) : void extracted from public testTimeNoTISO() : void in class org.apache.commons.lang3.time.DateFormatUtilsTest
REFACTORING FILE DIFF URL: https://github.com/apache/commons-lang/commit/775203dd2cfce017910d04c58a0b1b4e0a64923c/src/test/java/org/apache/commons/lang3/time/DateFormatUtilsTest.java
REFACTORING URL: https://github.com/apache/commons-lang/blob/775203dd2cfce017910d04c58a0b1b4e0a64923c/src/test/java/org/apache/commons/lang3/time/DateFormatUtilsTest.java#L130
DIRECTLY EXTRACTED OPERATION:
        final TimeZone timeZone = TimeZone.getTimeZone("GMT-3");
        assertFormats(expectedValue, pattern, timeZone, createFebruaryTestDate(timeZone));
    }

PARAMS COUNT: 2
IS VOID METHOD: true
FRAGMENT LENGTH: 163
FRAGMENT LINE AVG SIZE: 40.75
DEPTHS:
1 2 1 1 
AREA: 5
AVG DEPTH: 1.25
NUMBER OF LINES IN FRAGMENT: 4
---REFACTORING_FINISH---
-----REFACTORINGS_END-----
COMMIT ID: 76cc69c3f08cbf31efd56f631504496307ab7a5c
URL: https://github.com/apache/commons-lang/commit/76cc69c3f08cbf31efd56f631504496307ab7a5c
DESCRIPTION: Extract Method	private allPublicChildFields() : Field[] extracted from public testGetAllFields() : void in class org.apache.commons.lang3.reflect.FieldUtilsTest
REFACTORING FILE DIFF URL: https://github.com/apache/commons-lang/commit/76cc69c3f08cbf31efd56f631504496307ab7a5c/src/test/java/org/apache/commons/lang3/reflect/FieldUtilsTest.java
REFACTORING URL: https://github.com/apache/commons-lang/blob/76cc69c3f08cbf31efd56f631504496307ab7a5c/src/test/java/org/apache/commons/lang3/reflect/FieldUtilsTest.java#L149
DIRECTLY EXTRACTED OPERATION:
        Class<? super PublicChild> parentClass = PublicChild.class.getSuperclass();
		final Field[] fieldsParent =  parentClass.getDeclaredFields();
        assertArrayEquals(fieldsParent, FieldUtils.getAllFields(parentClass));

		final Field[] fieldsPublicChild = PublicChild.class.getDeclaredFields();
        return ArrayUtils.addAll(fieldsPublicChild, fieldsParent);
    }

IS VOID METHOD: false
FRAGMENT LENGTH: 378
FRAGMENT LINE AVG SIZE: 47.25
DEPTHS:
1 2 2 2 2 2 1 1 
AREA: 13
AVG DEPTH: 1.625
NUMBER OF LINES IN FRAGMENT: 8
---REFACTORING_FINISH---
-----REFACTORINGS_END-----
COMMIT ID: bdb5d9723056941a0a29aabc2eaf81b2c96956b5
URL: https://github.com/apache/commons-lang/commit/bdb5d9723056941a0a29aabc2eaf81b2c96956b5
DESCRIPTION: Extract Method	protected testGetConcurrentOptionallyWithException(expectExceptions boolean, expectedMessage String, expectedCause Exception) : void extracted from public testGetConcurrent() : void in class org.apache.commons.lang3.concurrent.AbstractConcurrentInitializerTest
REFACTORING FILE DIFF URL: https://github.com/apache/commons-lang/commit/bdb5d9723056941a0a29aabc2eaf81b2c96956b5/src/test/java/org/apache/commons/lang3/concurrent/AbstractConcurrentInitializerTest.java
REFACTORING URL: https://github.com/apache/commons-lang/blob/bdb5d9723056941a0a29aabc2eaf81b2c96956b5/src/test/java/org/apache/commons/lang3/concurrent/AbstractConcurrentInitializerTest.java#L95
DIRECTLY EXTRACTED OPERATION:
     * Tests whether get() can be invoked from multiple threads concurrently.  Supports the exception-handling case
     * and the normal, non-exception case.
     *
     * Always the same object should be returned, or an exception with the same message and cause should be thrown.
     *
     * @throws org.apache.commons.lang3.concurrent.ConcurrentException because the object under test may throw it
     * @throws java.lang.InterruptedException because the threading API my throw it
     */
    protected void testGetConcurrentOptionallyWithException(boolean expectExceptions, String expectedMessage,
                                                            Exception expectedCause)
            throws ConcurrentException, InterruptedException {

        final ConcurrentInitializer<Object> initializer = expectExceptions ?
                createExceptionThrowingInitializer() :
                createInitializer();

        final int threadCount = 20;
        final CountDownLatch startLatch = new CountDownLatch(1);
        class GetThread extends Thread {
            Object object;

            @Override
            public void run() {
                try {
                    // wait until all threads are ready for maximum parallelism
                    startLatch.await();
                    // access the initializer
                    object = initializer.get();
                } catch (final InterruptedException iex) {
                    // ignore
                } catch (final ConcurrentException cex) {
                    object = cex;
                }
            }
        }

        final GetThread[] threads = new GetThread[threadCount];
        for (int i = 0; i < threadCount; i++) {
            threads[i] = new GetThread();
            threads[i].start();
        }

        // fire all threads and wait until they are ready
        startLatch.countDown();
        for (final Thread t : threads) {
            t.join();
        }

        // check results
        if ( expectExceptions ) {
            for (GetThread t : threads) {
                assertTrue(t.object instanceof Exception);
                Exception exc = (Exception) t.object;
                assertEquals(expectedMessage, exc.getMessage());
                assertSame(expectedCause, exc.getCause());
            }
        } else {
            final Object managedObject = initializer.get();
            for (final GetThread t : threads) {
                assertEquals("Wrong object", managedObject, t.object);
            }
        }
    }

PARAMS COUNT: 3
IS VOID METHOD: true
FRAGMENT LENGTH: 2548
FRAGMENT LINE AVG SIZE: 39.8125
DEPTHS:
0 1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 3 3 3 3 4 5 5 5 5 5 5 5 5 4 3 2 2 2 2 3 3 2 2 2 2 2 3 2 2 2 2 3 4 4 4 4 3 3 3 3 4 3 2 1 1 
AREA: 166
AVG DEPTH: 2.59375
NUMBER OF LINES IN FRAGMENT: 64
---REFACTORING_FINISH---
-----REFACTORINGS_END-----
COMMIT ID: 649a089ddc4da251a3eefd1a792b34b782164191
URL: https://github.com/apache/commons-lang/commit/649a089ddc4da251a3eefd1a792b34b782164191
DESCRIPTION: Extract Method	private checkParse(locale Locale, sdf SimpleDateFormat, fdf DateParser, formattedDate String) : void extracted from private checkParse(locale Locale, cal Calendar, sdf SimpleDateFormat, fdf DateParser) : void in class org.apache.commons.lang3.time.FastDateParserTest
REFACTORING FILE DIFF URL: https://github.com/apache/commons-lang/commit/649a089ddc4da251a3eefd1a792b34b782164191/src/test/java/org/apache/commons/lang3/time/FastDateParserTest.java
REFACTORING URL: https://github.com/apache/commons-lang/blob/649a089ddc4da251a3eefd1a792b34b782164191/src/test/java/org/apache/commons/lang3/time/FastDateParserTest.java#L333
DIRECTLY EXTRACTED OPERATION:
		final Date expectedTime = sdf.parse(formattedDate);
        final Date actualTime = fdf.parse(formattedDate);
        assertEquals(locale.toString()+" "+formattedDate +"\n",expectedTime, actualTime);
	}

FRAGMENT LENGTH: 206
FRAGMENT LINE AVG SIZE: 41.2
DEPTHS:
1 2 2 1 1 
AREA: 7
AVG DEPTH: 1.4
NUMBER OF LINES IN FRAGMENT: 5
---REFACTORING_FINISH---
-----REFACTORINGS_END-----
COMMIT ID: 159415855d06d186e86a70f3d4aba8c2e96d4b34
URL: https://github.com/apache/commons-lang/commit/159415855d06d186e86a70f3d4aba8c2e96d4b34
DESCRIPTION: Extract Method	private compareIsNumberWithCreateNumber(val String, expected boolean) : void extracted from public testIsNumber() : void in class org.apache.commons.lang3.math.NumberUtilsTest
REFACTORING FILE DIFF URL: https://github.com/apache/commons-lang/commit/159415855d06d186e86a70f3d4aba8c2e96d4b34/src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java
REFACTORING URL: https://github.com/apache/commons-lang/blob/159415855d06d186e86a70f3d4aba8c2e96d4b34/src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java#L1228
DIRECTLY EXTRACTED OPERATION:
        final boolean isValid = NumberUtils.isNumber(val);
        final boolean canCreate = checkCreateNumber(val);
        if (isValid == expected && canCreate == expected) {
            return;
        }
        fail("Expecting "+ expected + " for isNumber/createNumber using \"" + val + "\" but got " + isValid + " and " + canCreate);
    }

PARAMS COUNT: 2
IS VOID METHOD: true
FRAGMENT LENGTH: 346
FRAGMENT LINE AVG SIZE: 43.25
DEPTHS:
1 2 2 3 2 2 1 1 
AREA: 14
AVG DEPTH: 1.75
NUMBER OF LINES IN FRAGMENT: 8
---REFACTORING_FINISH---
DESCRIPTION: Extract Method	private compareIsNumberWithCreateNumber(val String, expected boolean) : void extracted from public testIsNumber() : void in class org.apache.commons.lang3.math.NumberUtilsTest
REFACTORING FILE DIFF URL: https://github.com/apache/commons-lang/commit/159415855d06d186e86a70f3d4aba8c2e96d4b34/src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java
REFACTORING URL: https://github.com/apache/commons-lang/blob/159415855d06d186e86a70f3d4aba8c2e96d4b34/src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java#L1228
DIRECTLY EXTRACTED OPERATION:
        final boolean isValid = NumberUtils.isNumber(val);
        final boolean canCreate = checkCreateNumber(val);
        if (isValid == expected && canCreate == expected) {
            return;
        }
        fail("Expecting "+ expected + " for isNumber/createNumber using \"" + val + "\" but got " + isValid + " and " + canCreate);
    }

PARAMS COUNT: 2
IS VOID METHOD: true
FRAGMENT LENGTH: 346
FRAGMENT LINE AVG SIZE: 43.25
DEPTHS:
1 2 2 3 2 2 1 1 
AREA: 14
AVG DEPTH: 1.75
NUMBER OF LINES IN FRAGMENT: 8
---REFACTORING_FINISH---
DESCRIPTION: Extract Method	private compareIsNumberWithCreateNumber(val String, expected boolean) : void extracted from public testIsNumber() : void in class org.apache.commons.lang3.math.NumberUtilsTest
REFACTORING FILE DIFF URL: https://github.com/apache/commons-lang/commit/159415855d06d186e86a70f3d4aba8c2e96d4b34/src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java
REFACTORING URL: https://github.com/apache/commons-lang/blob/159415855d06d186e86a70f3d4aba8c2e96d4b34/src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java#L1228
DIRECTLY EXTRACTED OPERATION:
        final boolean isValid = NumberUtils.isNumber(val);
        final boolean canCreate = checkCreateNumber(val);
        if (isValid == expected && canCreate == expected) {
            return;
        }
        fail("Expecting "+ expected + " for isNumber/createNumber using \"" + val + "\" but got " + isValid + " and " + canCreate);
    }

PARAMS COUNT: 2
IS VOID METHOD: true
FRAGMENT LENGTH: 346
FRAGMENT LINE AVG SIZE: 43.25
DEPTHS:
1 2 2 3 2 2 1 1 
AREA: 14
AVG DEPTH: 1.75
NUMBER OF LINES IN FRAGMENT: 8
---REFACTORING_FINISH---
DESCRIPTION: Extract Method	private compareIsNumberWithCreateNumber(val String, expected boolean) : void extracted from public testIsNumber() : void in class org.apache.commons.lang3.math.NumberUtilsTest
REFACTORING FILE DIFF URL: https://github.com/apache/commons-lang/commit/159415855d06d186e86a70f3d4aba8c2e96d4b34/src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java
REFACTORING URL: https://github.com/apache/commons-lang/blob/159415855d06d186e86a70f3d4aba8c2e96d4b34/src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java#L1228
DIRECTLY EXTRACTED OPERATION:
        final boolean isValid = NumberUtils.isNumber(val);
        final boolean canCreate = checkCreateNumber(val);
        if (isValid == expected && canCreate == expected) {
            return;
        }
        fail("Expecting "+ expected + " for isNumber/createNumber using \"" + val + "\" but got " + isValid + " and " + canCreate);
    }

PARAMS COUNT: 2
IS VOID METHOD: true
FRAGMENT LENGTH: 346
FRAGMENT LINE AVG SIZE: 43.25
DEPTHS:
1 2 2 3 2 2 1 1 
AREA: 14
AVG DEPTH: 1.75
NUMBER OF LINES IN FRAGMENT: 8
---REFACTORING_FINISH---
DESCRIPTION: Extract Method	private compareIsNumberWithCreateNumber(val String, expected boolean) : void extracted from public testIsNumber() : void in class org.apache.commons.lang3.math.NumberUtilsTest
REFACTORING FILE DIFF URL: https://github.com/apache/commons-lang/commit/159415855d06d186e86a70f3d4aba8c2e96d4b34/src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java
REFACTORING URL: https://github.com/apache/commons-lang/blob/159415855d06d186e86a70f3d4aba8c2e96d4b34/src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java#L1228
DIRECTLY EXTRACTED OPERATION:
        final boolean isValid = NumberUtils.isNumber(val);
        final boolean canCreate = checkCreateNumber(val);
        if (isValid == expected && canCreate == expected) {
            return;
        }
        fail("Expecting "+ expected + " for isNumber/createNumber using \"" + val + "\" but got " + isValid + " and " + canCreate);
    }

PARAMS COUNT: 2
IS VOID METHOD: true
FRAGMENT LENGTH: 346
FRAGMENT LINE AVG SIZE: 43.25
DEPTHS:
1 2 2 3 2 2 1 1 
AREA: 14
AVG DEPTH: 1.75
NUMBER OF LINES IN FRAGMENT: 8
---REFACTORING_FINISH---
DESCRIPTION: Extract Method	private compareIsNumberWithCreateNumber(val String, expected boolean) : void extracted from public testIsNumber() : void in class org.apache.commons.lang3.math.NumberUtilsTest
REFACTORING FILE DIFF URL: https://github.com/apache/commons-lang/commit/159415855d06d186e86a70f3d4aba8c2e96d4b34/src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java
REFACTORING URL: https://github.com/apache/commons-lang/blob/159415855d06d186e86a70f3d4aba8c2e96d4b34/src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java#L1228
DIRECTLY EXTRACTED OPERATION:
        final boolean isValid = NumberUtils.isNumber(val);
        final boolean canCreate = checkCreateNumber(val);
        if (isValid == expected && canCreate == expected) {
            return;
        }
        fail("Expecting "+ expected + " for isNumber/createNumber using \"" + val + "\" but got " + isValid + " and " + canCreate);
    }

PARAMS COUNT: 2
IS VOID METHOD: true
FRAGMENT LENGTH: 346
FRAGMENT LINE AVG SIZE: 43.25
DEPTHS:
1 2 2 3 2 2 1 1 
AREA: 14
AVG DEPTH: 1.75
NUMBER OF LINES IN FRAGMENT: 8
---REFACTORING_FINISH---
DESCRIPTION: Extract Method	private compareIsNumberWithCreateNumber(val String, expected boolean) : void extracted from public testIsNumber() : void in class org.apache.commons.lang3.math.NumberUtilsTest
REFACTORING FILE DIFF URL: https://github.com/apache/commons-lang/commit/159415855d06d186e86a70f3d4aba8c2e96d4b34/src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java
REFACTORING URL: https://github.com/apache/commons-lang/blob/159415855d06d186e86a70f3d4aba8c2e96d4b34/src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java#L1228
DIRECTLY EXTRACTED OPERATION:
        final boolean isValid = NumberUtils.isNumber(val);
        final boolean canCreate = checkCreateNumber(val);
        if (isValid == expected && canCreate == expected) {
            return;
        }
        fail("Expecting "+ expected + " for isNumber/createNumber using \"" + val + "\" but got " + isValid + " and " + canCreate);
    }

PARAMS COUNT: 2
IS VOID METHOD: true
FRAGMENT LENGTH: 346
FRAGMENT LINE AVG SIZE: 43.25
DEPTHS:
1 2 2 3 2 2 1 1 
AREA: 14
AVG DEPTH: 1.75
NUMBER OF LINES IN FRAGMENT: 8
---REFACTORING_FINISH---
DESCRIPTION: Extract Method	private compareIsNumberWithCreateNumber(val String, expected boolean) : void extracted from public testIsNumber() : void in class org.apache.commons.lang3.math.NumberUtilsTest
REFACTORING FILE DIFF URL: https://github.com/apache/commons-lang/commit/159415855d06d186e86a70f3d4aba8c2e96d4b34/src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java
REFACTORING URL: https://github.com/apache/commons-lang/blob/159415855d06d186e86a70f3d4aba8c2e96d4b34/src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java#L1228
DIRECTLY EXTRACTED OPERATION:
        final boolean isValid = NumberUtils.isNumber(val);
        final boolean canCreate = checkCreateNumber(val);
        if (isValid == expected && canCreate == expected) {
            return;
        }
        fail("Expecting "+ expected + " for isNumber/createNumber using \"" + val + "\" but got " + isValid + " and " + canCreate);
    }

PARAMS COUNT: 2
IS VOID METHOD: true
FRAGMENT LENGTH: 346
FRAGMENT LINE AVG SIZE: 43.25
DEPTHS:
1 2 2 3 2 2 1 1 
AREA: 14
AVG DEPTH: 1.75
NUMBER OF LINES IN FRAGMENT: 8
---REFACTORING_FINISH---
DESCRIPTION: Extract Method	private compareIsNumberWithCreateNumber(val String, expected boolean) : void extracted from public testIsNumber() : void in class org.apache.commons.lang3.math.NumberUtilsTest
REFACTORING FILE DIFF URL: https://github.com/apache/commons-lang/commit/159415855d06d186e86a70f3d4aba8c2e96d4b34/src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java
REFACTORING URL: https://github.com/apache/commons-lang/blob/159415855d06d186e86a70f3d4aba8c2e96d4b34/src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java#L1228
DIRECTLY EXTRACTED OPERATION:
        final boolean isValid = NumberUtils.isNumber(val);
        final boolean canCreate = checkCreateNumber(val);
        if (isValid == expected && canCreate == expected) {
            return;
        }
        fail("Expecting "+ expected + " for isNumber/createNumber using \"" + val + "\" but got " + isValid + " and " + canCreate);
    }

PARAMS COUNT: 2
IS VOID METHOD: true
FRAGMENT LENGTH: 346
FRAGMENT LINE AVG SIZE: 43.25
DEPTHS:
1 2 2 3 2 2 1 1 
AREA: 14
AVG DEPTH: 1.75
NUMBER OF LINES IN FRAGMENT: 8
---REFACTORING_FINISH---
DESCRIPTION: Extract Method	private compareIsNumberWithCreateNumber(val String, expected boolean) : void extracted from public testIsNumber() : void in class org.apache.commons.lang3.math.NumberUtilsTest
REFACTORING FILE DIFF URL: https://github.com/apache/commons-lang/commit/159415855d06d186e86a70f3d4aba8c2e96d4b34/src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java
REFACTORING URL: https://github.com/apache/commons-lang/blob/159415855d06d186e86a70f3d4aba8c2e96d4b34/src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java#L1228
DIRECTLY EXTRACTED OPERATION:
        final boolean isValid = NumberUtils.isNumber(val);
        final boolean canCreate = checkCreateNumber(val);
        if (isValid == expected && canCreate == expected) {
            return;
        }
        fail("Expecting "+ expected + " for isNumber/createNumber using \"" + val + "\" but got " + isValid + " and " + canCreate);
    }

PARAMS COUNT: 2
IS VOID METHOD: true
FRAGMENT LENGTH: 346
FRAGMENT LINE AVG SIZE: 43.25
DEPTHS:
1 2 2 3 2 2 1 1 
AREA: 14
AVG DEPTH: 1.75
NUMBER OF LINES IN FRAGMENT: 8
---REFACTORING_FINISH---
DESCRIPTION: Extract Method	private compareIsNumberWithCreateNumber(val String, expected boolean) : void extracted from public testIsNumber() : void in class org.apache.commons.lang3.math.NumberUtilsTest
REFACTORING FILE DIFF URL: https://github.com/apache/commons-lang/commit/159415855d06d186e86a70f3d4aba8c2e96d4b34/src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java
REFACTORING URL: https://github.com/apache/commons-lang/blob/159415855d06d186e86a70f3d4aba8c2e96d4b34/src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java#L1228
DIRECTLY EXTRACTED OPERATION:
        final boolean isValid = NumberUtils.isNumber(val);
        final boolean canCreate = checkCreateNumber(val);
        if (isValid == expected && canCreate == expected) {
            return;
        }
        fail("Expecting "+ expected + " for isNumber/createNumber using \"" + val + "\" but got " + isValid + " and " + canCreate);
    }

PARAMS COUNT: 2
IS VOID METHOD: true
FRAGMENT LENGTH: 346
FRAGMENT LINE AVG SIZE: 43.25
DEPTHS:
1 2 2 3 2 2 1 1 
AREA: 14
AVG DEPTH: 1.75
NUMBER OF LINES IN FRAGMENT: 8
---REFACTORING_FINISH---
DESCRIPTION: Extract Method	private compareIsNumberWithCreateNumber(val String, expected boolean) : void extracted from public testIsNumber() : void in class org.apache.commons.lang3.math.NumberUtilsTest
REFACTORING FILE DIFF URL: https://github.com/apache/commons-lang/commit/159415855d06d186e86a70f3d4aba8c2e96d4b34/src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java
REFACTORING URL: https://github.com/apache/commons-lang/blob/159415855d06d186e86a70f3d4aba8c2e96d4b34/src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java#L1228
DIRECTLY EXTRACTED OPERATION:
        final boolean isValid = NumberUtils.isNumber(val);
        final boolean canCreate = checkCreateNumber(val);
        if (isValid == expected && canCreate == expected) {
            return;
        }
        fail("Expecting "+ expected + " for isNumber/createNumber using \"" + val + "\" but got " + isValid + " and " + canCreate);
    }

PARAMS COUNT: 2
IS VOID METHOD: true
FRAGMENT LENGTH: 346
FRAGMENT LINE AVG SIZE: 43.25
DEPTHS:
1 2 2 3 2 2 1 1 
AREA: 14
AVG DEPTH: 1.75
NUMBER OF LINES IN FRAGMENT: 8
---REFACTORING_FINISH---
DESCRIPTION: Extract Method	private compareIsNumberWithCreateNumber(val String, expected boolean) : void extracted from public testIsNumber() : void in class org.apache.commons.lang3.math.NumberUtilsTest
REFACTORING FILE DIFF URL: https://github.com/apache/commons-lang/commit/159415855d06d186e86a70f3d4aba8c2e96d4b34/src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java
REFACTORING URL: https://github.com/apache/commons-lang/blob/159415855d06d186e86a70f3d4aba8c2e96d4b34/src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java#L1228
DIRECTLY EXTRACTED OPERATION:
        final boolean isValid = NumberUtils.isNumber(val);
        final boolean canCreate = checkCreateNumber(val);
        if (isValid == expected && canCreate == expected) {
            return;
        }
        fail("Expecting "+ expected + " for isNumber/createNumber using \"" + val + "\" but got " + isValid + " and " + canCreate);
    }

PARAMS COUNT: 2
IS VOID METHOD: true
FRAGMENT LENGTH: 346
FRAGMENT LINE AVG SIZE: 43.25
DEPTHS:
1 2 2 3 2 2 1 1 
AREA: 14
AVG DEPTH: 1.75
NUMBER OF LINES IN FRAGMENT: 8
---REFACTORING_FINISH---
DESCRIPTION: Extract Method	private compareIsNumberWithCreateNumber(val String, expected boolean) : void extracted from public testIsNumber() : void in class org.apache.commons.lang3.math.NumberUtilsTest
REFACTORING FILE DIFF URL: https://github.com/apache/commons-lang/commit/159415855d06d186e86a70f3d4aba8c2e96d4b34/src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java
REFACTORING URL: https://github.com/apache/commons-lang/blob/159415855d06d186e86a70f3d4aba8c2e96d4b34/src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java#L1228
DIRECTLY EXTRACTED OPERATION:
        final boolean isValid = NumberUtils.isNumber(val);
        final boolean canCreate = checkCreateNumber(val);
        if (isValid == expected && canCreate == expected) {
            return;
        }
        fail("Expecting "+ expected + " for isNumber/createNumber using \"" + val + "\" but got " + isValid + " and " + canCreate);
    }

PARAMS COUNT: 2
IS VOID METHOD: true
FRAGMENT LENGTH: 346
FRAGMENT LINE AVG SIZE: 43.25
DEPTHS:
1 2 2 3 2 2 1 1 
AREA: 14
AVG DEPTH: 1.75
NUMBER OF LINES IN FRAGMENT: 8
---REFACTORING_FINISH---
DESCRIPTION: Extract Method	private compareIsNumberWithCreateNumber(val String, expected boolean) : void extracted from public testIsNumber() : void in class org.apache.commons.lang3.math.NumberUtilsTest
REFACTORING FILE DIFF URL: https://github.com/apache/commons-lang/commit/159415855d06d186e86a70f3d4aba8c2e96d4b34/src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java
REFACTORING URL: https://github.com/apache/commons-lang/blob/159415855d06d186e86a70f3d4aba8c2e96d4b34/src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java#L1228
DIRECTLY EXTRACTED OPERATION:
        final boolean isValid = NumberUtils.isNumber(val);
        final boolean canCreate = checkCreateNumber(val);
        if (isValid == expected && canCreate == expected) {
            return;
        }
        fail("Expecting "+ expected + " for isNumber/createNumber using \"" + val + "\" but got " + isValid + " and " + canCreate);
    }

PARAMS COUNT: 2
IS VOID METHOD: true
FRAGMENT LENGTH: 346
FRAGMENT LINE AVG SIZE: 43.25
DEPTHS:
1 2 2 3 2 2 1 1 
AREA: 14
AVG DEPTH: 1.75
NUMBER OF LINES IN FRAGMENT: 8
---REFACTORING_FINISH---
DESCRIPTION: Extract Method	private compareIsNumberWithCreateNumber(val String, expected boolean) : void extracted from public testIsNumber() : void in class org.apache.commons.lang3.math.NumberUtilsTest
REFACTORING FILE DIFF URL: https://github.com/apache/commons-lang/commit/159415855d06d186e86a70f3d4aba8c2e96d4b34/src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java
REFACTORING URL: https://github.com/apache/commons-lang/blob/159415855d06d186e86a70f3d4aba8c2e96d4b34/src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java#L1228
DIRECTLY EXTRACTED OPERATION:
        final boolean isValid = NumberUtils.isNumber(val);
        final boolean canCreate = checkCreateNumber(val);
        if (isValid == expected && canCreate == expected) {
            return;
        }
        fail("Expecting "+ expected + " for isNumber/createNumber using \"" + val + "\" but got " + isValid + " and " + canCreate);
    }

PARAMS COUNT: 2
IS VOID METHOD: true
FRAGMENT LENGTH: 346
FRAGMENT LINE AVG SIZE: 43.25
DEPTHS:
1 2 2 3 2 2 1 1 
AREA: 14
AVG DEPTH: 1.75
NUMBER OF LINES IN FRAGMENT: 8
---REFACTORING_FINISH---
DESCRIPTION: Extract Method	private compareIsNumberWithCreateNumber(val String, expected boolean) : void extracted from public testIsNumber() : void in class org.apache.commons.lang3.math.NumberUtilsTest
REFACTORING FILE DIFF URL: https://github.com/apache/commons-lang/commit/159415855d06d186e86a70f3d4aba8c2e96d4b34/src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java
REFACTORING URL: https://github.com/apache/commons-lang/blob/159415855d06d186e86a70f3d4aba8c2e96d4b34/src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java#L1228
DIRECTLY EXTRACTED OPERATION:
        final boolean isValid = NumberUtils.isNumber(val);
        final boolean canCreate = checkCreateNumber(val);
        if (isValid == expected && canCreate == expected) {
            return;
        }
        fail("Expecting "+ expected + " for isNumber/createNumber using \"" + val + "\" but got " + isValid + " and " + canCreate);
    }

PARAMS COUNT: 2
IS VOID METHOD: true
FRAGMENT LENGTH: 346
FRAGMENT LINE AVG SIZE: 43.25
DEPTHS:
1 2 2 3 2 2 1 1 
AREA: 14
AVG DEPTH: 1.75
NUMBER OF LINES IN FRAGMENT: 8
---REFACTORING_FINISH---
DESCRIPTION: Extract Method	private compareIsNumberWithCreateNumber(val String, expected boolean) : void extracted from public testIsNumber() : void in class org.apache.commons.lang3.math.NumberUtilsTest
REFACTORING FILE DIFF URL: https://github.com/apache/commons-lang/commit/159415855d06d186e86a70f3d4aba8c2e96d4b34/src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java
REFACTORING URL: https://github.com/apache/commons-lang/blob/159415855d06d186e86a70f3d4aba8c2e96d4b34/src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java#L1228
DIRECTLY EXTRACTED OPERATION:
        final boolean isValid = NumberUtils.isNumber(val);
        final boolean canCreate = checkCreateNumber(val);
        if (isValid == expected && canCreate == expected) {
            return;
        }
        fail("Expecting "+ expected + " for isNumber/createNumber using \"" + val + "\" but got " + isValid + " and " + canCreate);
    }

PARAMS COUNT: 2
IS VOID METHOD: true
FRAGMENT LENGTH: 346
FRAGMENT LINE AVG SIZE: 43.25
DEPTHS:
1 2 2 3 2 2 1 1 
AREA: 14
AVG DEPTH: 1.75
NUMBER OF LINES IN FRAGMENT: 8
---REFACTORING_FINISH---
DESCRIPTION: Extract Method	private compareIsNumberWithCreateNumber(val String, expected boolean) : void extracted from public testIsNumber() : void in class org.apache.commons.lang3.math.NumberUtilsTest
REFACTORING FILE DIFF URL: https://github.com/apache/commons-lang/commit/159415855d06d186e86a70f3d4aba8c2e96d4b34/src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java
REFACTORING URL: https://github.com/apache/commons-lang/blob/159415855d06d186e86a70f3d4aba8c2e96d4b34/src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java#L1228
DIRECTLY EXTRACTED OPERATION:
        final boolean isValid = NumberUtils.isNumber(val);
        final boolean canCreate = checkCreateNumber(val);
        if (isValid == expected && canCreate == expected) {
            return;
        }
        fail("Expecting "+ expected + " for isNumber/createNumber using \"" + val + "\" but got " + isValid + " and " + canCreate);
    }

PARAMS COUNT: 2
IS VOID METHOD: true
FRAGMENT LENGTH: 346
FRAGMENT LINE AVG SIZE: 43.25
DEPTHS:
1 2 2 3 2 2 1 1 
AREA: 14
AVG DEPTH: 1.75
NUMBER OF LINES IN FRAGMENT: 8
---REFACTORING_FINISH---
DESCRIPTION: Extract Method	private compareIsNumberWithCreateNumber(val String, expected boolean) : void extracted from public testIsNumber() : void in class org.apache.commons.lang3.math.NumberUtilsTest
REFACTORING FILE DIFF URL: https://github.com/apache/commons-lang/commit/159415855d06d186e86a70f3d4aba8c2e96d4b34/src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java
REFACTORING URL: https://github.com/apache/commons-lang/blob/159415855d06d186e86a70f3d4aba8c2e96d4b34/src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java#L1228
DIRECTLY EXTRACTED OPERATION:
        final boolean isValid = NumberUtils.isNumber(val);
        final boolean canCreate = checkCreateNumber(val);
        if (isValid == expected && canCreate == expected) {
            return;
        }
        fail("Expecting "+ expected + " for isNumber/createNumber using \"" + val + "\" but got " + isValid + " and " + canCreate);
    }

PARAMS COUNT: 2
IS VOID METHOD: true
FRAGMENT LENGTH: 346
FRAGMENT LINE AVG SIZE: 43.25
DEPTHS:
1 2 2 3 2 2 1 1 
AREA: 14
AVG DEPTH: 1.75
NUMBER OF LINES IN FRAGMENT: 8
---REFACTORING_FINISH---
DESCRIPTION: Extract Method	private compareIsNumberWithCreateNumber(val String, expected boolean) : void extracted from public testIsNumber() : void in class org.apache.commons.lang3.math.NumberUtilsTest
REFACTORING FILE DIFF URL: https://github.com/apache/commons-lang/commit/159415855d06d186e86a70f3d4aba8c2e96d4b34/src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java
REFACTORING URL: https://github.com/apache/commons-lang/blob/159415855d06d186e86a70f3d4aba8c2e96d4b34/src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java#L1228
DIRECTLY EXTRACTED OPERATION:
        final boolean isValid = NumberUtils.isNumber(val);
        final boolean canCreate = checkCreateNumber(val);
        if (isValid == expected && canCreate == expected) {
            return;
        }
        fail("Expecting "+ expected + " for isNumber/createNumber using \"" + val + "\" but got " + isValid + " and " + canCreate);
    }

PARAMS COUNT: 2
IS VOID METHOD: true
FRAGMENT LENGTH: 346
FRAGMENT LINE AVG SIZE: 43.25
DEPTHS:
1 2 2 3 2 2 1 1 
AREA: 14
AVG DEPTH: 1.75
NUMBER OF LINES IN FRAGMENT: 8
---REFACTORING_FINISH---
DESCRIPTION: Extract Method	private compareIsNumberWithCreateNumber(val String, expected boolean) : void extracted from public testIsNumber() : void in class org.apache.commons.lang3.math.NumberUtilsTest
REFACTORING FILE DIFF URL: https://github.com/apache/commons-lang/commit/159415855d06d186e86a70f3d4aba8c2e96d4b34/src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java
REFACTORING URL: https://github.com/apache/commons-lang/blob/159415855d06d186e86a70f3d4aba8c2e96d4b34/src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java#L1228
DIRECTLY EXTRACTED OPERATION:
        final boolean isValid = NumberUtils.isNumber(val);
        final boolean canCreate = checkCreateNumber(val);
        if (isValid == expected && canCreate == expected) {
            return;
        }
        fail("Expecting "+ expected + " for isNumber/createNumber using \"" + val + "\" but got " + isValid + " and " + canCreate);
    }

PARAMS COUNT: 2
IS VOID METHOD: true
FRAGMENT LENGTH: 346
FRAGMENT LINE AVG SIZE: 43.25
DEPTHS:
1 2 2 3 2 2 1 1 
AREA: 14
AVG DEPTH: 1.75
NUMBER OF LINES IN FRAGMENT: 8
---REFACTORING_FINISH---
DESCRIPTION: Extract Method	private compareIsNumberWithCreateNumber(val String, expected boolean) : void extracted from public testIsNumber() : void in class org.apache.commons.lang3.math.NumberUtilsTest
REFACTORING FILE DIFF URL: https://github.com/apache/commons-lang/commit/159415855d06d186e86a70f3d4aba8c2e96d4b34/src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java
REFACTORING URL: https://github.com/apache/commons-lang/blob/159415855d06d186e86a70f3d4aba8c2e96d4b34/src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java#L1228
DIRECTLY EXTRACTED OPERATION:
        final boolean isValid = NumberUtils.isNumber(val);
        final boolean canCreate = checkCreateNumber(val);
        if (isValid == expected && canCreate == expected) {
            return;
        }
        fail("Expecting "+ expected + " for isNumber/createNumber using \"" + val + "\" but got " + isValid + " and " + canCreate);
    }

PARAMS COUNT: 2
IS VOID METHOD: true
FRAGMENT LENGTH: 346
FRAGMENT LINE AVG SIZE: 43.25
DEPTHS:
1 2 2 3 2 2 1 1 
AREA: 14
AVG DEPTH: 1.75
NUMBER OF LINES IN FRAGMENT: 8
---REFACTORING_FINISH---
DESCRIPTION: Extract Method	private compareIsNumberWithCreateNumber(val String, expected boolean) : void extracted from public testIsNumber() : void in class org.apache.commons.lang3.math.NumberUtilsTest
REFACTORING FILE DIFF URL: https://github.com/apache/commons-lang/commit/159415855d06d186e86a70f3d4aba8c2e96d4b34/src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java
REFACTORING URL: https://github.com/apache/commons-lang/blob/159415855d06d186e86a70f3d4aba8c2e96d4b34/src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java#L1228
DIRECTLY EXTRACTED OPERATION:
        final boolean isValid = NumberUtils.isNumber(val);
        final boolean canCreate = checkCreateNumber(val);
        if (isValid == expected && canCreate == expected) {
            return;
        }
        fail("Expecting "+ expected + " for isNumber/createNumber using \"" + val + "\" but got " + isValid + " and " + canCreate);
    }

PARAMS COUNT: 2
IS VOID METHOD: true
FRAGMENT LENGTH: 346
FRAGMENT LINE AVG SIZE: 43.25
DEPTHS:
1 2 2 3 2 2 1 1 
AREA: 14
AVG DEPTH: 1.75
NUMBER OF LINES IN FRAGMENT: 8
---REFACTORING_FINISH---
-----REFACTORINGS_END-----
COMMIT ID: 2eecc96a53bb3b9da49bae03a18388d0f23853e7
URL: https://github.com/apache/commons-lang/commit/2eecc96a53bb3b9da49bae03a18388d0f23853e7
DESCRIPTION: Extract Method	public removeFinalModifier(field Field, forceAccess boolean) : void extracted from public removeFinalModifier(field Field) : void in class org.apache.commons.lang3.reflect.FieldUtils
REFACTORING FILE DIFF URL: https://github.com/apache/commons-lang/commit/2eecc96a53bb3b9da49bae03a18388d0f23853e7/src/main/java/org/apache/commons/lang3/reflect/FieldUtils.java
REFACTORING URL: https://github.com/apache/commons-lang/blob/2eecc96a53bb3b9da49bae03a18388d0f23853e7/src/main/java/org/apache/commons/lang3/reflect/FieldUtils.java#L664
DIRECTLY EXTRACTED OPERATION:
     * Removes the final modifier from a {@link Field}.
     * 
     * @param field
     *            to remove the final modifier
     * @param forceAccess
     *            whether to break scope restrictions using the
     *            {@link java.lang.reflect.AccessibleObject#setAccessible(boolean)} method. {@code false} will only
     *            match {@code public} fields.
     * @throws IllegalArgumentException
     *             if the field is {@code null}
     */
    public static void removeFinalModifier(Field field, boolean forceAccess) {
        Validate.isTrue(field != null, "The field must not be null");

        try {
            if (Modifier.isFinal(field.getModifiers())) {
                // Do all JREs implement Field with a private ivar called "modifiers"?
                Field modifiersField = Field.class.getDeclaredField("modifiers");
                final boolean doForceAccess = forceAccess && !modifiersField.isAccessible();
                if (doForceAccess) {
                    modifiersField.setAccessible(true);
                }
                try {
                    modifiersField.setInt(field, field.getModifiers() & ~Modifier.FINAL);
                } finally {
                    if (doForceAccess) {
                        modifiersField.setAccessible(false);
                    }
                }
            }
        } catch (NoSuchFieldException ignored) {
            // The field class contains always a modifiers field
        } catch (IllegalAccessException ignored) {
            // The modifiers field is made accessible
        }
    }

PARAMS COUNT: 2
IS VOID METHOD: true
FRAGMENT LENGTH: 1607
FRAGMENT LINE AVG SIZE: 43.432432432432435
DEPTHS:
0 1 1 1 1 1 1 1 1 1 1 1 2 2 2 3 4 4 4 4 5 4 4 5 5 5 6 5 4 3 3 3 3 3 2 1 1 
AREA: 98
AVG DEPTH: 2.6486486486486487
NUMBER OF LINES IN FRAGMENT: 37
---REFACTORING_FINISH---
-----REFACTORINGS_END-----
COMMIT ID: 03645a1ec13a33d15d10270be759ddeaf9a5f7b5
URL: https://github.com/apache/commons-lang/commit/03645a1ec13a33d15d10270be759ddeaf9a5f7b5
DESCRIPTION: Extract Method	private getEraStart(year int, zone TimeZone, locale Locale) : Calendar extracted from public testParses() : void in class org.apache.commons.lang3.time.FastDateParserTest
REFACTORING FILE DIFF URL: https://github.com/apache/commons-lang/commit/03645a1ec13a33d15d10270be759ddeaf9a5f7b5/src/test/java/org/apache/commons/lang3/time/FastDateParserTest.java
REFACTORING URL: https://github.com/apache/commons-lang/blob/03645a1ec13a33d15d10270be759ddeaf9a5f7b5/src/test/java/org/apache/commons/lang3/time/FastDateParserTest.java#L191
DIRECTLY EXTRACTED OPERATION:
        Calendar cal = Calendar.getInstance(zone, locale);
        cal.clear();

        // http://docs.oracle.com/javase/6/docs/technotes/guides/intl/calendar.doc.html
        if (locale.equals(FastDateParser.JAPANESE_IMPERIAL)) {
            if(year < 1868) {
                cal.set(Calendar.ERA, 0);
                cal.set(Calendar.YEAR, 1868-year);
            }
        }
        else {
            if (year < 0) {
                cal.set(Calendar.ERA, GregorianCalendar.BC);
                year= -year;
            }
            cal.set(Calendar.YEAR, year/100 * 100);
        }
        return cal;
    }

PARAMS COUNT: 3
IS VOID METHOD: false
FRAGMENT LENGTH: 615
FRAGMENT LINE AVG SIZE: 30.75
DEPTHS:
1 2 2 2 2 3 4 4 3 2 2 3 4 4 3 3 2 2 1 1 
AREA: 50
AVG DEPTH: 2.5
NUMBER OF LINES IN FRAGMENT: 20
---REFACTORING_FINISH---
DESCRIPTION: Extract Method	private validateSdfFormatFdpParseEquality(format String, locale Locale, tz TimeZone, fdp DateParser, in Date, year int, cs Date) : void extracted from public testParses() : void in class org.apache.commons.lang3.time.FastDateParserTest
REFACTORING FILE DIFF URL: https://github.com/apache/commons-lang/commit/03645a1ec13a33d15d10270be759ddeaf9a5f7b5/src/test/java/org/apache/commons/lang3/time/FastDateParserTest.java
REFACTORING URL: https://github.com/apache/commons-lang/blob/03645a1ec13a33d15d10270be759ddeaf9a5f7b5/src/test/java/org/apache/commons/lang3/time/FastDateParserTest.java#L212
DIRECTLY EXTRACTED OPERATION:
        final SimpleDateFormat sdf = new SimpleDateFormat(format, locale);
        if (format.equals(SHORT_FORMAT)) {
            sdf.set2DigitYearStart( cs );
        }
        final String fmt = sdf.format(in);
        try {
            final Date out = fdp.parse(fmt);
            assertEquals(locale.toString()+" "+in+" "+ format+ " "+tz.getID(), in, out);
        } catch (final ParseException pe) {
            System.out.println(fmt+" "+locale.toString()+" "+year+" "+ format+ " "+tz.getID());
            throw pe;
        }
    }

PARAMS COUNT: 7
IS VOID METHOD: true
FRAGMENT LENGTH: 540
FRAGMENT LINE AVG SIZE: 38.57142857142857
DEPTHS:
1 2 3 2 2 2 3 3 3 3 3 2 1 1 
AREA: 31
AVG DEPTH: 2.2142857142857144
NUMBER OF LINES IN FRAGMENT: 14
---REFACTORING_FINISH---
-----REFACTORINGS_END-----
COMMIT ID: 2550d4cfa283603a23283c5495bfab75deff02dc
URL: https://github.com/apache/commons-lang/commit/2550d4cfa283603a23283c5495bfab75deff02dc
DESCRIPTION: Extract Method	private isOctalDigit(ch char) : boolean extracted from public translate(input CharSequence, index int, out Writer) : int in class org.apache.commons.lang3.text.translate.OctalUnescaper
REFACTORING FILE DIFF URL: https://github.com/apache/commons-lang/commit/2550d4cfa283603a23283c5495bfab75deff02dc/src/main/java/org/apache/commons/lang3/text/translate/OctalUnescaper.java
REFACTORING URL: https://github.com/apache/commons-lang/blob/2550d4cfa283603a23283c5495bfab75deff02dc/src/main/java/org/apache/commons/lang3/text/translate/OctalUnescaper.java#L66
DIRECTLY EXTRACTED OPERATION:
        return ch >= '0' && ch <= '7';
    }

PARAMS COUNT: 1
IS VOID METHOD: false
FRAGMENT LENGTH: 46
FRAGMENT LINE AVG SIZE: 15.333333333333334
DEPTHS:
1 1 1 
AREA: 3
AVG DEPTH: 1.0
NUMBER OF LINES IN FRAGMENT: 3
---REFACTORING_FINISH---
-----REFACTORINGS_END-----
COMMIT ID: 7869bf058e10be7684d4ba6f58346527b692f63a
URL: https://github.com/apache/commons-lang/commit/7869bf058e10be7684d4ba6f58346527b692f63a
DESCRIPTION: Extract Method	public reverse(array boolean[], startIndexInclusive int, endIndexExclusive int) : void extracted from public reverse(array boolean[]) : void in class org.apache.commons.lang3.ArrayUtils
REFACTORING FILE DIFF URL: https://github.com/apache/commons-lang/commit/7869bf058e10be7684d4ba6f58346527b692f63a/src/main/java/org/apache/commons/lang3/ArrayUtils.java
REFACTORING URL: https://github.com/apache/commons-lang/blob/7869bf058e10be7684d4ba6f58346527b692f63a/src/main/java/org/apache/commons/lang3/ArrayUtils.java#L1553
DIRECTLY EXTRACTED OPERATION:
     * <p>
     * Reverses the order of the given array in the given range.
     * </p>
     * 
     * <p>
     * This method does nothing for a {@code null} input array.
     * </p>
     * 
     * @param array
     *            the array to reverse, may be {@code null}
     * @param startIndexInclusive
     *            the starting index. Undervalue (&lt;0) is promoted to 0, overvalue (&gt;array.length) results in no
     *            change.
     * @param endIndexExclusive
     *            elements up to endIndex-1 are reversed in the array. Undervalue (&lt; start index) results in no
     *            change. Overvalue (&gt;array.length) is demoted to array length.
     */
    public static void reverse(final boolean[] array, int startIndexInclusive, int endIndexExclusive) {
        if (array == null) {
            return;
        }
        int i = startIndexInclusive < 0 ? 0 : startIndexInclusive;
        int j = Math.min(array.length, endIndexExclusive) - 1;
        boolean tmp;
        while (j > i) {
            tmp = array[j];
            array[j] = array[i];
            array[i] = tmp;
            j--;
            i++;
        }
    }

PARAMS COUNT: 3
IS VOID METHOD: true
FRAGMENT LENGTH: 1165
FRAGMENT LINE AVG SIZE: 35.303030303030305
DEPTHS:
1 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 3 4 3 3 3 3 3 4 4 4 4 4 3 2 2 
AREA: 84
AVG DEPTH: 2.5454545454545454
NUMBER OF LINES IN FRAGMENT: 33
---REFACTORING_FINISH---
DESCRIPTION: Extract Method	public reverse(array byte[], startIndexInclusive int, endIndexExclusive int) : void extracted from public reverse(array byte[]) : void in class org.apache.commons.lang3.ArrayUtils
REFACTORING FILE DIFF URL: https://github.com/apache/commons-lang/commit/7869bf058e10be7684d4ba6f58346527b692f63a/src/main/java/org/apache/commons/lang3/ArrayUtils.java
REFACTORING URL: https://github.com/apache/commons-lang/blob/7869bf058e10be7684d4ba6f58346527b692f63a/src/main/java/org/apache/commons/lang3/ArrayUtils.java#L1587
DIRECTLY EXTRACTED OPERATION:
     * <p>
     * Reverses the order of the given array in the given range.
     * </p>
     * 
     * <p>
     * This method does nothing for a {@code null} input array.
     * </p>
     * 
     * @param array
     *            the array to reverse, may be {@code null}
     * @param startIndexInclusive
     *            the starting index. Undervalue (&lt;0) is promoted to 0, overvalue (&gt;array.length) results in no
     *            change.
     * @param endIndexExclusive
     *            elements up to endIndex-1 are reversed in the array. Undervalue (&lt; start index) results in no
     *            change. Overvalue (&gt;array.length) is demoted to array length.
     */
    public static void reverse(final byte[] array, int startIndexInclusive, int endIndexExclusive) {
        if (array == null) {
            return;
        }
        int i = startIndexInclusive < 0 ? 0 : startIndexInclusive;
        int j = Math.min(array.length, endIndexExclusive) - 1;
        byte tmp;
        while (j > i) {
            tmp = array[j];
            array[j] = array[i];
            array[i] = tmp;
            j--;
            i++;
        }
    }

PARAMS COUNT: 3
IS VOID METHOD: true
FRAGMENT LENGTH: 1159
FRAGMENT LINE AVG SIZE: 35.121212121212125
DEPTHS:
1 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 3 4 3 3 3 3 3 4 4 4 4 4 3 2 2 
AREA: 84
AVG DEPTH: 2.5454545454545454
NUMBER OF LINES IN FRAGMENT: 33
---REFACTORING_FINISH---
DESCRIPTION: Extract Method	public reverse(array char[], startIndexInclusive int, endIndexExclusive int) : void extracted from public reverse(array char[]) : void in class org.apache.commons.lang3.ArrayUtils
REFACTORING FILE DIFF URL: https://github.com/apache/commons-lang/commit/7869bf058e10be7684d4ba6f58346527b692f63a/src/main/java/org/apache/commons/lang3/ArrayUtils.java
REFACTORING URL: https://github.com/apache/commons-lang/blob/7869bf058e10be7684d4ba6f58346527b692f63a/src/main/java/org/apache/commons/lang3/ArrayUtils.java#L1621
DIRECTLY EXTRACTED OPERATION:
     * <p>
     * Reverses the order of the given array in the given range.
     * </p>
     * 
     * <p>
     * This method does nothing for a {@code null} input array.
     * </p>
     * 
     * @param array
     *            the array to reverse, may be {@code null}
     * @param startIndexInclusive
     *            the starting index. Undervalue (&lt;0) is promoted to 0, overvalue (&gt;array.length) results in no
     *            change.
     * @param endIndexExclusive
     *            elements up to endIndex-1 are reversed in the array. Undervalue (&lt; start index) results in no
     *            change. Overvalue (&gt;array.length) is demoted to array length.
     */
    public static void reverse(final char[] array, int startIndexInclusive, int endIndexExclusive) {
        if (array == null) {
            return;
        }
        int i = startIndexInclusive < 0 ? 0 : startIndexInclusive;
        int j = Math.min(array.length, endIndexExclusive) - 1;
        char tmp;
        while (j > i) {
            tmp = array[j];
            array[j] = array[i];
            array[i] = tmp;
            j--;
            i++;
        }
    }

PARAMS COUNT: 3
IS VOID METHOD: true
FRAGMENT LENGTH: 1159
FRAGMENT LINE AVG SIZE: 35.121212121212125
DEPTHS:
1 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 3 4 3 3 3 3 3 4 4 4 4 4 3 2 2 
AREA: 84
AVG DEPTH: 2.5454545454545454
NUMBER OF LINES IN FRAGMENT: 33
---REFACTORING_FINISH---
DESCRIPTION: Extract Method	public reverse(array double[], startIndexInclusive int, endIndexExclusive int) : void extracted from public reverse(array double[]) : void in class org.apache.commons.lang3.ArrayUtils
REFACTORING FILE DIFF URL: https://github.com/apache/commons-lang/commit/7869bf058e10be7684d4ba6f58346527b692f63a/src/main/java/org/apache/commons/lang3/ArrayUtils.java
REFACTORING URL: https://github.com/apache/commons-lang/blob/7869bf058e10be7684d4ba6f58346527b692f63a/src/main/java/org/apache/commons/lang3/ArrayUtils.java#L1655
DIRECTLY EXTRACTED OPERATION:
     * <p>
     * Reverses the order of the given array in the given range.
     * </p>
     * 
     * <p>
     * This method does nothing for a {@code null} input array.
     * </p>
     * 
     * @param array
     *            the array to reverse, may be {@code null}
     * @param startIndexInclusive
     *            the starting index. Undervalue (&lt;0) is promoted to 0, overvalue (&gt;array.length) results in no
     *            change.
     * @param endIndexExclusive
     *            elements up to endIndex-1 are reversed in the array. Undervalue (&lt; start index) results in no
     *            change. Overvalue (&gt;array.length) is demoted to array length.
     */
    public static void reverse(final double[] array, int startIndexInclusive, int endIndexExclusive) {
        if (array == null) {
            return;
        }
        int i = startIndexInclusive < 0 ? 0 : startIndexInclusive;
        int j = Math.min(array.length, endIndexExclusive) - 1;
        double tmp;
        while (j > i) {
            tmp = array[j];
            array[j] = array[i];
            array[i] = tmp;
            j--;
            i++;
        }
    }

PARAMS COUNT: 3
IS VOID METHOD: true
FRAGMENT LENGTH: 1163
FRAGMENT LINE AVG SIZE: 35.24242424242424
DEPTHS:
1 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 3 4 3 3 3 3 3 4 4 4 4 4 3 2 2 
AREA: 84
AVG DEPTH: 2.5454545454545454
NUMBER OF LINES IN FRAGMENT: 33
---REFACTORING_FINISH---
DESCRIPTION: Extract Method	public reverse(array float[], startIndexInclusive int, endIndexExclusive int) : void extracted from public reverse(array float[]) : void in class org.apache.commons.lang3.ArrayUtils
REFACTORING FILE DIFF URL: https://github.com/apache/commons-lang/commit/7869bf058e10be7684d4ba6f58346527b692f63a/src/main/java/org/apache/commons/lang3/ArrayUtils.java
REFACTORING URL: https://github.com/apache/commons-lang/blob/7869bf058e10be7684d4ba6f58346527b692f63a/src/main/java/org/apache/commons/lang3/ArrayUtils.java#L1689
DIRECTLY EXTRACTED OPERATION:
     * <p>
     * Reverses the order of the given array in the given range.
     * </p>
     * 
     * <p>
     * This method does nothing for a {@code null} input array.
     * </p>
     * 
     * @param array
     *            the array to reverse, may be {@code null}
     * @param startIndexInclusive
     *            the starting index. Undervalue (&lt;0) is promoted to 0, overvalue (&gt;array.length) results in no
     *            change.
     * @param endIndexExclusive
     *            elements up to endIndex-1 are reversed in the array. Undervalue (&lt; start index) results in no
     *            change. Overvalue (&gt;array.length) is demoted to array length.
     */
    public static void reverse(final float[] array, int startIndexInclusive, int endIndexExclusive) {
        if (array == null) {
            return;
        }
        int i = startIndexInclusive < 0 ? 0 : startIndexInclusive;
        int j = Math.min(array.length, endIndexExclusive) - 1;
        float tmp;
        while (j > i) {
            tmp = array[j];
            array[j] = array[i];
            array[i] = tmp;
            j--;
            i++;
        }
    }

PARAMS COUNT: 3
IS VOID METHOD: true
FRAGMENT LENGTH: 1161
FRAGMENT LINE AVG SIZE: 35.18181818181818
DEPTHS:
1 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 3 4 3 3 3 3 3 4 4 4 4 4 3 2 2 
AREA: 84
AVG DEPTH: 2.5454545454545454
NUMBER OF LINES IN FRAGMENT: 33
---REFACTORING_FINISH---
DESCRIPTION: Extract Method	public reverse(array int[], startIndexInclusive int, endIndexExclusive int) : void extracted from public reverse(array int[]) : void in class org.apache.commons.lang3.ArrayUtils
REFACTORING FILE DIFF URL: https://github.com/apache/commons-lang/commit/7869bf058e10be7684d4ba6f58346527b692f63a/src/main/java/org/apache/commons/lang3/ArrayUtils.java
REFACTORING URL: https://github.com/apache/commons-lang/blob/7869bf058e10be7684d4ba6f58346527b692f63a/src/main/java/org/apache/commons/lang3/ArrayUtils.java#L1723
DIRECTLY EXTRACTED OPERATION:
     * <p>
     * Reverses the order of the given array in the given range.
     * </p>
     * 
     * <p>
     * This method does nothing for a {@code null} input array.
     * </p>
     * 
     * @param array
     *            the array to reverse, may be {@code null}
     * @param startIndexInclusive
     *            the starting index. Undervalue (&lt;0) is promoted to 0, overvalue (&gt;array.length) results in no
     *            change.
     * @param endIndexExclusive
     *            elements up to endIndex-1 are reversed in the array. Undervalue (&lt; start index) results in no
     *            change. Overvalue (&gt;array.length) is demoted to array length.
     */
    public static void reverse(final int[] array, int startIndexInclusive, int endIndexExclusive) {
        if (array == null) {
            return;
        }
        int i = startIndexInclusive < 0 ? 0 : startIndexInclusive;
        int j = Math.min(array.length, endIndexExclusive) - 1;
        int tmp;
        while (j > i) {
            tmp = array[j];
            array[j] = array[i];
            array[i] = tmp;
            j--;
            i++;
        }
    }

PARAMS COUNT: 3
IS VOID METHOD: true
FRAGMENT LENGTH: 1157
FRAGMENT LINE AVG SIZE: 35.06060606060606
DEPTHS:
1 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 3 4 3 3 3 3 3 4 4 4 4 4 3 2 2 
AREA: 84
AVG DEPTH: 2.5454545454545454
NUMBER OF LINES IN FRAGMENT: 33
---REFACTORING_FINISH---
DESCRIPTION: Extract Method	public reverse(array long[], startIndexInclusive int, endIndexExclusive int) : void extracted from public reverse(array long[]) : void in class org.apache.commons.lang3.ArrayUtils
REFACTORING FILE DIFF URL: https://github.com/apache/commons-lang/commit/7869bf058e10be7684d4ba6f58346527b692f63a/src/main/java/org/apache/commons/lang3/ArrayUtils.java
REFACTORING URL: https://github.com/apache/commons-lang/blob/7869bf058e10be7684d4ba6f58346527b692f63a/src/main/java/org/apache/commons/lang3/ArrayUtils.java#L1757
DIRECTLY EXTRACTED OPERATION:
     * <p>
     * Reverses the order of the given array in the given range.
     * </p>
     * 
     * <p>
     * This method does nothing for a {@code null} input array.
     * </p>
     * 
     * @param array
     *            the array to reverse, may be {@code null}
     * @param startIndexInclusive
     *            the starting index. Undervalue (&lt;0) is promoted to 0, overvalue (&gt;array.length) results in no
     *            change.
     * @param endIndexExclusive
     *            elements up to endIndex-1 are reversed in the array. Undervalue (&lt; start index) results in no
     *            change. Overvalue (&gt;array.length) is demoted to array length.
     */
    public static void reverse(final long[] array, int startIndexInclusive, int endIndexExclusive) {
        if (array == null) {
            return;
        }
        int i = startIndexInclusive < 0 ? 0 : startIndexInclusive;
        int j = Math.min(array.length, endIndexExclusive) - 1;
        long tmp;
        while (j > i) {
            tmp = array[j];
            array[j] = array[i];
            array[i] = tmp;
            j--;
            i++;
        }
    }

PARAMS COUNT: 3
IS VOID METHOD: true
FRAGMENT LENGTH: 1159
FRAGMENT LINE AVG SIZE: 35.121212121212125
DEPTHS:
1 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 3 4 3 3 3 3 3 4 4 4 4 4 3 2 2 
AREA: 84
AVG DEPTH: 2.5454545454545454
NUMBER OF LINES IN FRAGMENT: 33
---REFACTORING_FINISH---
DESCRIPTION: Extract Method	public reverse(array Object[], startIndexInclusive int, endIndexExclusive int) : void extracted from public reverse(array Object[]) : void in class org.apache.commons.lang3.ArrayUtils
REFACTORING FILE DIFF URL: https://github.com/apache/commons-lang/commit/7869bf058e10be7684d4ba6f58346527b692f63a/src/main/java/org/apache/commons/lang3/ArrayUtils.java
REFACTORING URL: https://github.com/apache/commons-lang/blob/7869bf058e10be7684d4ba6f58346527b692f63a/src/main/java/org/apache/commons/lang3/ArrayUtils.java#L1791
DIRECTLY EXTRACTED OPERATION:
     * <p>
     * Reverses the order of the given array in the given range.
     * </p>
     * 
     * <p>
     * This method does nothing for a {@code null} input array.
     * </p>
     * 
     * @param array
     *            the array to reverse, may be {@code null}
     * @param startIndexInclusive
     *            the starting index. Undervalue (&lt;0) is promoted to 0, overvalue (&gt;array.length) results in no
     *            change.
     * @param endIndexExclusive
     *            elements up to endIndex-1 are reversed in the array. Undervalue (&lt; start index) results in no
     *            change. Overvalue (&gt;array.length) is demoted to array length.
     */
    public static void reverse(final Object[] array, int startIndexInclusive, int endIndexExclusive) {
        if (array == null) {
            return;
        }
        int i = startIndexInclusive < 0 ? 0 : startIndexInclusive;
        int j = Math.min(array.length, endIndexExclusive) - 1;
        Object tmp;
        while (j > i) {
            tmp = array[j];
            array[j] = array[i];
            array[i] = tmp;
            j--;
            i++;
        }
    }

PARAMS COUNT: 3
IS VOID METHOD: true
FRAGMENT LENGTH: 1163
FRAGMENT LINE AVG SIZE: 35.24242424242424
DEPTHS:
1 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 3 4 3 3 3 3 3 4 4 4 4 4 3 2 2 
AREA: 84
AVG DEPTH: 2.5454545454545454
NUMBER OF LINES IN FRAGMENT: 33
---REFACTORING_FINISH---
DESCRIPTION: Extract Method	public reverse(array short[], startIndexInclusive int, endIndexExclusive int) : void extracted from public reverse(array short[]) : void in class org.apache.commons.lang3.ArrayUtils
REFACTORING FILE DIFF URL: https://github.com/apache/commons-lang/commit/7869bf058e10be7684d4ba6f58346527b692f63a/src/main/java/org/apache/commons/lang3/ArrayUtils.java
REFACTORING URL: https://github.com/apache/commons-lang/blob/7869bf058e10be7684d4ba6f58346527b692f63a/src/main/java/org/apache/commons/lang3/ArrayUtils.java#L1825
DIRECTLY EXTRACTED OPERATION:
     * <p>
     * Reverses the order of the given array in the given range.
     * </p>
     * 
     * <p>
     * This method does nothing for a {@code null} input array.
     * </p>
     * 
     * @param array
     *            the array to reverse, may be {@code null}
     * @param startIndexInclusive
     *            the starting index. Undervalue (&lt;0) is promoted to 0, overvalue (&gt;array.length) results in no
     *            change.
     * @param endIndexExclusive
     *            elements up to endIndex-1 are reversed in the array. Undervalue (&lt; start index) results in no
     *            change. Overvalue (&gt;array.length) is demoted to array length.
     */
    public static void reverse(final short[] array, int startIndexInclusive, int endIndexExclusive) {
        if (array == null) {
            return;
        }
        int i = startIndexInclusive < 0 ? 0 : startIndexInclusive;
        int j = Math.min(array.length, endIndexExclusive) - 1;
        short tmp;
        while (j > i) {
            tmp = array[j];
            array[j] = array[i];
            array[i] = tmp;
            j--;
            i++;
        }
    }

PARAMS COUNT: 3
IS VOID METHOD: true
FRAGMENT LENGTH: 1161
FRAGMENT LINE AVG SIZE: 35.18181818181818
DEPTHS:
1 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 3 4 3 3 3 3 3 4 4 4 4 4 3 2 2 
AREA: 84
AVG DEPTH: 2.5454545454545454
NUMBER OF LINES IN FRAGMENT: 33
---REFACTORING_FINISH---
-----REFACTORINGS_END-----
COMMIT ID: b4ba50f6c8af03ba318d3a360e8c045a939aaf6a
URL: https://github.com/apache/commons-lang/commit/b4ba50f6c8af03ba318d3a360e8c045a939aaf6a
DESCRIPTION: Extract Method	public getAllFieldsList(cls Class<?>) : List<Field> extracted from public getAllFields(cls Class<?>) : Field[] in class org.apache.commons.lang3.reflect.FieldUtils
REFACTORING FILE DIFF URL: https://github.com/apache/commons-lang/commit/b4ba50f6c8af03ba318d3a360e8c045a939aaf6a/src/main/java/org/apache/commons/lang3/reflect/FieldUtils.java
REFACTORING URL: https://github.com/apache/commons-lang/blob/b4ba50f6c8af03ba318d3a360e8c045a939aaf6a/src/main/java/org/apache/commons/lang3/reflect/FieldUtils.java#L203
DIRECTLY EXTRACTED OPERATION:
     * Gets all fields of the given class and its parents (if any).
     * 
     * @param cls
     *            the class to query
     * @return an array of Fields (maybe an empty array).
     * @since 3.2
     */
    public static List<Field> getAllFieldsList(Class<?> cls) {
        if (cls == null) {
            throw new IllegalArgumentException("The class must not be null");
        }
        List<Field> allFields = new ArrayList<Field>();
        Class<?> currentClass = cls;
        while (currentClass != null) {
            final Field[] declaredFields = currentClass.getDeclaredFields();
            for (Field field : declaredFields) {
                allFields.add(field);
            }
            currentClass = currentClass.getSuperclass();
        }
        return allFields;
    }

PARAMS COUNT: 1
IS VOID METHOD: false
FRAGMENT LENGTH: 803
FRAGMENT LINE AVG SIZE: 34.91304347826087
DEPTHS:
0 1 1 1 1 1 1 1 2 3 2 2 2 2 3 3 4 3 3 2 2 1 1 
AREA: 42
AVG DEPTH: 1.826086956521739
NUMBER OF LINES IN FRAGMENT: 23
---REFACTORING_FINISH---
-----REFACTORINGS_END-----
COMMIT ID: 0c9622b749f3d49798059c74ad66a51f3c782b5a
URL: https://github.com/apache/commons-lang/commit/0c9622b749f3d49798059c74ad66a51f3c782b5a
DESCRIPTION: Extract Method	protected toUtf16Escape(codepoint int) : String extracted from public translate(codepoint int, out Writer) : boolean in class org.apache.commons.lang3.text.translate.UnicodeEscaper
REFACTORING FILE DIFF URL: https://github.com/apache/commons-lang/commit/0c9622b749f3d49798059c74ad66a51f3c782b5a/src/main/java/org/apache/commons/lang3/text/translate/UnicodeEscaper.java
REFACTORING URL: https://github.com/apache/commons-lang/blob/0c9622b749f3d49798059c74ad66a51f3c782b5a/src/main/java/org/apache/commons/lang3/text/translate/UnicodeEscaper.java#L129
DIRECTLY EXTRACTED OPERATION:
        return "\\u" + hex(codepoint);
    }
}
PARAMS COUNT: 1
IS VOID METHOD: false
FRAGMENT LENGTH: 47
FRAGMENT LINE AVG SIZE: 15.666666666666666
DEPTHS:
1 1 0 
AREA: 2
AVG DEPTH: 0.6666666666666666
NUMBER OF LINES IN FRAGMENT: 3
---REFACTORING_FINISH---
-----REFACTORINGS_END-----
COMMIT ID: f5a83bb90cf7b318ac72823e6b99d01d060abe41
URL: https://github.com/apache/commons-lang/commit/f5a83bb90cf7b318ac72823e6b99d01d060abe41
DESCRIPTION: Extract Method	private validateArray(array Object) : void extracted from public min(array long[]) : long in class org.apache.commons.lang3.math.NumberUtils
REFACTORING FILE DIFF URL: https://github.com/apache/commons-lang/commit/f5a83bb90cf7b318ac72823e6b99d01d060abe41/src/main/java/org/apache/commons/lang3/math/NumberUtils.java
REFACTORING URL: https://github.com/apache/commons-lang/blob/f5a83bb90cf7b318ac72823e6b99d01d060abe41/src/main/java/org/apache/commons/lang3/math/NumberUtils.java#L1054
DIRECTLY EXTRACTED OPERATION:
        if (array == null) {
            throw new IllegalArgumentException("The Array must not be null");
        } else if (Array.getLength(array) == 0) {
            throw new IllegalArgumentException("Array cannot be empty.");
        }
    }
     
PARAMS COUNT: 1
IS VOID METHOD: true
FRAGMENT LENGTH: 253
FRAGMENT LINE AVG SIZE: 36.142857142857146
DEPTHS:
2 3 3 3 2 1 1 
AREA: 15
AVG DEPTH: 2.142857142857143
NUMBER OF LINES IN FRAGMENT: 7
---REFACTORING_FINISH---
DESCRIPTION: Extract Method	private validateArray(array Object) : void extracted from public min(array int[]) : int in class org.apache.commons.lang3.math.NumberUtils
REFACTORING FILE DIFF URL: https://github.com/apache/commons-lang/commit/f5a83bb90cf7b318ac72823e6b99d01d060abe41/src/main/java/org/apache/commons/lang3/math/NumberUtils.java
REFACTORING URL: https://github.com/apache/commons-lang/blob/f5a83bb90cf7b318ac72823e6b99d01d060abe41/src/main/java/org/apache/commons/lang3/math/NumberUtils.java#L1054
DIRECTLY EXTRACTED OPERATION:
        if (array == null) {
            throw new IllegalArgumentException("The Array must not be null");
        } else if (Array.getLength(array) == 0) {
            throw new IllegalArgumentException("Array cannot be empty.");
        }
    }
     
PARAMS COUNT: 1
IS VOID METHOD: true
FRAGMENT LENGTH: 253
FRAGMENT LINE AVG SIZE: 36.142857142857146
DEPTHS:
2 3 3 3 2 1 1 
AREA: 15
AVG DEPTH: 2.142857142857143
NUMBER OF LINES IN FRAGMENT: 7
---REFACTORING_FINISH---
DESCRIPTION: Extract Method	private validateArray(array Object) : void extracted from public min(array short[]) : short in class org.apache.commons.lang3.math.NumberUtils
REFACTORING FILE DIFF URL: https://github.com/apache/commons-lang/commit/f5a83bb90cf7b318ac72823e6b99d01d060abe41/src/main/java/org/apache/commons/lang3/math/NumberUtils.java
REFACTORING URL: https://github.com/apache/commons-lang/blob/f5a83bb90cf7b318ac72823e6b99d01d060abe41/src/main/java/org/apache/commons/lang3/math/NumberUtils.java#L1054
DIRECTLY EXTRACTED OPERATION:
        if (array == null) {
            throw new IllegalArgumentException("The Array must not be null");
        } else if (Array.getLength(array) == 0) {
            throw new IllegalArgumentException("Array cannot be empty.");
        }
    }
     
PARAMS COUNT: 1
IS VOID METHOD: true
FRAGMENT LENGTH: 253
FRAGMENT LINE AVG SIZE: 36.142857142857146
DEPTHS:
2 3 3 3 2 1 1 
AREA: 15
AVG DEPTH: 2.142857142857143
NUMBER OF LINES IN FRAGMENT: 7
---REFACTORING_FINISH---
DESCRIPTION: Extract Method	private validateArray(array Object) : void extracted from public min(array byte[]) : byte in class org.apache.commons.lang3.math.NumberUtils
REFACTORING FILE DIFF URL: https://github.com/apache/commons-lang/commit/f5a83bb90cf7b318ac72823e6b99d01d060abe41/src/main/java/org/apache/commons/lang3/math/NumberUtils.java
REFACTORING URL: https://github.com/apache/commons-lang/blob/f5a83bb90cf7b318ac72823e6b99d01d060abe41/src/main/java/org/apache/commons/lang3/math/NumberUtils.java#L1054
DIRECTLY EXTRACTED OPERATION:
        if (array == null) {
            throw new IllegalArgumentException("The Array must not be null");
        } else if (Array.getLength(array) == 0) {
            throw new IllegalArgumentException("Array cannot be empty.");
        }
    }
     
PARAMS COUNT: 1
IS VOID METHOD: true
FRAGMENT LENGTH: 253
FRAGMENT LINE AVG SIZE: 36.142857142857146
DEPTHS:
2 3 3 3 2 1 1 
AREA: 15
AVG DEPTH: 2.142857142857143
NUMBER OF LINES IN FRAGMENT: 7
---REFACTORING_FINISH---
DESCRIPTION: Extract Method	private validateArray(array Object) : void extracted from public min(array double[]) : double in class org.apache.commons.lang3.math.NumberUtils
REFACTORING FILE DIFF URL: https://github.com/apache/commons-lang/commit/f5a83bb90cf7b318ac72823e6b99d01d060abe41/src/main/java/org/apache/commons/lang3/math/NumberUtils.java
REFACTORING URL: https://github.com/apache/commons-lang/blob/f5a83bb90cf7b318ac72823e6b99d01d060abe41/src/main/java/org/apache/commons/lang3/math/NumberUtils.java#L1054
DIRECTLY EXTRACTED OPERATION:
        if (array == null) {
            throw new IllegalArgumentException("The Array must not be null");
        } else if (Array.getLength(array) == 0) {
            throw new IllegalArgumentException("Array cannot be empty.");
        }
    }
     
PARAMS COUNT: 1
IS VOID METHOD: true
FRAGMENT LENGTH: 253
FRAGMENT LINE AVG SIZE: 36.142857142857146
DEPTHS:
2 3 3 3 2 1 1 
AREA: 15
AVG DEPTH: 2.142857142857143
NUMBER OF LINES IN FRAGMENT: 7
---REFACTORING_FINISH---
DESCRIPTION: Extract Method	private validateArray(array Object) : void extracted from public min(array float[]) : float in class org.apache.commons.lang3.math.NumberUtils
REFACTORING FILE DIFF URL: https://github.com/apache/commons-lang/commit/f5a83bb90cf7b318ac72823e6b99d01d060abe41/src/main/java/org/apache/commons/lang3/math/NumberUtils.java
REFACTORING URL: https://github.com/apache/commons-lang/blob/f5a83bb90cf7b318ac72823e6b99d01d060abe41/src/main/java/org/apache/commons/lang3/math/NumberUtils.java#L1054
DIRECTLY EXTRACTED OPERATION:
        if (array == null) {
            throw new IllegalArgumentException("The Array must not be null");
        } else if (Array.getLength(array) == 0) {
            throw new IllegalArgumentException("Array cannot be empty.");
        }
    }
     
PARAMS COUNT: 1
IS VOID METHOD: true
FRAGMENT LENGTH: 253
FRAGMENT LINE AVG SIZE: 36.142857142857146
DEPTHS:
2 3 3 3 2 1 1 
AREA: 15
AVG DEPTH: 2.142857142857143
NUMBER OF LINES IN FRAGMENT: 7
---REFACTORING_FINISH---
DESCRIPTION: Extract Method	private validateArray(array Object) : void extracted from public max(array long[]) : long in class org.apache.commons.lang3.math.NumberUtils
REFACTORING FILE DIFF URL: https://github.com/apache/commons-lang/commit/f5a83bb90cf7b318ac72823e6b99d01d060abe41/src/main/java/org/apache/commons/lang3/math/NumberUtils.java
REFACTORING URL: https://github.com/apache/commons-lang/blob/f5a83bb90cf7b318ac72823e6b99d01d060abe41/src/main/java/org/apache/commons/lang3/math/NumberUtils.java#L1054
DIRECTLY EXTRACTED OPERATION:
        if (array == null) {
            throw new IllegalArgumentException("The Array must not be null");
        } else if (Array.getLength(array) == 0) {
            throw new IllegalArgumentException("Array cannot be empty.");
        }
    }
     
PARAMS COUNT: 1
IS VOID METHOD: true
FRAGMENT LENGTH: 253
FRAGMENT LINE AVG SIZE: 36.142857142857146
DEPTHS:
2 3 3 3 2 1 1 
AREA: 15
AVG DEPTH: 2.142857142857143
NUMBER OF LINES IN FRAGMENT: 7
---REFACTORING_FINISH---
DESCRIPTION: Extract Method	private validateArray(array Object) : void extracted from public max(array int[]) : int in class org.apache.commons.lang3.math.NumberUtils
REFACTORING FILE DIFF URL: https://github.com/apache/commons-lang/commit/f5a83bb90cf7b318ac72823e6b99d01d060abe41/src/main/java/org/apache/commons/lang3/math/NumberUtils.java
REFACTORING URL: https://github.com/apache/commons-lang/blob/f5a83bb90cf7b318ac72823e6b99d01d060abe41/src/main/java/org/apache/commons/lang3/math/NumberUtils.java#L1054
DIRECTLY EXTRACTED OPERATION:
        if (array == null) {
            throw new IllegalArgumentException("The Array must not be null");
        } else if (Array.getLength(array) == 0) {
            throw new IllegalArgumentException("Array cannot be empty.");
        }
    }
     
PARAMS COUNT: 1
IS VOID METHOD: true
FRAGMENT LENGTH: 253
FRAGMENT LINE AVG SIZE: 36.142857142857146
DEPTHS:
2 3 3 3 2 1 1 
AREA: 15
AVG DEPTH: 2.142857142857143
NUMBER OF LINES IN FRAGMENT: 7
---REFACTORING_FINISH---
DESCRIPTION: Extract Method	private validateArray(array Object) : void extracted from public max(array short[]) : short in class org.apache.commons.lang3.math.NumberUtils
REFACTORING FILE DIFF URL: https://github.com/apache/commons-lang/commit/f5a83bb90cf7b318ac72823e6b99d01d060abe41/src/main/java/org/apache/commons/lang3/math/NumberUtils.java
REFACTORING URL: https://github.com/apache/commons-lang/blob/f5a83bb90cf7b318ac72823e6b99d01d060abe41/src/main/java/org/apache/commons/lang3/math/NumberUtils.java#L1054
DIRECTLY EXTRACTED OPERATION:
        if (array == null) {
            throw new IllegalArgumentException("The Array must not be null");
        } else if (Array.getLength(array) == 0) {
            throw new IllegalArgumentException("Array cannot be empty.");
        }
    }
     
PARAMS COUNT: 1
IS VOID METHOD: true
FRAGMENT LENGTH: 253
FRAGMENT LINE AVG SIZE: 36.142857142857146
DEPTHS:
2 3 3 3 2 1 1 
AREA: 15
AVG DEPTH: 2.142857142857143
NUMBER OF LINES IN FRAGMENT: 7
---REFACTORING_FINISH---
DESCRIPTION: Extract Method	private validateArray(array Object) : void extracted from public max(array byte[]) : byte in class org.apache.commons.lang3.math.NumberUtils
REFACTORING FILE DIFF URL: https://github.com/apache/commons-lang/commit/f5a83bb90cf7b318ac72823e6b99d01d060abe41/src/main/java/org/apache/commons/lang3/math/NumberUtils.java
REFACTORING URL: https://github.com/apache/commons-lang/blob/f5a83bb90cf7b318ac72823e6b99d01d060abe41/src/main/java/org/apache/commons/lang3/math/NumberUtils.java#L1054
DIRECTLY EXTRACTED OPERATION:
        if (array == null) {
            throw new IllegalArgumentException("The Array must not be null");
        } else if (Array.getLength(array) == 0) {
            throw new IllegalArgumentException("Array cannot be empty.");
        }
    }
     
PARAMS COUNT: 1
IS VOID METHOD: true
FRAGMENT LENGTH: 253
FRAGMENT LINE AVG SIZE: 36.142857142857146
DEPTHS:
2 3 3 3 2 1 1 
AREA: 15
AVG DEPTH: 2.142857142857143
NUMBER OF LINES IN FRAGMENT: 7
---REFACTORING_FINISH---
DESCRIPTION: Extract Method	private validateArray(array Object) : void extracted from public max(array double[]) : double in class org.apache.commons.lang3.math.NumberUtils
REFACTORING FILE DIFF URL: https://github.com/apache/commons-lang/commit/f5a83bb90cf7b318ac72823e6b99d01d060abe41/src/main/java/org/apache/commons/lang3/math/NumberUtils.java
REFACTORING URL: https://github.com/apache/commons-lang/blob/f5a83bb90cf7b318ac72823e6b99d01d060abe41/src/main/java/org/apache/commons/lang3/math/NumberUtils.java#L1054
DIRECTLY EXTRACTED OPERATION:
        if (array == null) {
            throw new IllegalArgumentException("The Array must not be null");
        } else if (Array.getLength(array) == 0) {
            throw new IllegalArgumentException("Array cannot be empty.");
        }
    }
     
PARAMS COUNT: 1
IS VOID METHOD: true
FRAGMENT LENGTH: 253
FRAGMENT LINE AVG SIZE: 36.142857142857146
DEPTHS:
2 3 3 3 2 1 1 
AREA: 15
AVG DEPTH: 2.142857142857143
NUMBER OF LINES IN FRAGMENT: 7
---REFACTORING_FINISH---
DESCRIPTION: Extract Method	private validateArray(array Object) : void extracted from public max(array float[]) : float in class org.apache.commons.lang3.math.NumberUtils
REFACTORING FILE DIFF URL: https://github.com/apache/commons-lang/commit/f5a83bb90cf7b318ac72823e6b99d01d060abe41/src/main/java/org/apache/commons/lang3/math/NumberUtils.java
REFACTORING URL: https://github.com/apache/commons-lang/blob/f5a83bb90cf7b318ac72823e6b99d01d060abe41/src/main/java/org/apache/commons/lang3/math/NumberUtils.java#L1054
DIRECTLY EXTRACTED OPERATION:
        if (array == null) {
            throw new IllegalArgumentException("The Array must not be null");
        } else if (Array.getLength(array) == 0) {
            throw new IllegalArgumentException("Array cannot be empty.");
        }
    }
     
PARAMS COUNT: 1
IS VOID METHOD: true
FRAGMENT LENGTH: 253
FRAGMENT LINE AVG SIZE: 36.142857142857146
DEPTHS:
2 3 3 3 2 1 1 
AREA: 15
AVG DEPTH: 2.142857142857143
NUMBER OF LINES IN FRAGMENT: 7
---REFACTORING_FINISH---
-----REFACTORINGS_END-----
COMMIT ID: 8fc7c1fe06e53a7fa48f26f2340326bc06185bc6
URL: https://github.com/apache/commons-lang/commit/8fc7c1fe06e53a7fa48f26f2340326bc06185bc6
DESCRIPTION: Extract Method	private applyRulesToString(c Calendar) : String extracted from public format(millis long) : String in class org.apache.commons.lang3.time.FastDatePrinter
REFACTORING FILE DIFF URL: https://github.com/apache/commons-lang/commit/8fc7c1fe06e53a7fa48f26f2340326bc06185bc6/src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java
REFACTORING URL: https://github.com/apache/commons-lang/blob/8fc7c1fe06e53a7fa48f26f2340326bc06185bc6/src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java#L402
DIRECTLY EXTRACTED OPERATION:
        return applyRules(c, new StringBuffer(mMaxLengthEstimate)).toString();
    }

PARAMS COUNT: 1
IS VOID METHOD: false
FRAGMENT LENGTH: 86
FRAGMENT LINE AVG SIZE: 28.666666666666668
DEPTHS:
1 1 1 
AREA: 3
AVG DEPTH: 1.0
NUMBER OF LINES IN FRAGMENT: 3
---REFACTORING_FINISH---
DESCRIPTION: Extract Method	private applyRulesToString(c Calendar) : String extracted from public format(date Date) : String in class org.apache.commons.lang3.time.FastDatePrinter
REFACTORING FILE DIFF URL: https://github.com/apache/commons-lang/commit/8fc7c1fe06e53a7fa48f26f2340326bc06185bc6/src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java
REFACTORING URL: https://github.com/apache/commons-lang/blob/8fc7c1fe06e53a7fa48f26f2340326bc06185bc6/src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java#L402
DIRECTLY EXTRACTED OPERATION:
        return applyRules(c, new StringBuffer(mMaxLengthEstimate)).toString();
    }

PARAMS COUNT: 1
IS VOID METHOD: false
FRAGMENT LENGTH: 86
FRAGMENT LINE AVG SIZE: 28.666666666666668
DEPTHS:
1 1 1 
AREA: 3
AVG DEPTH: 1.0
NUMBER OF LINES IN FRAGMENT: 3
---REFACTORING_FINISH---
DESCRIPTION: Extract Method	private newCalendar() : GregorianCalendar extracted from public format(millis long) : String in class org.apache.commons.lang3.time.FastDatePrinter
REFACTORING FILE DIFF URL: https://github.com/apache/commons-lang/commit/8fc7c1fe06e53a7fa48f26f2340326bc06185bc6/src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java
REFACTORING URL: https://github.com/apache/commons-lang/blob/8fc7c1fe06e53a7fa48f26f2340326bc06185bc6/src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java#L406
DIRECTLY EXTRACTED OPERATION:
        // hard code GregorianCalendar
        return new GregorianCalendar(mTimeZone, mLocale);
    }

IS VOID METHOD: false
FRAGMENT LENGTH: 104
FRAGMENT LINE AVG SIZE: 26.0
DEPTHS:
1 2 1 1 
AREA: 5
AVG DEPTH: 1.25
NUMBER OF LINES IN FRAGMENT: 4
---REFACTORING_FINISH---
DESCRIPTION: Extract Method	private newCalendar() : GregorianCalendar extracted from public format(date Date) : String in class org.apache.commons.lang3.time.FastDatePrinter
REFACTORING FILE DIFF URL: https://github.com/apache/commons-lang/commit/8fc7c1fe06e53a7fa48f26f2340326bc06185bc6/src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java
REFACTORING URL: https://github.com/apache/commons-lang/blob/8fc7c1fe06e53a7fa48f26f2340326bc06185bc6/src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java#L406
DIRECTLY EXTRACTED OPERATION:
        // hard code GregorianCalendar
        return new GregorianCalendar(mTimeZone, mLocale);
    }

IS VOID METHOD: false
FRAGMENT LENGTH: 104
FRAGMENT LINE AVG SIZE: 26.0
DEPTHS:
1 2 1 1 
AREA: 5
AVG DEPTH: 1.25
NUMBER OF LINES IN FRAGMENT: 4
---REFACTORING_FINISH---
DESCRIPTION: Extract Method	private newCalendar() : GregorianCalendar extracted from public format(date Date, buf StringBuffer) : StringBuffer in class org.apache.commons.lang3.time.FastDatePrinter
REFACTORING FILE DIFF URL: https://github.com/apache/commons-lang/commit/8fc7c1fe06e53a7fa48f26f2340326bc06185bc6/src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java
REFACTORING URL: https://github.com/apache/commons-lang/blob/8fc7c1fe06e53a7fa48f26f2340326bc06185bc6/src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java#L406
DIRECTLY EXTRACTED OPERATION:
        // hard code GregorianCalendar
        return new GregorianCalendar(mTimeZone, mLocale);
    }

IS VOID METHOD: false
FRAGMENT LENGTH: 104
FRAGMENT LINE AVG SIZE: 26.0
DEPTHS:
1 2 1 1 
AREA: 5
AVG DEPTH: 1.25
NUMBER OF LINES IN FRAGMENT: 4
---REFACTORING_FINISH---
-----REFACTORINGS_END-----
COMMIT ID: 8c87749695449aaac6fbc667f4b48bfe10b7baae
URL: https://github.com/apache/commons-lang/commit/8c87749695449aaac6fbc667f4b48bfe10b7baae
DESCRIPTION: Extract Method	private getLocaleSpecificStrategy(field int, definingCalendar Calendar) : Strategy extracted from private getStrategy(formatField String) : Strategy in class org.apache.commons.lang3.time.FastDateParser
REFACTORING FILE DIFF URL: https://github.com/apache/commons-lang/commit/8c87749695449aaac6fbc667f4b48bfe10b7baae/src/main/java/org/apache/commons/lang3/time/FastDateParser.java
REFACTORING URL: https://github.com/apache/commons-lang/blob/8c87749695449aaac6fbc667f4b48bfe10b7baae/src/main/java/org/apache/commons/lang3/time/FastDateParser.java#L522
DIRECTLY EXTRACTED OPERATION:
     * Construct a Strategy that parses a Text field
     * @param locale The Locale of the TimeZone to parse
     * @param field The Calendar field
     * @param definingCalendar The calendar to obtain the short and long values
     * @return a TextStrategy for the field and Locale
     */
    private Strategy getLocaleSpecificStrategy(int field, Calendar definingCalendar) {
    	ConcurrentMap<Locale,Strategy> cache = getCache(field);
    	Strategy strategy= cache.get(field);
        if(strategy==null) {
        	strategy= field==Calendar.ZONE_OFFSET
        			? new TimeZoneStrategy(locale)
        			: new TextStrategy(field, definingCalendar, locale);
            Strategy inCache= cache.putIfAbsent(locale, strategy);
            if(inCache!=null) {
                return inCache;
            }
        }
        return strategy;
    }

PARAMS COUNT: 2
IS VOID METHOD: false
FRAGMENT LENGTH: 851
FRAGMENT LINE AVG SIZE: 40.523809523809526
DEPTHS:
0 1 1 1 1 1 1 2 2 2 3 3 3 3 3 4 3 2 2 1 1 
AREA: 40
AVG DEPTH: 1.9047619047619047
NUMBER OF LINES IN FRAGMENT: 21
---REFACTORING_FINISH---
-----REFACTORINGS_END-----
COMMIT ID: 0120e9264d90e0ed6ad032871494093912a9dfb6
URL: https://github.com/apache/commons-lang/commit/0120e9264d90e0ed6ad032871494093912a9dfb6
DESCRIPTION: Extract Method	private testLocales(format String, eraBC boolean) : void extracted from public testLocales_Long_AD() : void in class org.apache.commons.lang3.time.FastDateParserTest
REFACTORING FILE DIFF URL: https://github.com/apache/commons-lang/commit/0120e9264d90e0ed6ad032871494093912a9dfb6/src/test/java/org/apache/commons/lang3/time/FastDateParserTest.java
REFACTORING URL: https://github.com/apache/commons-lang/blob/0120e9264d90e0ed6ad032871494093912a9dfb6/src/test/java/org/apache/commons/lang3/time/FastDateParserTest.java#L241
DIRECTLY EXTRACTED OPERATION:
                
        Calendar cal= Calendar.getInstance(GMT);
        cal.clear();
        cal.set(2003, 1, 10);
        if (eraBC) {
            cal.set(Calendar.ERA, GregorianCalendar.BC);
        }
        for(Locale locale : Locale.getAvailableLocales()) {
            SimpleDateFormat sdf = new SimpleDateFormat(format, locale);
            DateParser fdf = getInstance(format, locale);

            try {
                checkParse(locale, cal, sdf, fdf);
            } catch(ParseException ex) {
                // TODO: why do ja_JP_JP, hi_IN, th_TH, and th_TH_TH fail?
                System.out.println("Locale "+locale+ " failed with "+format+" era "+(eraBC?"BC":"AD")+"\n" + trimMessage(ex.toString()));
            }
        }
    }

PARAMS COUNT: 2
IS VOID METHOD: true
FRAGMENT LENGTH: 751
FRAGMENT LINE AVG SIZE: 37.55
DEPTHS:
1 2 2 2 2 3 2 2 3 3 3 3 4 4 4 4 3 2 1 1 
AREA: 51
AVG DEPTH: 2.55
NUMBER OF LINES IN FRAGMENT: 20
---REFACTORING_FINISH---
DESCRIPTION: Extract Method	private testLocales(format String, eraBC boolean) : void extracted from public testLocales_Long_BC() : void in class org.apache.commons.lang3.time.FastDateParserTest
REFACTORING FILE DIFF URL: https://github.com/apache/commons-lang/commit/0120e9264d90e0ed6ad032871494093912a9dfb6/src/test/java/org/apache/commons/lang3/time/FastDateParserTest.java
REFACTORING URL: https://github.com/apache/commons-lang/blob/0120e9264d90e0ed6ad032871494093912a9dfb6/src/test/java/org/apache/commons/lang3/time/FastDateParserTest.java#L241
DIRECTLY EXTRACTED OPERATION:
                
        Calendar cal= Calendar.getInstance(GMT);
        cal.clear();
        cal.set(2003, 1, 10);
        if (eraBC) {
            cal.set(Calendar.ERA, GregorianCalendar.BC);
        }
        for(Locale locale : Locale.getAvailableLocales()) {
            SimpleDateFormat sdf = new SimpleDateFormat(format, locale);
            DateParser fdf = getInstance(format, locale);

            try {
                checkParse(locale, cal, sdf, fdf);
            } catch(ParseException ex) {
                // TODO: why do ja_JP_JP, hi_IN, th_TH, and th_TH_TH fail?
                System.out.println("Locale "+locale+ " failed with "+format+" era "+(eraBC?"BC":"AD")+"\n" + trimMessage(ex.toString()));
            }
        }
    }

PARAMS COUNT: 2
IS VOID METHOD: true
FRAGMENT LENGTH: 751
FRAGMENT LINE AVG SIZE: 37.55
DEPTHS:
1 2 2 2 2 3 2 2 3 3 3 3 4 4 4 4 3 2 1 1 
AREA: 51
AVG DEPTH: 2.55
NUMBER OF LINES IN FRAGMENT: 20
---REFACTORING_FINISH---
DESCRIPTION: Extract Method	private testLocales(format String, eraBC boolean) : void extracted from public testLocales_Short_BC() : void in class org.apache.commons.lang3.time.FastDateParserTest
REFACTORING FILE DIFF URL: https://github.com/apache/commons-lang/commit/0120e9264d90e0ed6ad032871494093912a9dfb6/src/test/java/org/apache/commons/lang3/time/FastDateParserTest.java
REFACTORING URL: https://github.com/apache/commons-lang/blob/0120e9264d90e0ed6ad032871494093912a9dfb6/src/test/java/org/apache/commons/lang3/time/FastDateParserTest.java#L241
DIRECTLY EXTRACTED OPERATION:
                
        Calendar cal= Calendar.getInstance(GMT);
        cal.clear();
        cal.set(2003, 1, 10);
        if (eraBC) {
            cal.set(Calendar.ERA, GregorianCalendar.BC);
        }
        for(Locale locale : Locale.getAvailableLocales()) {
            SimpleDateFormat sdf = new SimpleDateFormat(format, locale);
            DateParser fdf = getInstance(format, locale);

            try {
                checkParse(locale, cal, sdf, fdf);
            } catch(ParseException ex) {
                // TODO: why do ja_JP_JP, hi_IN, th_TH, and th_TH_TH fail?
                System.out.println("Locale "+locale+ " failed with "+format+" era "+(eraBC?"BC":"AD")+"\n" + trimMessage(ex.toString()));
            }
        }
    }

PARAMS COUNT: 2
IS VOID METHOD: true
FRAGMENT LENGTH: 751
FRAGMENT LINE AVG SIZE: 37.55
DEPTHS:
1 2 2 2 2 3 2 2 3 3 3 3 4 4 4 4 3 2 1 1 
AREA: 51
AVG DEPTH: 2.55
NUMBER OF LINES IN FRAGMENT: 20
---REFACTORING_FINISH---
DESCRIPTION: Extract Method	private testLocales(format String, eraBC boolean) : void extracted from public testLocales_Short_AD() : void in class org.apache.commons.lang3.time.FastDateParserTest
REFACTORING FILE DIFF URL: https://github.com/apache/commons-lang/commit/0120e9264d90e0ed6ad032871494093912a9dfb6/src/test/java/org/apache/commons/lang3/time/FastDateParserTest.java
REFACTORING URL: https://github.com/apache/commons-lang/blob/0120e9264d90e0ed6ad032871494093912a9dfb6/src/test/java/org/apache/commons/lang3/time/FastDateParserTest.java#L241
DIRECTLY EXTRACTED OPERATION:
                
        Calendar cal= Calendar.getInstance(GMT);
        cal.clear();
        cal.set(2003, 1, 10);
        if (eraBC) {
            cal.set(Calendar.ERA, GregorianCalendar.BC);
        }
        for(Locale locale : Locale.getAvailableLocales()) {
            SimpleDateFormat sdf = new SimpleDateFormat(format, locale);
            DateParser fdf = getInstance(format, locale);

            try {
                checkParse(locale, cal, sdf, fdf);
            } catch(ParseException ex) {
                // TODO: why do ja_JP_JP, hi_IN, th_TH, and th_TH_TH fail?
                System.out.println("Locale "+locale+ " failed with "+format+" era "+(eraBC?"BC":"AD")+"\n" + trimMessage(ex.toString()));
            }
        }
    }

PARAMS COUNT: 2
IS VOID METHOD: true
FRAGMENT LENGTH: 751
FRAGMENT LINE AVG SIZE: 37.55
DEPTHS:
1 2 2 2 2 3 2 2 3 3 3 3 4 4 4 4 3 2 1 1 
AREA: 51
AVG DEPTH: 2.55
NUMBER OF LINES IN FRAGMENT: 20
---REFACTORING_FINISH---
-----REFACTORINGS_END-----
COMMIT ID: ebdef1b95710b44324d40fa1e67a1bc1b370ee81
URL: https://github.com/apache/commons-lang/commit/ebdef1b95710b44324d40fa1e67a1bc1b370ee81
DESCRIPTION: Extract Method	public parseDate(str String, locale Locale, parsePatterns String...) : Date extracted from public parseDate(str String, parsePatterns String...) : Date in class org.apache.commons.lang3.time.DateUtils
REFACTORING FILE DIFF URL: https://github.com/apache/commons-lang/commit/ebdef1b95710b44324d40fa1e67a1bc1b370ee81/src/main/java/org/apache/commons/lang3/time/DateUtils.java
REFACTORING URL: https://github.com/apache/commons-lang/blob/ebdef1b95710b44324d40fa1e67a1bc1b370ee81/src/main/java/org/apache/commons/lang3/time/DateUtils.java#L271
DIRECTLY EXTRACTED OPERATION:
     * <p>Parses a string representing a date by trying a variety of different parsers,
     * using the default date format symbols for the given locale.</p>
     * 
     * <p>The parse will try each parse pattern in turn.
     * A parse is only deemed successful if it parses the whole of the input string.
     * If no parse patterns match, a ParseException is thrown.</p>
     * The parser will be lenient toward the parsed date.
     * 
     * @param str  the date to parse, not null
     * @param locale the locale whose date format symbols should be used. If <code>null</code>,
     * the system locale is used (as per {@link #parseDate(String, String...)}).
     * @param parsePatterns  the date format patterns to use, see SimpleDateFormat, not null
     * @return the parsed date
     * @throws IllegalArgumentException if the date string or pattern array is null
     * @throws ParseException if none of the date patterns were suitable (or there were none)
     * @since 3.2
     */
    public static Date parseDate(String str, Locale locale, String... parsePatterns) throws ParseException {
        return parseDateWithLeniency(str, locale, parsePatterns, true);
    }    

PARAMS COUNT: 3
IS VOID METHOD: false
FRAGMENT LENGTH: 1186
FRAGMENT LINE AVG SIZE: 56.476190476190474
DEPTHS:
0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 2 1 1 
AREA: 21
AVG DEPTH: 1.0
NUMBER OF LINES IN FRAGMENT: 21
---REFACTORING_FINISH---
DESCRIPTION: Extract Method	public parseDateStrictly(str String, locale Locale, parsePatterns String...) : Date extracted from public parseDateStrictly(str String, parsePatterns String...) : Date in class org.apache.commons.lang3.time.DateUtils
REFACTORING FILE DIFF URL: https://github.com/apache/commons-lang/commit/ebdef1b95710b44324d40fa1e67a1bc1b370ee81/src/main/java/org/apache/commons/lang3/time/DateUtils.java
REFACTORING URL: https://github.com/apache/commons-lang/blob/ebdef1b95710b44324d40fa1e67a1bc1b370ee81/src/main/java/org/apache/commons/lang3/time/DateUtils.java#L313
DIRECTLY EXTRACTED OPERATION:
     * <p>Parses a string representing a date by trying a variety of different parsers,
     * using the default date format symbols for the given locale..</p>
     * 
     * <p>The parse will try each parse pattern in turn.
     * A parse is only deemed successful if it parses the whole of the input string.
     * If no parse patterns match, a ParseException is thrown.</p>
     * The parser parses strictly - it does not allow for dates such as "February 942, 1996". 
     * 
     * @param str  the date to parse, not null
     * @param locale the locale whose date format symbols should be used. If <code>null</code>,
     * the system locale is used (as per {@link #parseDateStrictly(String, String...)}).
     * @param parsePatterns  the date format patterns to use, see SimpleDateFormat, not null
     * @return the parsed date
     * @throws IllegalArgumentException if the date string or pattern array is null
     * @throws ParseException if none of the date patterns were suitable
     * @since 3.2
     */
    public static Date parseDateStrictly(String str, Locale locale, String... parsePatterns) throws ParseException {
        return parseDateWithLeniency(str, null, parsePatterns, false);
    }    

PARAMS COUNT: 3
IS VOID METHOD: false
FRAGMENT LENGTH: 1218
FRAGMENT LINE AVG SIZE: 58.0
DEPTHS:
0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 2 1 1 
AREA: 21
AVG DEPTH: 1.0
NUMBER OF LINES IN FRAGMENT: 21
---REFACTORING_FINISH---
-----REFACTORINGS_END-----
COMMIT ID: feb980a6398012627bf6dfb7fddb92be3fe76ed4
URL: https://github.com/apache/commons-lang/commit/feb980a6398012627bf6dfb7fddb92be3fe76ed4
DESCRIPTION: Extract Method	private asEnum(enumClass Class<E>) : Class<E> extracted from private checkBitVectorable(enumClass Class<E>) : Class<E> in class org.apache.commons.lang3.EnumUtils
REFACTORING FILE DIFF URL: https://github.com/apache/commons-lang/commit/feb980a6398012627bf6dfb7fddb92be3fe76ed4/src/main/java/org/apache/commons/lang3/EnumUtils.java
REFACTORING URL: https://github.com/apache/commons-lang/blob/feb980a6398012627bf6dfb7fddb92be3fe76ed4/src/main/java/org/apache/commons/lang3/EnumUtils.java#L297
DIRECTLY EXTRACTED OPERATION:
     * Validate {@code enumClass}.
     * @param <E> the type of the enumeration
     * @param enumClass to check
     * @return {@code enumClass}
     * @throws NullPointerException if {@code enumClass} is {@code null}
     * @throws IllegalArgumentException if {@code enumClass} is not an enum class
     * @since 3.2
     */
    private static <E extends Enum<E>> Class<E> asEnum(Class<E> enumClass) {
        Validate.notNull(enumClass, ENUM_CLASS_MUST_BE_DEFINED);
        Validate.isTrue(enumClass.isEnum(), S_DOES_NOT_SEEM_TO_BE_AN_ENUM_TYPE, enumClass);
        return enumClass;
    }
}
PARAMS COUNT: 1
IS VOID METHOD: false
FRAGMENT LENGTH: 596
FRAGMENT LINE AVG SIZE: 42.57142857142857
DEPTHS:
0 1 1 1 1 1 1 1 1 2 2 2 1 0 
AREA: 15
AVG DEPTH: 1.0714285714285714
NUMBER OF LINES IN FRAGMENT: 14
---REFACTORING_FINISH---
DESCRIPTION: Extract Method	public processBitVectors(enumClass Class<E>, values long...) : EnumSet<E> extracted from public processBitVector(enumClass Class<E>, value long) : EnumSet<E> in class org.apache.commons.lang3.EnumUtils
REFACTORING FILE DIFF URL: https://github.com/apache/commons-lang/commit/feb980a6398012627bf6dfb7fddb92be3fe76ed4/src/main/java/org/apache/commons/lang3/EnumUtils.java
REFACTORING URL: https://github.com/apache/commons-lang/blob/feb980a6398012627bf6dfb7fddb92be3fe76ed4/src/main/java/org/apache/commons/lang3/EnumUtils.java#L254
DIRECTLY EXTRACTED OPERATION:
     * <p>Convert a {@code long[]} created by {@link EnumUtils#generateBitVectors} into the set of
     * enum values that it represents.</p>
     *
     * <p>If you store this value, beware any changes to the enum that would affect ordinal values.</p>
     * @param enumClass the class of the enum we are working with, not {@code null}
     * @param values     the long[] bearing the representation of a set of enum values, least significant digits rightmost, not {@code null}
     * @param <E>       the type of the enumeration
     * @return a set of enum values
     * @throws NullPointerException if {@code enumClass} is {@code null}
     * @throws IllegalArgumentException if {@code enumClass} is not an enum class
     * @since 3.2
     */
    public static <E extends Enum<E>> EnumSet<E> processBitVectors(Class<E> enumClass, long... values) {
        final EnumSet<E> results = EnumSet.noneOf(asEnum(enumClass));
        values = ArrayUtils.clone(Validate.notNull(values));
        ArrayUtils.reverse(values);
        for (E constant : enumClass.getEnumConstants()) {
            int block = constant.ordinal() / Long.SIZE;
            if (block < values.length && (values[block] & 1 << (constant.ordinal() % Long.SIZE)) != 0) {
                results.add(constant);
            }
        }
        return results;
    }

PARAMS COUNT: 2
IS VOID METHOD: false
FRAGMENT LENGTH: 1332
FRAGMENT LINE AVG SIZE: 53.28
DEPTHS:
0 1 1 1 1 1 1 1 1 1 1 1 1 2 2 2 2 3 3 4 3 2 2 1 1 
AREA: 39
AVG DEPTH: 1.56
NUMBER OF LINES IN FRAGMENT: 25
---REFACTORING_FINISH---
-----REFACTORINGS_END-----
COMMIT ID: cc340ad2eb6a783f6abe8d02f2c32bb02b01505c
URL: https://github.com/apache/commons-lang/commit/cc340ad2eb6a783f6abe8d02f2c32bb02b01505c
DESCRIPTION: Extract Method	public getPatternForStyle(dateStyle Integer, timeStyle Integer, locale Locale) : String extracted from public getDateTimeInstance(dateStyle Integer, timeStyle Integer, timeZone TimeZone, locale Locale) : F in class org.apache.commons.lang3.time.FormatCache
REFACTORING FILE DIFF URL: https://github.com/apache/commons-lang/commit/cc340ad2eb6a783f6abe8d02f2c32bb02b01505c/src/main/java/org/apache/commons/lang3/time/FormatCache.java
REFACTORING URL: https://github.com/apache/commons-lang/blob/cc340ad2eb6a783f6abe8d02f2c32bb02b01505c/src/main/java/org/apache/commons/lang3/time/FormatCache.java#L127
DIRECTLY EXTRACTED OPERATION:
     * <p>Gets a date/time format for the specified styles and locale.</p>
     * 
     * @param dateStyle  date style: FULL, LONG, MEDIUM, or SHORT, null indicates no date in format
     * @param timeStyle  time style: FULL, LONG, MEDIUM, or SHORT, null indicates no time in format
     * @param locale  The non-null locale of the desired format
     * @return a localized standard date/time format
     * @throws IllegalArgumentException if the Locale has no date/time pattern defined
     */
    public static String getPatternForStyle(Integer dateStyle, Integer timeStyle, Locale locale) {
        MultipartKey key = new MultipartKey(dateStyle, timeStyle, locale);

        String pattern = cDateTimeInstanceCache.get(key);
        if (pattern == null) {
            try {
                DateFormat formatter;
                if (dateStyle == null) {
                    formatter = DateFormat.getTimeInstance(timeStyle, locale);                    
                }
                else if (timeStyle == null) {
                    formatter = DateFormat.getDateInstance(dateStyle, locale);                    
                }
                else {
                    formatter = DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale);
                }
                pattern = ((SimpleDateFormat)formatter).toPattern();
                String previous = cDateTimeInstanceCache.putIfAbsent(key, pattern);
                if (previous != null) {
                    // even though it doesn't matter if another thread put the pattern
                    // it's still good practice to return the String instance that is
                    // actually in the ConcurrentMap
                    pattern= previous;
                }
            } catch (ClassCastException ex) {
                throw new IllegalArgumentException("No date time pattern for locale: " + locale);
            }
        }
        return pattern;
    }

PARAMS COUNT: 3
IS VOID METHOD: false
FRAGMENT LENGTH: 1946
FRAGMENT LINE AVG SIZE: 49.8974358974359
DEPTHS:
0 1 1 1 1 1 1 1 1 2 2 2 2 3 4 4 5 4 4 5 4 4 5 4 4 4 4 5 5 5 5 4 4 4 3 2 2 1 1 
AREA: 115
AVG DEPTH: 2.948717948717949
NUMBER OF LINES IN FRAGMENT: 39
---REFACTORING_FINISH---
-----REFACTORINGS_END-----
COMMIT ID: 37b9565b26fa6a3c1224dd95af1e821bc30789e9
URL: https://github.com/apache/commons-lang/commit/37b9565b26fa6a3c1224dd95af1e821bc30789e9
DESCRIPTION: Extract Method	private checkBitVectorable(enumClass Class<E>) : Class<E> extracted from public processBitVector(enumClass Class<E>, value long) : EnumSet<E> in class org.apache.commons.lang3.EnumUtils
REFACTORING FILE DIFF URL: https://github.com/apache/commons-lang/commit/37b9565b26fa6a3c1224dd95af1e821bc30789e9/src/main/java/org/apache/commons/lang3/EnumUtils.java
REFACTORING URL: https://github.com/apache/commons-lang/blob/37b9565b26fa6a3c1224dd95af1e821bc30789e9/src/main/java/org/apache/commons/lang3/EnumUtils.java#L189
DIRECTLY EXTRACTED OPERATION:
     * Validate that {@code enumClass} is compatible with representation in a {@code long}.
     * @param <E> the type of the enumeration
     * @param enumClass to check
     * @return {@code enumClass}
     * @throws NullPointerException if {@code enumClass} is {@code null}
     * @throws IllegalArgumentException if {@code enumClass} is not an enum class or has more than 64 values
     * @since 3.0.1
     */
    private static <E extends Enum<E>> Class<E> checkBitVectorable(Class<E> enumClass) {
        Validate.notNull(enumClass, "EnumClass must be defined.");

        final E[] constants = enumClass.getEnumConstants();
        Validate.isTrue(constants != null, "%s does not seem to be an Enum type", enumClass);
        Validate.isTrue(constants.length <= Long.SIZE, "Cannot store %s %s values in %s bits", constants.length,
            enumClass.getSimpleName(), Long.SIZE);

        return enumClass;
    }
}
PARAMS COUNT: 1
IS VOID METHOD: false
FRAGMENT LENGTH: 924
FRAGMENT LINE AVG SIZE: 48.63157894736842
DEPTHS:
0 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 1 0 
AREA: 25
AVG DEPTH: 1.3157894736842106
NUMBER OF LINES IN FRAGMENT: 19
---REFACTORING_FINISH---
-----REFACTORINGS_END-----
COMMIT ID: 0ad6c30b0ed57cd0a5a3c18725926570b4032db8
URL: https://github.com/apache/commons-lang/commit/0ad6c30b0ed57cd0a5a3c18725926570b4032db8
DESCRIPTION: Extract Method	public isAfter(element T) : boolean extracted from public elementBefore(element T) : boolean in class org.apache.commons.lang3.Range
REFACTORING FILE DIFF URL: https://github.com/apache/commons-lang/commit/0ad6c30b0ed57cd0a5a3c18725926570b4032db8/src/main/java/org/apache/commons/lang3/Range.java
REFACTORING URL: https://github.com/apache/commons-lang/blob/0ad6c30b0ed57cd0a5a3c18725926570b4032db8/src/main/java/org/apache/commons/lang3/Range.java#L226
DIRECTLY EXTRACTED OPERATION:
     * <p>Checks whether this range is after the specified element.</p>
     *
     * @param element  the element to check for, null returns false
     * @return true if this range is entirely after the specified element
     */
    public boolean isAfter(T element) {
        if (element == null) {
            return false;
        }
        return comparator.compare(element, minimum) < 0;
    }

PARAMS COUNT: 1
IS VOID METHOD: false
FRAGMENT LENGTH: 400
FRAGMENT LINE AVG SIZE: 33.333333333333336
DEPTHS:
0 1 1 1 1 1 2 3 2 2 1 1 
AREA: 16
AVG DEPTH: 1.3333333333333333
NUMBER OF LINES IN FRAGMENT: 12
---REFACTORING_FINISH---
DESCRIPTION: Extract Method	public isBefore(element T) : boolean extracted from public elementAfter(element T) : boolean in class org.apache.commons.lang3.Range
REFACTORING FILE DIFF URL: https://github.com/apache/commons-lang/commit/0ad6c30b0ed57cd0a5a3c18725926570b4032db8/src/main/java/org/apache/commons/lang3/Range.java
REFACTORING URL: https://github.com/apache/commons-lang/blob/0ad6c30b0ed57cd0a5a3c18725926570b4032db8/src/main/java/org/apache/commons/lang3/Range.java#L265
DIRECTLY EXTRACTED OPERATION:
     * <p>Checks whether this range is before the specified element.</p>
     *
     * @param element  the element to check for, null returns false
     * @return true if this range is entirely before the specified element
     */
    public boolean isBefore(T element) {
        if (element == null) {
            return false;
        }
        return comparator.compare(element, maximum) > 0;
    }

PARAMS COUNT: 1
IS VOID METHOD: false
FRAGMENT LENGTH: 403
FRAGMENT LINE AVG SIZE: 33.583333333333336
DEPTHS:
0 1 1 1 1 1 2 3 2 2 1 1 
AREA: 16
AVG DEPTH: 1.3333333333333333
NUMBER OF LINES IN FRAGMENT: 12
---REFACTORING_FINISH---
-----REFACTORINGS_END-----
COMMIT ID: be6641bd999e06cf604a262057ea2caa925e068e
URL: https://github.com/apache/commons-lang/commit/be6641bd999e06cf604a262057ea2caa925e068e
DESCRIPTION: Extract Method	private initializeTransientFields(listenerInterface Class<L>, classLoader ClassLoader) : void extracted from public EventListenerSupport(listenerInterface Class<L>, classLoader ClassLoader) in class org.apache.commons.lang3.event.EventListenerSupport
REFACTORING FILE DIFF URL: https://github.com/apache/commons-lang/commit/be6641bd999e06cf604a262057ea2caa925e068e/src/main/java/org/apache/commons/lang3/event/EventListenerSupport.java
REFACTORING URL: https://github.com/apache/commons-lang/blob/be6641bd999e06cf604a262057ea2caa925e068e/src/main/java/org/apache/commons/lang3/event/EventListenerSupport.java#L276
DIRECTLY EXTRACTED OPERATION:
     * Initialize transient fields.
     * @param listenerInterface
     * @param classLoader
     */
    private void initializeTransientFields(Class<L> listenerInterface, ClassLoader classLoader) {
        createProxy(listenerInterface, classLoader);
        @SuppressWarnings("unchecked")
        L[] array = (L[]) Array.newInstance(listenerInterface, 0);
        this.prototypeArray = array;
    }

PARAMS COUNT: 2
IS VOID METHOD: true
FRAGMENT LENGTH: 403
FRAGMENT LINE AVG SIZE: 36.63636363636363
DEPTHS:
0 1 1 1 1 2 2 2 2 1 1 
AREA: 14
AVG DEPTH: 1.2727272727272727
NUMBER OF LINES IN FRAGMENT: 11
---REFACTORING_FINISH---
-----REFACTORINGS_END-----
COMMIT ID: b24ecd60fe9517bef1d6342e479e9bc3d85ef692
URL: https://github.com/apache/commons-lang/commit/b24ecd60fe9517bef1d6342e479e9bc3d85ef692
DESCRIPTION: Extract Method	package isJavaVersionMatch(version String, versionPrefix String) : boolean extracted from private getJavaVersionMatches(versionPrefix String) : boolean in class org.apache.commons.lang3.SystemUtils
REFACTORING FILE DIFF URL: https://github.com/apache/commons-lang/commit/b24ecd60fe9517bef1d6342e479e9bc3d85ef692/src/main/java/org/apache/commons/lang3/SystemUtils.java
REFACTORING URL: https://github.com/apache/commons-lang/blob/b24ecd60fe9517bef1d6342e479e9bc3d85ef692/src/main/java/org/apache/commons/lang3/SystemUtils.java#L1559
DIRECTLY EXTRACTED OPERATION:
     * <p>
     * Decides if the Java version matches.
     * </p>
     * <p>
     * This method is package private instead of private to support unit test invocation.
     * </p>
     * 
     * @param version
     *            the actual Java version
     * @param versionPrefix
     *            the prefix for the expected Java version
     * @return true if matches, or false if not or can't determine
     */
    static boolean isJavaVersionMatch(String version, String versionPrefix) {
        if (version == null) {
            return false;
        }
        return version.startsWith(versionPrefix);
    }

PARAMS COUNT: 2
IS VOID METHOD: false
FRAGMENT LENGTH: 616
FRAGMENT LINE AVG SIZE: 30.8
DEPTHS:
0 1 1 1 1 1 1 1 1 1 1 1 1 1 2 3 2 2 1 1 
AREA: 24
AVG DEPTH: 1.2
NUMBER OF LINES IN FRAGMENT: 20
---REFACTORING_FINISH---
DESCRIPTION: Extract Method	package isOSMatch(osName String, osVersion String, osNamePrefix String, osVersionPrefix String) : boolean extracted from private getOSMatches(osNamePrefix String, osVersionPrefix String) : boolean in class org.apache.commons.lang3.SystemUtils
REFACTORING FILE DIFF URL: https://github.com/apache/commons-lang/commit/b24ecd60fe9517bef1d6342e479e9bc3d85ef692/src/main/java/org/apache/commons/lang3/SystemUtils.java
REFACTORING URL: https://github.com/apache/commons-lang/blob/b24ecd60fe9517bef1d6342e479e9bc3d85ef692/src/main/java/org/apache/commons/lang3/SystemUtils.java#L1580
DIRECTLY EXTRACTED OPERATION:
     * Decides if the operating system matches.
     * <p>
     * This method is package private instead of private to support unit test invocation.
     * </p>
     * 
     * @param osName
     *            the actual OS name
     * @param osVersion
     *            the actual OS version
     * @param osNamePrefix
     *            the prefix for the expected OS name
     * @param osVersionPrefix
     *            the prefix for the expected OS version
     * @return true if matches, or false if not or can't determine
     */
    static boolean isOSMatch(String osName, String osVersion, String osNamePrefix, String osVersionPrefix) {
        if (osName == null || osVersion == null) {
            return false;
        }
        return osName.startsWith(osNamePrefix) && osVersion.startsWith(osVersionPrefix);
    }

PARAMS COUNT: 4
IS VOID METHOD: false
FRAGMENT LENGTH: 826
FRAGMENT LINE AVG SIZE: 37.54545454545455
DEPTHS:
0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 2 3 2 2 1 1 
AREA: 26
AVG DEPTH: 1.1818181818181819
NUMBER OF LINES IN FRAGMENT: 22
---REFACTORING_FINISH---
-----REFACTORINGS_END-----
COMMIT ID: 1a433d2ec7b5b85b541e213b0d1e69b9e91a56b9
URL: https://github.com/apache/commons-lang/commit/1a433d2ec7b5b85b541e213b0d1e69b9e91a56b9
DESCRIPTION: Extract Method	private parseDateWithLeniency(str String, parsePatterns String[], lenient boolean) : Date extracted from public parseDate(str String, parsePatterns String[]) : Date in class org.apache.commons.lang3.time.DateUtils
REFACTORING FILE DIFF URL: https://github.com/apache/commons-lang/commit/1a433d2ec7b5b85b541e213b0d1e69b9e91a56b9/src/java/org/apache/commons/lang3/time/DateUtils.java
REFACTORING URL: https://github.com/apache/commons-lang/blob/1a433d2ec7b5b85b541e213b0d1e69b9e91a56b9/src/java/org/apache/commons/lang3/time/DateUtils.java#L310
DIRECTLY EXTRACTED OPERATION:
			boolean lenient) throws ParseException {
        if (str == null || parsePatterns == null) {
            throw new IllegalArgumentException("Date and Patterns must not be null");
        }
        
        SimpleDateFormat parser = null;
        ParsePosition pos = new ParsePosition(0);
        for (int i = 0; i < parsePatterns.length; i++) {

            String pattern = parsePatterns[i];

            // LANG-530 - need to make sure 'ZZ' output doesn't get passed to SimpleDateFormat
            if (parsePatterns[i].endsWith("ZZ")) {
                pattern = pattern.substring(0, pattern.length() - 1);
            }
            
            if (i == 0) {
                parser = new SimpleDateFormat(pattern);
                parser.setLenient(lenient);
            } else {
                parser.applyPattern(pattern); // cannot be null if i != 0
            }
            pos.setIndex(0);

            String str2 = str;
            // LANG-530 - need to make sure 'ZZ' output doesn't hit SimpleDateFormat as it will ParseException
            if (parsePatterns[i].endsWith("ZZ")) {
                str2 = str.replaceAll("([-+][0-9][0-9]):([0-9][0-9])$", "$1$2"); 
            }

            Date date = parser.parse(str2, pos);
            if (date != null && pos.getIndex() == str2.length()) {
                return date;
            }
        }
        throw new ParseException("Unable to parse the date: " + str, -1);
    }

PARAMS COUNT: 3
IS VOID METHOD: false
FRAGMENT LENGTH: 1445
FRAGMENT LINE AVG SIZE: 38.026315789473685
DEPTHS:
1 2 3 2 2 2 2 2 3 3 3 3 3 4 3 3 3 4 4 4 4 3 3 3 3 3 3 4 3 3 3 3 4 3 2 2 1 1 
AREA: 107
AVG DEPTH: 2.8157894736842106
---REFACTORING_FINISH---
-----REFACTORINGS_END-----
COMMIT ID: 425dcadca5c799e632017f4dd9d2d159b99e580d
URL: https://github.com/apache/commons-lang/commit/425dcadca5c799e632017f4dd9d2d159b99e580d
DESCRIPTION: Extract Method	private ordinalIndexOf(str String, searchStr String, ordinal int, lastIndex boolean) : int extracted from public ordinalIndexOf(str String, searchStr String, ordinal int) : int in class org.apache.commons.lang3.StringUtils
REFACTORING FILE DIFF URL: https://github.com/apache/commons-lang/commit/425dcadca5c799e632017f4dd9d2d159b99e580d/src/java/org/apache/commons/lang3/StringUtils.java
REFACTORING URL: https://github.com/apache/commons-lang/blob/425dcadca5c799e632017f4dd9d2d159b99e580d/src/java/org/apache/commons/lang3/StringUtils.java#L852
DIRECTLY EXTRACTED OPERATION:
        if (str == null || searchStr == null || ordinal <= 0) {
            return INDEX_NOT_FOUND;
        }
        if (searchStr.length() == 0) {
            return lastIndex ? str.length() : 0;
        }
        int found = 0;
        int index = lastIndex ? str.length() : INDEX_NOT_FOUND;
        do {
            if(lastIndex) {
                index = str.lastIndexOf(searchStr, index - 1);
            } else {
                index = str.indexOf(searchStr, index + 1);
            }
            if (index < 0) {
                return index;
            }
            found++;
        } while (found < ordinal);
        return index;
    }

PARAMS COUNT: 4
IS VOID METHOD: false
FRAGMENT LENGTH: 651
FRAGMENT LINE AVG SIZE: 29.59090909090909
DEPTHS:
2 3 2 2 3 2 2 2 2 3 4 4 4 3 3 4 3 3 2 2 1 1 
AREA: 57
AVG DEPTH: 2.590909090909091
---REFACTORING_FINISH---
-----REFACTORINGS_END-----
COMMIT ID: e51cf4380efe63a1da7d42ab57535ddd695c690f
URL: https://github.com/apache/commons-lang/commit/e51cf4380efe63a1da7d42ab57535ddd695c690f
DESCRIPTION: Extract Method	public noNullElements(array T[], message String, values Object...) : T[] extracted from public noNullElements(array T[]) : T[] in class org.apache.commons.lang.Validate
REFACTORING FILE DIFF URL: https://github.com/apache/commons-lang/commit/e51cf4380efe63a1da7d42ab57535ddd695c690f/src/java/org/apache/commons/lang/Validate.java
REFACTORING URL: https://github.com/apache/commons-lang/blob/e51cf4380efe63a1da7d42ab57535ddd695c690f/src/java/org/apache/commons/lang/Validate.java#L495
DIRECTLY EXTRACTED OPERATION:
     * <p>Validate that the specified argument array is neither 
     * <code>null</code> nor contains any elements that are <code>null</code>;
     * otherwise throwing an exception with the specified message.
     *
     * <pre>Validate.noNullElements(myArray, "The array contain null at position %d");</pre>
     * 
     * <p>If the array is <code>null</code>, then the message in the exception 
     * is &quot;The validated object is null&quot;.</p>
     * 
     * <p>If the array has a <code>null</code> element, then the iteration 
     * index of the invalid element is appended to the <code>values</code> 
     * argument.</p>
     * 
     * @param <T> the array type
     * @param array the array to check
     * @return the validated array (never <code>null</code> method for chaining)
     * @throws NullPointerException if the array is <code>null</code>
     * @throws IllegalArgumentException if an element is <code>null</code>
     * @see #noNullElements(Object[])
     */
    public static <T> T[] noNullElements(T[] array, String message, Object... values) {
        Validate.notNull(array);
        for (int i = 0; i < array.length; i++) {
            if (array[i] == null) {
                Object[] values2 = ArrayUtils.add(values, i);
                throw new IllegalArgumentException(String.format(message, values2));
            }
        }
        return array;
    }

PARAMS COUNT: 3
IS VOID METHOD: false
FRAGMENT LENGTH: 1394
FRAGMENT LINE AVG SIZE: 44.96774193548387
DEPTHS:
0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 2 2 3 4 4 3 2 2 1 1 
AREA: 44
AVG DEPTH: 1.4193548387096775
---REFACTORING_FINISH---
DESCRIPTION: Extract Method	public noNullElements(collection T, message String, values Object...) : T extracted from public noNullElements(collection T) : T in class org.apache.commons.lang.Validate
REFACTORING FILE DIFF URL: https://github.com/apache/commons-lang/commit/e51cf4380efe63a1da7d42ab57535ddd695c690f/src/java/org/apache/commons/lang/Validate.java
REFACTORING URL: https://github.com/apache/commons-lang/blob/e51cf4380efe63a1da7d42ab57535ddd695c690f/src/java/org/apache/commons/lang/Validate.java#L555
DIRECTLY EXTRACTED OPERATION:
     * <p>Validate that the specified argument collection is neither 
     * <code>null</code> nor contains any elements that are <code>null</code>;
     * otherwise throwing an exception with the specified message.
     *
     * <pre>Validate.noNullElements(myCollection, "The collection contains null at position %d");</pre>
     * 
     * <p>If the collection is <code>null</code>, then the message in the exception 
     * is &quot;The validated object is null&quot;.</p>
     * 
     * <p>If the collection has a <code>null</code> element, then the iteration 
     * index of the invalid element is appended to the <code>values</code> 
     * argument.</p>
     *
     * @param <T> the collection type
     * @param collection the collection to check
     * @return the validated collection (never <code>null</code> method for chaining)
     * @throws NullPointerException if the array is <code>null</code>
     * @throws IllegalArgumentException if an element is <code>null</code>
     * @see #noNullElements(Collection, String, Object...)
     */
    public static <T extends Collection<?>> T noNullElements(T collection, String message, Object... values) {
        Validate.notNull(collection);
        int i = 0;
        for (Iterator<?> it = collection.iterator(); it.hasNext(); i++) {
            if (it.next() == null) {
                Object[] values2 = ArrayUtils.addAll(values, i);
                throw new IllegalArgumentException(String.format(message, values2));
            }
        }
        return collection;
    }

PARAMS COUNT: 3
IS VOID METHOD: false
FRAGMENT LENGTH: 1541
FRAGMENT LINE AVG SIZE: 48.15625
DEPTHS:
0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 2 2 2 3 4 4 3 2 2 1 1 
AREA: 46
AVG DEPTH: 1.4375
---REFACTORING_FINISH---
-----REFACTORINGS_END-----
COMMIT ID: 2e165be12708f14dba7e51e4e16ebe4ff93301fb
URL: https://github.com/apache/commons-lang/commit/2e165be12708f14dba7e51e4e16ebe4ff93301fb
DESCRIPTION: Extract Method	private getAllInterfaces(cls Class<?>, interfacesFound HashSet<Class<?>>) : void extracted from public getAllInterfaces(cls Class<?>) : List<Class<?>> in class org.apache.commons.lang.ClassUtils
REFACTORING FILE DIFF URL: https://github.com/apache/commons-lang/commit/2e165be12708f14dba7e51e4e16ebe4ff93301fb/src/java/org/apache/commons/lang/ClassUtils.java
REFACTORING URL: https://github.com/apache/commons-lang/blob/2e165be12708f14dba7e51e4e16ebe4ff93301fb/src/java/org/apache/commons/lang/ClassUtils.java#L296
DIRECTLY EXTRACTED OPERATION:
        while (cls != null) {
            Class<?>[] interfaces = cls.getInterfaces();

            for (Class<?> i : interfaces) {
                if (interfacesFound.add(i)) {
                    getAllInterfaces(i, interfacesFound);
                }
            }

            cls = cls.getSuperclass();
         }
     }

PARAMS COUNT: 2
IS VOID METHOD: true
FRAGMENT LENGTH: 327
FRAGMENT LINE AVG SIZE: 25.153846153846153
DEPTHS:
2 3 3 3 4 5 4 3 3 3 2 1 1 
AREA: 37
AVG DEPTH: 2.8461538461538463
---REFACTORING_FINISH---
-----REFACTORINGS_END-----
COMMIT ID: a4325e55597da54e3400ac5704f4437d637771d3
URL: https://github.com/apache/commons-lang/commit/a4325e55597da54e3400ac5704f4437d637771d3
DESCRIPTION: Extract Method	private initAvailableLocaleSet() : void extracted from public availableLocaleSet() : Set<Locale> in class org.apache.commons.lang.LocaleUtils
REFACTORING FILE DIFF URL: https://github.com/apache/commons-lang/commit/a4325e55597da54e3400ac5704f4437d637771d3/src/java/org/apache/commons/lang/LocaleUtils.java
REFACTORING URL: https://github.com/apache/commons-lang/blob/a4325e55597da54e3400ac5704f4437d637771d3/src/java/org/apache/commons/lang/LocaleUtils.java#L231
DIRECTLY EXTRACTED OPERATION:
     * Initializes the availableLocaleSet. It is separate from availableLocaleSet() 
     * to avoid the synchronized block affecting normal use, yet synchronized and 
     * lazy loading to avoid a static block affecting other methods in this class. 
     */
    private static synchronized void initAvailableLocaleSet() {
        if(cAvailableLocaleSet == null) {
            cAvailableLocaleSet = Collections.unmodifiableSet( new HashSet<Locale>(availableLocaleList()) );
        }
    }

IS VOID METHOD: true
FRAGMENT LENGTH: 492
FRAGMENT LINE AVG SIZE: 49.2
DEPTHS:
0 1 1 1 1 2 3 2 1 1 
AREA: 13
AVG DEPTH: 1.3
---REFACTORING_FINISH---
-----REFACTORINGS_END-----
COMMIT ID: cb8a0d43eade243f6bcfb391bb5865b0d49366e0
URL: https://github.com/apache/commons-lang/commit/cb8a0d43eade243f6bcfb391bb5865b0d49366e0
DESCRIPTION: Extract Method	public getNanoTime() : long extracted from public getTime() : long in class org.apache.commons.lang.time.StopWatch
REFACTORING FILE DIFF URL: https://github.com/apache/commons-lang/commit/cb8a0d43eade243f6bcfb391bb5865b0d49366e0/src/java/org/apache/commons/lang/time/StopWatch.java
REFACTORING URL: https://github.com/apache/commons-lang/blob/cb8a0d43eade243f6bcfb391bb5865b0d49366e0/src/java/org/apache/commons/lang/time/StopWatch.java#L269
DIRECTLY EXTRACTED OPERATION:
     * <p>
     * Get the time on the stopwatch in nanoseconds.
     * </p>
     * 
     * <p>
     * This is either the time between the start and the moment this method is called, or the amount of time between
     * start and stop.
     * </p>
     * 
     * @return the time in nanoseconds
     * @since 3.0
     */
    public long getNanoTime() {
        if (this.runningState == STATE_STOPPED || this.runningState == STATE_SUSPENDED) {
            return this.stopTime - this.startTime;
        } else if (this.runningState == STATE_UNSTARTED) {
            return 0;
        } else if (this.runningState == STATE_RUNNING) {
            return System.nanoTime() - this.startTime;
        }
        throw new RuntimeException("Illegal running state has occured. ");
    }

IS VOID METHOD: false
FRAGMENT LENGTH: 778
FRAGMENT LINE AVG SIZE: 33.82608695652174
DEPTHS:
0 1 1 1 1 1 1 1 1 1 1 1 1 2 3 3 3 3 3 2 2 1 1 
AREA: 35
AVG DEPTH: 1.5217391304347827
---REFACTORING_FINISH---
DESCRIPTION: Extract Method	public getSplitNanoTime() : long extracted from public getSplitTime() : long in class org.apache.commons.lang.time.StopWatch
REFACTORING FILE DIFF URL: https://github.com/apache/commons-lang/commit/cb8a0d43eade243f6bcfb391bb5865b0d49366e0/src/java/org/apache/commons/lang/time/StopWatch.java
REFACTORING URL: https://github.com/apache/commons-lang/blob/cb8a0d43eade243f6bcfb391bb5865b0d49366e0/src/java/org/apache/commons/lang/time/StopWatch.java#L311
DIRECTLY EXTRACTED OPERATION:
     * <p>
     * Get the split time on the stopwatch in nanoseconds.
     * </p>
     * 
     * <p>
     * This is the time between start and latest split.
     * </p>
     * 
     * @return the split time in nanoseconds
     * 
     * @throws IllegalStateException
     *             if the StopWatch has not yet been split.
     * @since 3.0
     */
    public long getSplitNanoTime() {
        if (this.splitState != STATE_SPLIT) {
            throw new IllegalStateException("Stopwatch must be split to get the split time. ");
        }
        return this.stopTime - this.startTime;
    }

IS VOID METHOD: false
FRAGMENT LENGTH: 596
FRAGMENT LINE AVG SIZE: 28.38095238095238
DEPTHS:
0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 2 3 2 2 1 1 
AREA: 25
AVG DEPTH: 1.1904761904761905
---REFACTORING_FINISH---
-----REFACTORINGS_END-----
COMMIT ID: 504af2f2ede9930c6e8024d8f9794228e11528fe
URL: https://github.com/apache/commons-lang/commit/504af2f2ede9930c6e8024d8f9794228e11528fe
DESCRIPTION: Extract Method	private checkBuiltInFormat(pattern String, args Object[], locales Locale[]) : void extracted from public testBuiltInDateTimeFormat() : void in class org.apache.commons.lang.text.ExtendedMessageFormatTest
REFACTORING FILE DIFF URL: https://github.com/apache/commons-lang/commit/504af2f2ede9930c6e8024d8f9794228e11528fe/src/test/org/apache/commons/lang/text/ExtendedMessageFormatTest.java
REFACTORING URL: https://github.com/apache/commons-lang/blob/504af2f2ede9930c6e8024d8f9794228e11528fe/src/test/org/apache/commons/lang/text/ExtendedMessageFormatTest.java#L274
DIRECTLY EXTRACTED OPERATION:
     * Test a built in format for the specified Locales, plus <code>null</code> Locale.
     * @param pattern MessageFormat pattern
     * @param args MessageFormat arguments
     * @param locales to test
     */
    private void checkBuiltInFormat(String pattern, Object[] args, Locale[] locales) {
        checkBuiltInFormat(pattern, null, args, locales);
    }

PARAMS COUNT: 3
IS VOID METHOD: true
FRAGMENT LENGTH: 365
FRAGMENT LINE AVG SIZE: 40.55555555555556
DEPTHS:
0 1 1 1 1 1 2 1 1 
AREA: 9
AVG DEPTH: 1.0
---REFACTORING_FINISH---
DESCRIPTION: Extract Method	private checkBuiltInFormat(pattern String, args Object[], locales Locale[]) : void extracted from public testBuiltInDateTimeFormat() : void in class org.apache.commons.lang.text.ExtendedMessageFormatTest
REFACTORING FILE DIFF URL: https://github.com/apache/commons-lang/commit/504af2f2ede9930c6e8024d8f9794228e11528fe/src/test/org/apache/commons/lang/text/ExtendedMessageFormatTest.java
REFACTORING URL: https://github.com/apache/commons-lang/blob/504af2f2ede9930c6e8024d8f9794228e11528fe/src/test/org/apache/commons/lang/text/ExtendedMessageFormatTest.java#L274
DIRECTLY EXTRACTED OPERATION:
     * Test a built in format for the specified Locales, plus <code>null</code> Locale.
     * @param pattern MessageFormat pattern
     * @param args MessageFormat arguments
     * @param locales to test
     */
    private void checkBuiltInFormat(String pattern, Object[] args, Locale[] locales) {
        checkBuiltInFormat(pattern, null, args, locales);
    }

PARAMS COUNT: 3
IS VOID METHOD: true
FRAGMENT LENGTH: 365
FRAGMENT LINE AVG SIZE: 40.55555555555556
DEPTHS:
0 1 1 1 1 1 2 1 1 
AREA: 9
AVG DEPTH: 1.0
---REFACTORING_FINISH---
DESCRIPTION: Extract Method	private checkBuiltInFormat(pattern String, args Object[], locales Locale[]) : void extracted from public testBuiltInDateTimeFormat() : void in class org.apache.commons.lang.text.ExtendedMessageFormatTest
REFACTORING FILE DIFF URL: https://github.com/apache/commons-lang/commit/504af2f2ede9930c6e8024d8f9794228e11528fe/src/test/org/apache/commons/lang/text/ExtendedMessageFormatTest.java
REFACTORING URL: https://github.com/apache/commons-lang/blob/504af2f2ede9930c6e8024d8f9794228e11528fe/src/test/org/apache/commons/lang/text/ExtendedMessageFormatTest.java#L274
DIRECTLY EXTRACTED OPERATION:
     * Test a built in format for the specified Locales, plus <code>null</code> Locale.
     * @param pattern MessageFormat pattern
     * @param args MessageFormat arguments
     * @param locales to test
     */
    private void checkBuiltInFormat(String pattern, Object[] args, Locale[] locales) {
        checkBuiltInFormat(pattern, null, args, locales);
    }

PARAMS COUNT: 3
IS VOID METHOD: true
FRAGMENT LENGTH: 365
FRAGMENT LINE AVG SIZE: 40.55555555555556
DEPTHS:
0 1 1 1 1 1 2 1 1 
AREA: 9
AVG DEPTH: 1.0
---REFACTORING_FINISH---
DESCRIPTION: Extract Method	private checkBuiltInFormat(pattern String, args Object[], locales Locale[]) : void extracted from public testBuiltInDateTimeFormat() : void in class org.apache.commons.lang.text.ExtendedMessageFormatTest
REFACTORING FILE DIFF URL: https://github.com/apache/commons-lang/commit/504af2f2ede9930c6e8024d8f9794228e11528fe/src/test/org/apache/commons/lang/text/ExtendedMessageFormatTest.java
REFACTORING URL: https://github.com/apache/commons-lang/blob/504af2f2ede9930c6e8024d8f9794228e11528fe/src/test/org/apache/commons/lang/text/ExtendedMessageFormatTest.java#L274
DIRECTLY EXTRACTED OPERATION:
     * Test a built in format for the specified Locales, plus <code>null</code> Locale.
     * @param pattern MessageFormat pattern
     * @param args MessageFormat arguments
     * @param locales to test
     */
    private void checkBuiltInFormat(String pattern, Object[] args, Locale[] locales) {
        checkBuiltInFormat(pattern, null, args, locales);
    }

PARAMS COUNT: 3
IS VOID METHOD: true
FRAGMENT LENGTH: 365
FRAGMENT LINE AVG SIZE: 40.55555555555556
DEPTHS:
0 1 1 1 1 1 2 1 1 
AREA: 9
AVG DEPTH: 1.0
---REFACTORING_FINISH---
DESCRIPTION: Extract Method	private checkBuiltInFormat(pattern String, args Object[], locales Locale[]) : void extracted from public testBuiltInDateTimeFormat() : void in class org.apache.commons.lang.text.ExtendedMessageFormatTest
REFACTORING FILE DIFF URL: https://github.com/apache/commons-lang/commit/504af2f2ede9930c6e8024d8f9794228e11528fe/src/test/org/apache/commons/lang/text/ExtendedMessageFormatTest.java
REFACTORING URL: https://github.com/apache/commons-lang/blob/504af2f2ede9930c6e8024d8f9794228e11528fe/src/test/org/apache/commons/lang/text/ExtendedMessageFormatTest.java#L274
DIRECTLY EXTRACTED OPERATION:
     * Test a built in format for the specified Locales, plus <code>null</code> Locale.
     * @param pattern MessageFormat pattern
     * @param args MessageFormat arguments
     * @param locales to test
     */
    private void checkBuiltInFormat(String pattern, Object[] args, Locale[] locales) {
        checkBuiltInFormat(pattern, null, args, locales);
    }

PARAMS COUNT: 3
IS VOID METHOD: true
FRAGMENT LENGTH: 365
FRAGMENT LINE AVG SIZE: 40.55555555555556
DEPTHS:
0 1 1 1 1 1 2 1 1 
AREA: 9
AVG DEPTH: 1.0
---REFACTORING_FINISH---
DESCRIPTION: Extract Method	private checkBuiltInFormat(pattern String, args Object[], locales Locale[]) : void extracted from public testBuiltInDateTimeFormat() : void in class org.apache.commons.lang.text.ExtendedMessageFormatTest
REFACTORING FILE DIFF URL: https://github.com/apache/commons-lang/commit/504af2f2ede9930c6e8024d8f9794228e11528fe/src/test/org/apache/commons/lang/text/ExtendedMessageFormatTest.java
REFACTORING URL: https://github.com/apache/commons-lang/blob/504af2f2ede9930c6e8024d8f9794228e11528fe/src/test/org/apache/commons/lang/text/ExtendedMessageFormatTest.java#L274
DIRECTLY EXTRACTED OPERATION:
     * Test a built in format for the specified Locales, plus <code>null</code> Locale.
     * @param pattern MessageFormat pattern
     * @param args MessageFormat arguments
     * @param locales to test
     */
    private void checkBuiltInFormat(String pattern, Object[] args, Locale[] locales) {
        checkBuiltInFormat(pattern, null, args, locales);
    }

PARAMS COUNT: 3
IS VOID METHOD: true
FRAGMENT LENGTH: 365
FRAGMENT LINE AVG SIZE: 40.55555555555556
DEPTHS:
0 1 1 1 1 1 2 1 1 
AREA: 9
AVG DEPTH: 1.0
---REFACTORING_FINISH---
DESCRIPTION: Extract Method	private checkBuiltInFormat(pattern String, args Object[], locales Locale[]) : void extracted from public testBuiltInDateTimeFormat() : void in class org.apache.commons.lang.text.ExtendedMessageFormatTest
REFACTORING FILE DIFF URL: https://github.com/apache/commons-lang/commit/504af2f2ede9930c6e8024d8f9794228e11528fe/src/test/org/apache/commons/lang/text/ExtendedMessageFormatTest.java
REFACTORING URL: https://github.com/apache/commons-lang/blob/504af2f2ede9930c6e8024d8f9794228e11528fe/src/test/org/apache/commons/lang/text/ExtendedMessageFormatTest.java#L274
DIRECTLY EXTRACTED OPERATION:
     * Test a built in format for the specified Locales, plus <code>null</code> Locale.
     * @param pattern MessageFormat pattern
     * @param args MessageFormat arguments
     * @param locales to test
     */
    private void checkBuiltInFormat(String pattern, Object[] args, Locale[] locales) {
        checkBuiltInFormat(pattern, null, args, locales);
    }

PARAMS COUNT: 3
IS VOID METHOD: true
FRAGMENT LENGTH: 365
FRAGMENT LINE AVG SIZE: 40.55555555555556
DEPTHS:
0 1 1 1 1 1 2 1 1 
AREA: 9
AVG DEPTH: 1.0
---REFACTORING_FINISH---
DESCRIPTION: Extract Method	private checkBuiltInFormat(pattern String, args Object[], locales Locale[]) : void extracted from public testBuiltInDateTimeFormat() : void in class org.apache.commons.lang.text.ExtendedMessageFormatTest
REFACTORING FILE DIFF URL: https://github.com/apache/commons-lang/commit/504af2f2ede9930c6e8024d8f9794228e11528fe/src/test/org/apache/commons/lang/text/ExtendedMessageFormatTest.java
REFACTORING URL: https://github.com/apache/commons-lang/blob/504af2f2ede9930c6e8024d8f9794228e11528fe/src/test/org/apache/commons/lang/text/ExtendedMessageFormatTest.java#L274
DIRECTLY EXTRACTED OPERATION:
     * Test a built in format for the specified Locales, plus <code>null</code> Locale.
     * @param pattern MessageFormat pattern
     * @param args MessageFormat arguments
     * @param locales to test
     */
    private void checkBuiltInFormat(String pattern, Object[] args, Locale[] locales) {
        checkBuiltInFormat(pattern, null, args, locales);
    }

PARAMS COUNT: 3
IS VOID METHOD: true
FRAGMENT LENGTH: 365
FRAGMENT LINE AVG SIZE: 40.55555555555556
DEPTHS:
0 1 1 1 1 1 2 1 1 
AREA: 9
AVG DEPTH: 1.0
---REFACTORING_FINISH---
DESCRIPTION: Extract Method	private checkBuiltInFormat(pattern String, args Object[], locales Locale[]) : void extracted from public testBuiltInDateTimeFormat() : void in class org.apache.commons.lang.text.ExtendedMessageFormatTest
REFACTORING FILE DIFF URL: https://github.com/apache/commons-lang/commit/504af2f2ede9930c6e8024d8f9794228e11528fe/src/test/org/apache/commons/lang/text/ExtendedMessageFormatTest.java
REFACTORING URL: https://github.com/apache/commons-lang/blob/504af2f2ede9930c6e8024d8f9794228e11528fe/src/test/org/apache/commons/lang/text/ExtendedMessageFormatTest.java#L274
DIRECTLY EXTRACTED OPERATION:
     * Test a built in format for the specified Locales, plus <code>null</code> Locale.
     * @param pattern MessageFormat pattern
     * @param args MessageFormat arguments
     * @param locales to test
     */
    private void checkBuiltInFormat(String pattern, Object[] args, Locale[] locales) {
        checkBuiltInFormat(pattern, null, args, locales);
    }

PARAMS COUNT: 3
IS VOID METHOD: true
FRAGMENT LENGTH: 365
FRAGMENT LINE AVG SIZE: 40.55555555555556
DEPTHS:
0 1 1 1 1 1 2 1 1 
AREA: 9
AVG DEPTH: 1.0
---REFACTORING_FINISH---
DESCRIPTION: Extract Method	private checkBuiltInFormat(pattern String, args Object[], locales Locale[]) : void extracted from public testBuiltInDateTimeFormat() : void in class org.apache.commons.lang.text.ExtendedMessageFormatTest
REFACTORING FILE DIFF URL: https://github.com/apache/commons-lang/commit/504af2f2ede9930c6e8024d8f9794228e11528fe/src/test/org/apache/commons/lang/text/ExtendedMessageFormatTest.java
REFACTORING URL: https://github.com/apache/commons-lang/blob/504af2f2ede9930c6e8024d8f9794228e11528fe/src/test/org/apache/commons/lang/text/ExtendedMessageFormatTest.java#L274
DIRECTLY EXTRACTED OPERATION:
     * Test a built in format for the specified Locales, plus <code>null</code> Locale.
     * @param pattern MessageFormat pattern
     * @param args MessageFormat arguments
     * @param locales to test
     */
    private void checkBuiltInFormat(String pattern, Object[] args, Locale[] locales) {
        checkBuiltInFormat(pattern, null, args, locales);
    }

PARAMS COUNT: 3
IS VOID METHOD: true
FRAGMENT LENGTH: 365
FRAGMENT LINE AVG SIZE: 40.55555555555556
DEPTHS:
0 1 1 1 1 1 2 1 1 
AREA: 9
AVG DEPTH: 1.0
---REFACTORING_FINISH---
DESCRIPTION: Extract Method	private checkBuiltInFormat(pattern String, args Object[], locales Locale[]) : void extracted from public testBuiltInDateTimeFormat() : void in class org.apache.commons.lang.text.ExtendedMessageFormatTest
REFACTORING FILE DIFF URL: https://github.com/apache/commons-lang/commit/504af2f2ede9930c6e8024d8f9794228e11528fe/src/test/org/apache/commons/lang/text/ExtendedMessageFormatTest.java
REFACTORING URL: https://github.com/apache/commons-lang/blob/504af2f2ede9930c6e8024d8f9794228e11528fe/src/test/org/apache/commons/lang/text/ExtendedMessageFormatTest.java#L274
DIRECTLY EXTRACTED OPERATION:
     * Test a built in format for the specified Locales, plus <code>null</code> Locale.
     * @param pattern MessageFormat pattern
     * @param args MessageFormat arguments
     * @param locales to test
     */
    private void checkBuiltInFormat(String pattern, Object[] args, Locale[] locales) {
        checkBuiltInFormat(pattern, null, args, locales);
    }

PARAMS COUNT: 3
IS VOID METHOD: true
FRAGMENT LENGTH: 365
FRAGMENT LINE AVG SIZE: 40.55555555555556
DEPTHS:
0 1 1 1 1 1 2 1 1 
AREA: 9
AVG DEPTH: 1.0
---REFACTORING_FINISH---
DESCRIPTION: Extract Method	private checkBuiltInFormat(pattern String, args Object[], locales Locale[]) : void extracted from public testBuiltInDateTimeFormat() : void in class org.apache.commons.lang.text.ExtendedMessageFormatTest
REFACTORING FILE DIFF URL: https://github.com/apache/commons-lang/commit/504af2f2ede9930c6e8024d8f9794228e11528fe/src/test/org/apache/commons/lang/text/ExtendedMessageFormatTest.java
REFACTORING URL: https://github.com/apache/commons-lang/blob/504af2f2ede9930c6e8024d8f9794228e11528fe/src/test/org/apache/commons/lang/text/ExtendedMessageFormatTest.java#L274
DIRECTLY EXTRACTED OPERATION:
     * Test a built in format for the specified Locales, plus <code>null</code> Locale.
     * @param pattern MessageFormat pattern
     * @param args MessageFormat arguments
     * @param locales to test
     */
    private void checkBuiltInFormat(String pattern, Object[] args, Locale[] locales) {
        checkBuiltInFormat(pattern, null, args, locales);
    }

PARAMS COUNT: 3
IS VOID METHOD: true
FRAGMENT LENGTH: 365
FRAGMENT LINE AVG SIZE: 40.55555555555556
DEPTHS:
0 1 1 1 1 1 2 1 1 
AREA: 9
AVG DEPTH: 1.0
---REFACTORING_FINISH---
DESCRIPTION: Extract Method	private checkBuiltInFormat(pattern String, args Object[], locales Locale[]) : void extracted from public testBuiltInNumberFormat() : void in class org.apache.commons.lang.text.ExtendedMessageFormatTest
REFACTORING FILE DIFF URL: https://github.com/apache/commons-lang/commit/504af2f2ede9930c6e8024d8f9794228e11528fe/src/test/org/apache/commons/lang/text/ExtendedMessageFormatTest.java
REFACTORING URL: https://github.com/apache/commons-lang/blob/504af2f2ede9930c6e8024d8f9794228e11528fe/src/test/org/apache/commons/lang/text/ExtendedMessageFormatTest.java#L274
DIRECTLY EXTRACTED OPERATION:
     * Test a built in format for the specified Locales, plus <code>null</code> Locale.
     * @param pattern MessageFormat pattern
     * @param args MessageFormat arguments
     * @param locales to test
     */
    private void checkBuiltInFormat(String pattern, Object[] args, Locale[] locales) {
        checkBuiltInFormat(pattern, null, args, locales);
    }

PARAMS COUNT: 3
IS VOID METHOD: true
FRAGMENT LENGTH: 365
FRAGMENT LINE AVG SIZE: 40.55555555555556
DEPTHS:
0 1 1 1 1 1 2 1 1 
AREA: 9
AVG DEPTH: 1.0
---REFACTORING_FINISH---
DESCRIPTION: Extract Method	private checkBuiltInFormat(pattern String, args Object[], locales Locale[]) : void extracted from public testBuiltInNumberFormat() : void in class org.apache.commons.lang.text.ExtendedMessageFormatTest
REFACTORING FILE DIFF URL: https://github.com/apache/commons-lang/commit/504af2f2ede9930c6e8024d8f9794228e11528fe/src/test/org/apache/commons/lang/text/ExtendedMessageFormatTest.java
REFACTORING URL: https://github.com/apache/commons-lang/blob/504af2f2ede9930c6e8024d8f9794228e11528fe/src/test/org/apache/commons/lang/text/ExtendedMessageFormatTest.java#L274
DIRECTLY EXTRACTED OPERATION:
     * Test a built in format for the specified Locales, plus <code>null</code> Locale.
     * @param pattern MessageFormat pattern
     * @param args MessageFormat arguments
     * @param locales to test
     */
    private void checkBuiltInFormat(String pattern, Object[] args, Locale[] locales) {
        checkBuiltInFormat(pattern, null, args, locales);
    }

PARAMS COUNT: 3
IS VOID METHOD: true
FRAGMENT LENGTH: 365
FRAGMENT LINE AVG SIZE: 40.55555555555556
DEPTHS:
0 1 1 1 1 1 2 1 1 
AREA: 9
AVG DEPTH: 1.0
---REFACTORING_FINISH---
DESCRIPTION: Extract Method	private checkBuiltInFormat(pattern String, args Object[], locales Locale[]) : void extracted from public testBuiltInNumberFormat() : void in class org.apache.commons.lang.text.ExtendedMessageFormatTest
REFACTORING FILE DIFF URL: https://github.com/apache/commons-lang/commit/504af2f2ede9930c6e8024d8f9794228e11528fe/src/test/org/apache/commons/lang/text/ExtendedMessageFormatTest.java
REFACTORING URL: https://github.com/apache/commons-lang/blob/504af2f2ede9930c6e8024d8f9794228e11528fe/src/test/org/apache/commons/lang/text/ExtendedMessageFormatTest.java#L274
DIRECTLY EXTRACTED OPERATION:
     * Test a built in format for the specified Locales, plus <code>null</code> Locale.
     * @param pattern MessageFormat pattern
     * @param args MessageFormat arguments
     * @param locales to test
     */
    private void checkBuiltInFormat(String pattern, Object[] args, Locale[] locales) {
        checkBuiltInFormat(pattern, null, args, locales);
    }

PARAMS COUNT: 3
IS VOID METHOD: true
FRAGMENT LENGTH: 365
FRAGMENT LINE AVG SIZE: 40.55555555555556
DEPTHS:
0 1 1 1 1 1 2 1 1 
AREA: 9
AVG DEPTH: 1.0
---REFACTORING_FINISH---
DESCRIPTION: Extract Method	private checkBuiltInFormat(pattern String, args Object[], locales Locale[]) : void extracted from public testBuiltInNumberFormat() : void in class org.apache.commons.lang.text.ExtendedMessageFormatTest
REFACTORING FILE DIFF URL: https://github.com/apache/commons-lang/commit/504af2f2ede9930c6e8024d8f9794228e11528fe/src/test/org/apache/commons/lang/text/ExtendedMessageFormatTest.java
REFACTORING URL: https://github.com/apache/commons-lang/blob/504af2f2ede9930c6e8024d8f9794228e11528fe/src/test/org/apache/commons/lang/text/ExtendedMessageFormatTest.java#L274
DIRECTLY EXTRACTED OPERATION:
     * Test a built in format for the specified Locales, plus <code>null</code> Locale.
     * @param pattern MessageFormat pattern
     * @param args MessageFormat arguments
     * @param locales to test
     */
    private void checkBuiltInFormat(String pattern, Object[] args, Locale[] locales) {
        checkBuiltInFormat(pattern, null, args, locales);
    }

PARAMS COUNT: 3
IS VOID METHOD: true
FRAGMENT LENGTH: 365
FRAGMENT LINE AVG SIZE: 40.55555555555556
DEPTHS:
0 1 1 1 1 1 2 1 1 
AREA: 9
AVG DEPTH: 1.0
---REFACTORING_FINISH---
DESCRIPTION: Extract Method	private checkBuiltInFormat(pattern String, args Object[], locales Locale[]) : void extracted from public testBuiltInNumberFormat() : void in class org.apache.commons.lang.text.ExtendedMessageFormatTest
REFACTORING FILE DIFF URL: https://github.com/apache/commons-lang/commit/504af2f2ede9930c6e8024d8f9794228e11528fe/src/test/org/apache/commons/lang/text/ExtendedMessageFormatTest.java
REFACTORING URL: https://github.com/apache/commons-lang/blob/504af2f2ede9930c6e8024d8f9794228e11528fe/src/test/org/apache/commons/lang/text/ExtendedMessageFormatTest.java#L274
DIRECTLY EXTRACTED OPERATION:
     * Test a built in format for the specified Locales, plus <code>null</code> Locale.
     * @param pattern MessageFormat pattern
     * @param args MessageFormat arguments
     * @param locales to test
     */
    private void checkBuiltInFormat(String pattern, Object[] args, Locale[] locales) {
        checkBuiltInFormat(pattern, null, args, locales);
    }

PARAMS COUNT: 3
IS VOID METHOD: true
FRAGMENT LENGTH: 365
FRAGMENT LINE AVG SIZE: 40.55555555555556
DEPTHS:
0 1 1 1 1 1 2 1 1 
AREA: 9
AVG DEPTH: 1.0
---REFACTORING_FINISH---
DESCRIPTION: Extract Method	private createMessageFormat(pattern String, locale Locale) : MessageFormat extracted from private checkBuiltInFormat(pattern String, args Object[], locale Locale) : void in class org.apache.commons.lang.text.ExtendedMessageFormatTest
REFACTORING FILE DIFF URL: https://github.com/apache/commons-lang/commit/504af2f2ede9930c6e8024d8f9794228e11528fe/src/test/org/apache/commons/lang/text/ExtendedMessageFormatTest.java
REFACTORING URL: https://github.com/apache/commons-lang/blob/504af2f2ede9930c6e8024d8f9794228e11528fe/src/test/org/apache/commons/lang/text/ExtendedMessageFormatTest.java#L332
DIRECTLY EXTRACTED OPERATION:
     * Replace MessageFormat(String, Locale) constructor (not available until JDK 1.4).
     * @param pattern string
     * @param locale Locale
     * @return MessageFormat
     */
    private MessageFormat createMessageFormat(String pattern, Locale locale) {
        MessageFormat result = new MessageFormat(pattern);
        if (locale != null) {
            result.setLocale(locale);
            result.applyPattern(pattern);
        }
        return result;
    }

PARAMS COUNT: 2
IS VOID METHOD: false
FRAGMENT LENGTH: 470
FRAGMENT LINE AVG SIZE: 33.57142857142857
DEPTHS:
0 1 1 1 1 1 2 2 3 3 2 2 1 1 
AREA: 21
AVG DEPTH: 1.5
---REFACTORING_FINISH---
-----REFACTORINGS_END-----
COMMIT ID: 8c7546be279b0d82696d5a4954aeaf3820b18ac5
URL: https://github.com/apache/commons-lang/commit/8c7546be279b0d82696d5a4954aeaf3820b18ac5
DESCRIPTION: Extract Method	public isAssignable(classArray Class[], toClassArray Class[], autoboxing boolean) : boolean extracted from public isAssignable(classArray Class[], toClassArray Class[]) : boolean in class org.apache.commons.lang.ClassUtils
REFACTORING FILE DIFF URL: https://github.com/apache/commons-lang/commit/8c7546be279b0d82696d5a4954aeaf3820b18ac5/src/java/org/apache/commons/lang/ClassUtils.java
REFACTORING URL: https://github.com/apache/commons-lang/blob/8c7546be279b0d82696d5a4954aeaf3820b18ac5/src/java/org/apache/commons/lang/ClassUtils.java#L404
DIRECTLY EXTRACTED OPERATION:
     * <p>Checks if an array of Classes can be assigned to another array of Classes.</p>
     *
     * <p>This method calls {@link #isAssignable(Class, Class) isAssignable} for each
     * Class pair in the input arrays. It can be used to check if a set of arguments
     * (the first parameter) are suitably compatible with a set of method parameter types
     * (the second parameter).</p>
     *
     * <p>Unlike the {@link Class#isAssignableFrom(java.lang.Class)} method, this
     * method takes into account widenings of primitive classes and
     * <code>null</code>s.</p>
     *
     * <p>Primitive widenings allow an int to be assigned to a <code>long</code>,
     * <code>float</code> or <code>double</code>. This method returns the correct
     * result for these cases.</p>
     *
     * <p><code>Null</code> may be assigned to any reference type. This method will
     * return <code>true</code> if <code>null</code> is passed in and the toClass is
     * non-primitive.</p>
     *
     * <p>Specifically, this method tests whether the type represented by the
     * specified <code>Class</code> parameter can be converted to the type
     * represented by this <code>Class</code> object via an identity conversion
     * widening primitive or widening reference conversion. See
     * <em><a href="http://java.sun.com/docs/books/jls/">The Java Language Specification</a></em>,
     * sections 5.1.1, 5.1.2 and 5.1.4 for details.</p>
     *
     * @param classArray  the array of Classes to check, may be <code>null</code>
     * @param toClassArray  the array of Classes to try to assign into, may be <code>null</code>
     * @param autoboxing  whether to use implicit autoboxing/unboxing between primitives and wrappers
     * @return <code>true</code> if assignment possible
     */
    public static boolean isAssignable(Class[] classArray, Class[] toClassArray, boolean autoboxing) {
        if (ArrayUtils.isSameLength(classArray, toClassArray) == false) {
            return false;
        }
        if (classArray == null) {
            classArray = ArrayUtils.EMPTY_CLASS_ARRAY;
        }
        if (toClassArray == null) {
            toClassArray = ArrayUtils.EMPTY_CLASS_ARRAY;
        }
        for (int i = 0; i < classArray.length; i++) {
            if (isAssignable(classArray[i], toClassArray[i], autoboxing) == false) {
                return false;
            }
        }
        return true;
    }

PARAMS COUNT: 3
IS VOID METHOD: false
FRAGMENT LENGTH: 2435
FRAGMENT LINE AVG SIZE: 49.69387755102041
DEPTHS:
0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 2 3 2 2 3 2 2 3 2 2 3 4 3 2 2 1 1 
AREA: 70
AVG DEPTH: 1.4285714285714286
---REFACTORING_FINISH---
DESCRIPTION: Extract Method	public isAssignable(cls Class, toClass Class, autoboxing boolean) : boolean extracted from public isAssignable(cls Class, toClass Class) : boolean in class org.apache.commons.lang.ClassUtils
REFACTORING FILE DIFF URL: https://github.com/apache/commons-lang/commit/8c7546be279b0d82696d5a4954aeaf3820b18ac5/src/java/org/apache/commons/lang/ClassUtils.java
REFACTORING URL: https://github.com/apache/commons-lang/blob/8c7546be279b0d82696d5a4954aeaf3820b18ac5/src/java/org/apache/commons/lang/ClassUtils.java#L484
DIRECTLY EXTRACTED OPERATION:
     * <p>Checks if one <code>Class</code> can be assigned to a variable of
     * another <code>Class</code>.</p>
     *
     * <p>Unlike the {@link Class#isAssignableFrom(java.lang.Class)} method,
     * this method takes into account widenings of primitive classes and
     * <code>null</code>s.</p>
     *
     * <p>Primitive widenings allow an int to be assigned to a long, float or
     * double. This method returns the correct result for these cases.</p>
     *
     * <p><code>Null</code> may be assigned to any reference type. This method
     * will return <code>true</code> if <code>null</code> is passed in and the
     * toClass is non-primitive.</p>
     *
     * <p>Specifically, this method tests whether the type represented by the
     * specified <code>Class</code> parameter can be converted to the type
     * represented by this <code>Class</code> object via an identity conversion
     * widening primitive or widening reference conversion. See
     * <em><a href="http://java.sun.com/docs/books/jls/">The Java Language Specification</a></em>,
     * sections 5.1.1, 5.1.2 and 5.1.4 for details.</p>
     *
     * @param cls  the Class to check, may be null
     * @param toClass  the Class to try to assign into, returns false if null
     * @param autoboxing  whether to use implicit autoboxing/unboxing between primitives and wrappers
     * @return <code>true</code> if assignment possible
     */
    public static boolean isAssignable(Class cls, Class toClass, boolean autoboxing) {
        if (toClass == null) {
            return false;
        }
        // have to check for null, as isAssignableFrom doesn't
        if (cls == null) {
            return !(toClass.isPrimitive());
        }
        //autoboxing:
        if (autoboxing) {
            if (cls.isPrimitive() && !toClass.isPrimitive()) {
                cls = primitiveToWrapper(cls);
                if (cls == null) {
                    return false;
                }
            }
            if (toClass.isPrimitive() && !cls.isPrimitive()) {
                cls = wrapperToPrimitive(cls);
                if (cls == null) {
                    return false;
                }
            }
        }
        if (cls.equals(toClass)) {
            return true;
        }
        if (cls.isPrimitive()) {
            if (toClass.isPrimitive() == false) {
                return false;
            }
            if (Integer.TYPE.equals(cls)) {
                return Long.TYPE.equals(toClass)
                    || Float.TYPE.equals(toClass)
                    || Double.TYPE.equals(toClass);
            }
            if (Long.TYPE.equals(cls)) {
                return Float.TYPE.equals(toClass)
                    || Double.TYPE.equals(toClass);
            }
            if (Boolean.TYPE.equals(cls)) {
                return false;
            }
            if (Double.TYPE.equals(cls)) {
                return false;
            }
            if (Float.TYPE.equals(cls)) {
                return Double.TYPE.equals(toClass);
            }
            if (Character.TYPE.equals(cls)) {
                return Integer.TYPE.equals(toClass)
                    || Long.TYPE.equals(toClass)
                    || Float.TYPE.equals(toClass)
                    || Double.TYPE.equals(toClass);
            }
            if (Short.TYPE.equals(cls)) {
                return Integer.TYPE.equals(toClass)
                    || Long.TYPE.equals(toClass)
                    || Float.TYPE.equals(toClass)
                    || Double.TYPE.equals(toClass);
            }
            if (Byte.TYPE.equals(cls)) {
                return Short.TYPE.equals(toClass)
                    || Integer.TYPE.equals(toClass)
                    || Long.TYPE.equals(toClass)
                    || Float.TYPE.equals(toClass)
                    || Double.TYPE.equals(toClass);
            }
            // should never get here
            return false;
        }
        return toClass.isAssignableFrom(cls);
    }

PARAMS COUNT: 3
IS VOID METHOD: false
FRAGMENT LENGTH: 4007
FRAGMENT LINE AVG SIZE: 40.474747474747474
DEPTHS:
0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 2 3 2 2 2 3 2 2 2 3 4 4 5 4 3 3 4 4 5 4 3 2 2 3 2 2 3 4 3 3 4 4 4 3 3 4 4 3 3 4 3 3 4 3 3 4 3 3 4 4 4 4 3 3 4 4 4 4 3 3 4 4 4 4 4 3 3 3 2 2 1 1 
AREA: 257
AVG DEPTH: 2.595959595959596
---REFACTORING_FINISH---
-----REFACTORINGS_END-----
COMMIT ID: c1bd325d94e06c23343b40a260cc7a2bc00e99af
URL: https://github.com/apache/commons-lang/commit/c1bd325d94e06c23343b40a260cc7a2bc00e99af
DESCRIPTION: Extract Method	private assertPatternsEqual(message String, expected String, actual String) : void extracted from public testExtendedFormats() : void in class org.apache.commons.lang.text.ExtendedMessageFormatTest
REFACTORING FILE DIFF URL: https://github.com/apache/commons-lang/commit/c1bd325d94e06c23343b40a260cc7a2bc00e99af/src/test/org/apache/commons/lang/text/ExtendedMessageFormatTest.java
REFACTORING URL: https://github.com/apache/commons-lang/blob/c1bd325d94e06c23343b40a260cc7a2bc00e99af/src/test/org/apache/commons/lang/text/ExtendedMessageFormatTest.java#L270
DIRECTLY EXTRACTED OPERATION:
        if (SystemUtils.isJavaVersionAtLeast(1.4f)) {
            assertEquals(message, expected, actual);
        }
    }

PARAMS COUNT: 3
IS VOID METHOD: true
FRAGMENT LENGTH: 124
FRAGMENT LINE AVG SIZE: 24.8
DEPTHS:
2 3 2 1 1 
AREA: 9
AVG DEPTH: 1.8
---REFACTORING_FINISH---
DESCRIPTION: Extract Method	private assertPatternsEqual(message String, expected String, actual String) : void extracted from public testExtendedAndBuiltInFormats() : void in class org.apache.commons.lang.text.ExtendedMessageFormatTest
REFACTORING FILE DIFF URL: https://github.com/apache/commons-lang/commit/c1bd325d94e06c23343b40a260cc7a2bc00e99af/src/test/org/apache/commons/lang/text/ExtendedMessageFormatTest.java
REFACTORING URL: https://github.com/apache/commons-lang/blob/c1bd325d94e06c23343b40a260cc7a2bc00e99af/src/test/org/apache/commons/lang/text/ExtendedMessageFormatTest.java#L270
DIRECTLY EXTRACTED OPERATION:
        if (SystemUtils.isJavaVersionAtLeast(1.4f)) {
            assertEquals(message, expected, actual);
        }
    }

PARAMS COUNT: 3
IS VOID METHOD: true
FRAGMENT LENGTH: 124
FRAGMENT LINE AVG SIZE: 24.8
DEPTHS:
2 3 2 1 1 
AREA: 9
AVG DEPTH: 1.8
---REFACTORING_FINISH---
DESCRIPTION: Extract Method	private assertPatternsEqual(message String, expected String, actual String) : void extracted from private checkBuiltInFormat(pattern String, args Object[], locale Locale) : void in class org.apache.commons.lang.text.ExtendedMessageFormatTest
REFACTORING FILE DIFF URL: https://github.com/apache/commons-lang/commit/c1bd325d94e06c23343b40a260cc7a2bc00e99af/src/test/org/apache/commons/lang/text/ExtendedMessageFormatTest.java
REFACTORING URL: https://github.com/apache/commons-lang/blob/c1bd325d94e06c23343b40a260cc7a2bc00e99af/src/test/org/apache/commons/lang/text/ExtendedMessageFormatTest.java#L270
DIRECTLY EXTRACTED OPERATION:
        if (SystemUtils.isJavaVersionAtLeast(1.4f)) {
            assertEquals(message, expected, actual);
        }
    }

PARAMS COUNT: 3
IS VOID METHOD: true
FRAGMENT LENGTH: 124
FRAGMENT LINE AVG SIZE: 24.8
DEPTHS:
2 3 2 1 1 
AREA: 9
AVG DEPTH: 1.8
---REFACTORING_FINISH---
-----REFACTORINGS_END-----
COMMIT ID: 2a94f969ed74e17c8456a076960ad16cb8845e51
URL: https://github.com/apache/commons-lang/commit/2a94f969ed74e17c8456a076960ad16cb8845e51
DESCRIPTION: Extract Method	private splitByWholeSeparatorWorker(str String, separator String, max int, preserveAllTokens boolean) : String[] extracted from public splitByWholeSeparator(str String, separator String, max int) : String[] in class org.apache.commons.lang.StringUtils
REFACTORING FILE DIFF URL: https://github.com/apache/commons-lang/commit/2a94f969ed74e17c8456a076960ad16cb8845e51/src/java/org/apache/commons/lang/StringUtils.java
REFACTORING URL: https://github.com/apache/commons-lang/blob/2a94f969ed74e17c8456a076960ad16cb8845e51/src/java/org/apache/commons/lang/StringUtils.java#L2327
DIRECTLY EXTRACTED OPERATION:
     * Performs the logic for the <code>splitByWholeSeparatorPreserveAllTokens</code> methods.
     *
     * @param str  the String to parse, may be <code>null</code>
     * @param separator  String containing the String to be used as a delimiter,
     *  <code>null</code> splits on whitespace
     * @param max  the maximum number of elements to include in the returned
     *  array. A zero or negative value implies no limit.
     * @param preserveAllTokens if <code>true</code>, adjacent separators are
     * treated as empty token separators; if <code>false</code>, adjacent
     * separators are treated as one separator.
     * @return an array of parsed Strings, <code>null</code> if null String input
     * @since 2.4
     */
    private static String[] splitByWholeSeparatorWorker( String str, String separator, 
                                                         int max, boolean preserveAllTokens ) 
    {
        if (str == null) {
            return null;
        }

        int len = str.length() ;

        if (len == 0) {
            return ArrayUtils.EMPTY_STRING_ARRAY;
        }

        if ( ( separator == null ) || ( "".equals( separator ) ) ) {
            // Split on whitespace.
            return splitWorker( str, null, max, preserveAllTokens ) ;
        }


        int separatorLength = separator.length() ;

        ArrayList substrings = new ArrayList() ;
        int numberOfSubstrings = 0 ;
        int beg = 0 ;
        int end = 0 ;
        while ( end < len ) {
            end = str.indexOf( separator, beg ) ;

            if ( end > -1 ) {
                if ( end > beg ) {
                    numberOfSubstrings += 1 ;

                    if ( numberOfSubstrings == max ) {
                        end = len ;
                        substrings.add( str.substring( beg ) ) ;
                    } else {
                        // The following is OK, because String.substring( beg, end ) excludes
                        // the character at the position 'end'.
                        substrings.add( str.substring( beg, end ) ) ;

                        // Set the starting point for the next search.
                        // The following is equivalent to beg = end + (separatorLength - 1) + 1,
                        // which is the right calculation:
                        beg = end + separatorLength ;
                    }
                } else {
                    // We found a consecutive occurrence of the separator, so skip it.
                    if( preserveAllTokens ) {
                        numberOfSubstrings += 1 ;
                        if ( numberOfSubstrings == max ) {
                            end = len ;
                            substrings.add( str.substring( beg ) ) ;
                        } else {
                            substrings.add( "" );
                        }
                    }
                    beg = end + separatorLength ;
                }
            } else {
                // String.substring( beg ) goes from 'beg' to the end of the String.
                substrings.add( str.substring( beg ) ) ;
                end = len ;
            }
        }

        return (String[]) substrings.toArray( new String[substrings.size()] ) ;
    }

PARAMS COUNT: 4
IS VOID METHOD: false
FRAGMENT LENGTH: 3266
FRAGMENT LINE AVG SIZE: 40.32098765432099
DEPTHS:
0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 2 3 2 2 2 2 2 3 2 2 2 3 3 2 2 2 2 2 2 2 2 2 2 3 3 3 4 5 5 5 6 6 6 6 6 6 6 6 6 6 6 5 5 5 5 6 6 7 7 7 7 6 5 5 4 4 4 4 4 3 2 2 2 1 1 
AREA: 266
AVG DEPTH: 3.2839506172839505
---REFACTORING_FINISH---
-----REFACTORINGS_END-----
COMMIT ID: 55817e22332cfcb26238eecdf6643dada5d3c527
URL: https://github.com/apache/commons-lang/commit/55817e22332cfcb26238eecdf6643dada5d3c527
DESCRIPTION: Extract Method	protected doAssertions(format Format, args Object[], formatName String) : void extracted from public testNumber() : void in class org.apache.commons.lang.text.AbstractMessageFormatTest
REFACTORING FILE DIFF URL: https://github.com/apache/commons-lang/commit/55817e22332cfcb26238eecdf6643dada5d3c527/src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java
REFACTORING URL: https://github.com/apache/commons-lang/blob/55817e22332cfcb26238eecdf6643dada5d3c527/src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java#L94
DIRECTLY EXTRACTED OPERATION:
        doAssertions(format, args, formatName, null);
    }

PARAMS COUNT: 3
IS VOID METHOD: true
FRAGMENT LENGTH: 61
FRAGMENT LINE AVG SIZE: 20.333333333333332
DEPTHS:
1 1 1 
AREA: 3
AVG DEPTH: 1.0
---REFACTORING_FINISH---
DESCRIPTION: Extract Method	protected doAssertions(format Format, args Object[], formatName String) : void extracted from public testInteger() : void in class org.apache.commons.lang.text.AbstractMessageFormatTest
REFACTORING FILE DIFF URL: https://github.com/apache/commons-lang/commit/55817e22332cfcb26238eecdf6643dada5d3c527/src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java
REFACTORING URL: https://github.com/apache/commons-lang/blob/55817e22332cfcb26238eecdf6643dada5d3c527/src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java#L94
DIRECTLY EXTRACTED OPERATION:
        doAssertions(format, args, formatName, null);
    }

PARAMS COUNT: 3
IS VOID METHOD: true
FRAGMENT LENGTH: 61
FRAGMENT LINE AVG SIZE: 20.333333333333332
DEPTHS:
1 1 1 
AREA: 3
AVG DEPTH: 1.0
---REFACTORING_FINISH---
DESCRIPTION: Extract Method	protected doAssertions(format Format, args Object[], formatName String) : void extracted from public testCurrency() : void in class org.apache.commons.lang.text.AbstractMessageFormatTest
REFACTORING FILE DIFF URL: https://github.com/apache/commons-lang/commit/55817e22332cfcb26238eecdf6643dada5d3c527/src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java
REFACTORING URL: https://github.com/apache/commons-lang/blob/55817e22332cfcb26238eecdf6643dada5d3c527/src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java#L94
DIRECTLY EXTRACTED OPERATION:
        doAssertions(format, args, formatName, null);
    }

PARAMS COUNT: 3
IS VOID METHOD: true
FRAGMENT LENGTH: 61
FRAGMENT LINE AVG SIZE: 20.333333333333332
DEPTHS:
1 1 1 
AREA: 3
AVG DEPTH: 1.0
---REFACTORING_FINISH---
DESCRIPTION: Extract Method	protected doAssertions(format Format, args Object[], formatName String) : void extracted from public testPercent() : void in class org.apache.commons.lang.text.AbstractMessageFormatTest
REFACTORING FILE DIFF URL: https://github.com/apache/commons-lang/commit/55817e22332cfcb26238eecdf6643dada5d3c527/src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java
REFACTORING URL: https://github.com/apache/commons-lang/blob/55817e22332cfcb26238eecdf6643dada5d3c527/src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java#L94
DIRECTLY EXTRACTED OPERATION:
        doAssertions(format, args, formatName, null);
    }

PARAMS COUNT: 3
IS VOID METHOD: true
FRAGMENT LENGTH: 61
FRAGMENT LINE AVG SIZE: 20.333333333333332
DEPTHS:
1 1 1 
AREA: 3
AVG DEPTH: 1.0
---REFACTORING_FINISH---
DESCRIPTION: Extract Method	protected doAssertions(format Format, args Object[], formatName String) : void extracted from public testNumberPattern() : void in class org.apache.commons.lang.text.AbstractMessageFormatTest
REFACTORING FILE DIFF URL: https://github.com/apache/commons-lang/commit/55817e22332cfcb26238eecdf6643dada5d3c527/src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java
REFACTORING URL: https://github.com/apache/commons-lang/blob/55817e22332cfcb26238eecdf6643dada5d3c527/src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java#L94
DIRECTLY EXTRACTED OPERATION:
        doAssertions(format, args, formatName, null);
    }

PARAMS COUNT: 3
IS VOID METHOD: true
FRAGMENT LENGTH: 61
FRAGMENT LINE AVG SIZE: 20.333333333333332
DEPTHS:
1 1 1 
AREA: 3
AVG DEPTH: 1.0
---REFACTORING_FINISH---
DESCRIPTION: Extract Method	protected doAssertions(format Format, args Object[], formatName String) : void extracted from public testDate() : void in class org.apache.commons.lang.text.AbstractMessageFormatTest
REFACTORING FILE DIFF URL: https://github.com/apache/commons-lang/commit/55817e22332cfcb26238eecdf6643dada5d3c527/src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java
REFACTORING URL: https://github.com/apache/commons-lang/blob/55817e22332cfcb26238eecdf6643dada5d3c527/src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java#L94
DIRECTLY EXTRACTED OPERATION:
        doAssertions(format, args, formatName, null);
    }

PARAMS COUNT: 3
IS VOID METHOD: true
FRAGMENT LENGTH: 61
FRAGMENT LINE AVG SIZE: 20.333333333333332
DEPTHS:
1 1 1 
AREA: 3
AVG DEPTH: 1.0
---REFACTORING_FINISH---
DESCRIPTION: Extract Method	protected doAssertions(format Format, args Object[], formatName String) : void extracted from public testDatePattern() : void in class org.apache.commons.lang.text.AbstractMessageFormatTest
REFACTORING FILE DIFF URL: https://github.com/apache/commons-lang/commit/55817e22332cfcb26238eecdf6643dada5d3c527/src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java
REFACTORING URL: https://github.com/apache/commons-lang/blob/55817e22332cfcb26238eecdf6643dada5d3c527/src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java#L94
DIRECTLY EXTRACTED OPERATION:
        doAssertions(format, args, formatName, null);
    }

PARAMS COUNT: 3
IS VOID METHOD: true
FRAGMENT LENGTH: 61
FRAGMENT LINE AVG SIZE: 20.333333333333332
DEPTHS:
1 1 1 
AREA: 3
AVG DEPTH: 1.0
---REFACTORING_FINISH---
DESCRIPTION: Extract Method	protected doAssertions(format Format, args Object[], formatName String) : void extracted from public testTime() : void in class org.apache.commons.lang.text.AbstractMessageFormatTest
REFACTORING FILE DIFF URL: https://github.com/apache/commons-lang/commit/55817e22332cfcb26238eecdf6643dada5d3c527/src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java
REFACTORING URL: https://github.com/apache/commons-lang/blob/55817e22332cfcb26238eecdf6643dada5d3c527/src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java#L94
DIRECTLY EXTRACTED OPERATION:
        doAssertions(format, args, formatName, null);
    }

PARAMS COUNT: 3
IS VOID METHOD: true
FRAGMENT LENGTH: 61
FRAGMENT LINE AVG SIZE: 20.333333333333332
DEPTHS:
1 1 1 
AREA: 3
AVG DEPTH: 1.0
---REFACTORING_FINISH---
DESCRIPTION: Extract Method	protected doAssertions(format Format, args Object[], formatName String) : void extracted from public testShortTime() : void in class org.apache.commons.lang.text.AbstractMessageFormatTest
REFACTORING FILE DIFF URL: https://github.com/apache/commons-lang/commit/55817e22332cfcb26238eecdf6643dada5d3c527/src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java
REFACTORING URL: https://github.com/apache/commons-lang/blob/55817e22332cfcb26238eecdf6643dada5d3c527/src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java#L94
DIRECTLY EXTRACTED OPERATION:
        doAssertions(format, args, formatName, null);
    }

PARAMS COUNT: 3
IS VOID METHOD: true
FRAGMENT LENGTH: 61
FRAGMENT LINE AVG SIZE: 20.333333333333332
DEPTHS:
1 1 1 
AREA: 3
AVG DEPTH: 1.0
---REFACTORING_FINISH---
DESCRIPTION: Extract Method	protected doAssertions(format Format, args Object[], formatName String, decodeFormatName String) : void extracted from public testLongTime() : void in class org.apache.commons.lang.text.AbstractMessageFormatTest
REFACTORING FILE DIFF URL: https://github.com/apache/commons-lang/commit/55817e22332cfcb26238eecdf6643dada5d3c527/src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java
REFACTORING URL: https://github.com/apache/commons-lang/blob/55817e22332cfcb26238eecdf6643dada5d3c527/src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java#L98
DIRECTLY EXTRACTED OPERATION:
            String formatName, String decodeFormatName) {
        StringBuffer pattern = new StringBuffer();
        StringBuffer expected = new StringBuffer();
        StringBuffer decodePattern = new StringBuffer();
        for (int i = 0; i < args.length; i++) {
            pattern.append(i).append(": {").append(i);
            if (formatName != null) {
                pattern.append(',').append(formatName);
            }
            pattern.append("}; ");
            expected.append(i).append(": ");
            if (format != null) {
                format.format(args[i], expected, new FieldPosition(0));
            } else {
                expected.append(String.valueOf(args[i]));
            }
            expected.append("; ");
            decodePattern.append(i).append(": {").append(i);
            if (decodeFormatName != null || formatName != null) {
                decodePattern.append(',').append(
                        decodeFormatName == null ? formatName
                                : decodeFormatName);
            }
            decodePattern.append("}; ");
        }
        doAssertions(expected.toString(), pattern.toString(), args,
                decodePattern.toString());
    }

PARAMS COUNT: 4
IS VOID METHOD: true
FRAGMENT LENGTH: 1218
FRAGMENT LINE AVG SIZE: 42.0
DEPTHS:
1 2 2 2 2 3 4 5 4 3 3 3 4 4 4 3 3 3 4 5 5 5 4 3 2 2 2 1 1 
AREA: 89
AVG DEPTH: 3.0689655172413794
---REFACTORING_FINISH---
DESCRIPTION: Extract Method	protected doAssertions(format Format, args Object[], formatName String) : void extracted from public testLongTime() : void in class org.apache.commons.lang.text.AbstractMessageFormatTest
REFACTORING FILE DIFF URL: https://github.com/apache/commons-lang/commit/55817e22332cfcb26238eecdf6643dada5d3c527/src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java
REFACTORING URL: https://github.com/apache/commons-lang/blob/55817e22332cfcb26238eecdf6643dada5d3c527/src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java#L94
DIRECTLY EXTRACTED OPERATION:
        doAssertions(format, args, formatName, null);
    }

PARAMS COUNT: 3
IS VOID METHOD: true
FRAGMENT LENGTH: 61
FRAGMENT LINE AVG SIZE: 20.333333333333332
DEPTHS:
1 1 1 
AREA: 3
AVG DEPTH: 1.0
---REFACTORING_FINISH---
DESCRIPTION: Extract Method	protected doAssertions(format Format, args Object[], formatName String) : void extracted from public testChoice() : void in class org.apache.commons.lang.text.AbstractMessageFormatTest
REFACTORING FILE DIFF URL: https://github.com/apache/commons-lang/commit/55817e22332cfcb26238eecdf6643dada5d3c527/src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java
REFACTORING URL: https://github.com/apache/commons-lang/blob/55817e22332cfcb26238eecdf6643dada5d3c527/src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java#L94
DIRECTLY EXTRACTED OPERATION:
        doAssertions(format, args, formatName, null);
    }

PARAMS COUNT: 3
IS VOID METHOD: true
FRAGMENT LENGTH: 61
FRAGMENT LINE AVG SIZE: 20.333333333333332
DEPTHS:
1 1 1 
AREA: 3
AVG DEPTH: 1.0
---REFACTORING_FINISH---
DESCRIPTION: Extract Method	protected doAssertions(format Format, args Object[], formatName String) : void extracted from public testChoiceLooseFormatting() : void in class org.apache.commons.lang.text.AbstractMessageFormatTest
REFACTORING FILE DIFF URL: https://github.com/apache/commons-lang/commit/55817e22332cfcb26238eecdf6643dada5d3c527/src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java
REFACTORING URL: https://github.com/apache/commons-lang/blob/55817e22332cfcb26238eecdf6643dada5d3c527/src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java#L94
DIRECTLY EXTRACTED OPERATION:
        doAssertions(format, args, formatName, null);
    }

PARAMS COUNT: 3
IS VOID METHOD: true
FRAGMENT LENGTH: 61
FRAGMENT LINE AVG SIZE: 20.333333333333332
DEPTHS:
1 1 1 
AREA: 3
AVG DEPTH: 1.0
---REFACTORING_FINISH---
DESCRIPTION: Extract Method	protected doAssertions(format Format, args Object[], formatName String) : void extracted from public testChoiceRecursive() : void in class org.apache.commons.lang.text.AbstractMessageFormatTest
REFACTORING FILE DIFF URL: https://github.com/apache/commons-lang/commit/55817e22332cfcb26238eecdf6643dada5d3c527/src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java
REFACTORING URL: https://github.com/apache/commons-lang/blob/55817e22332cfcb26238eecdf6643dada5d3c527/src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java#L94
DIRECTLY EXTRACTED OPERATION:
        doAssertions(format, args, formatName, null);
    }

PARAMS COUNT: 3
IS VOID METHOD: true
FRAGMENT LENGTH: 61
FRAGMENT LINE AVG SIZE: 20.333333333333332
DEPTHS:
1 1 1 
AREA: 3
AVG DEPTH: 1.0
---REFACTORING_FINISH---
DESCRIPTION: Extract Method	protected doAssertions(format Format, args Object[], formatName String, decodeFormatName String) : void extracted from public testFullTime() : void in class org.apache.commons.lang.text.AbstractMessageFormatTest
REFACTORING FILE DIFF URL: https://github.com/apache/commons-lang/commit/55817e22332cfcb26238eecdf6643dada5d3c527/src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java
REFACTORING URL: https://github.com/apache/commons-lang/blob/55817e22332cfcb26238eecdf6643dada5d3c527/src/test/org/apache/commons/lang/text/AbstractMessageFormatTest.java#L98
DIRECTLY EXTRACTED OPERATION:
            String formatName, String decodeFormatName) {
        StringBuffer pattern = new StringBuffer();
        StringBuffer expected = new StringBuffer();
        StringBuffer decodePattern = new StringBuffer();
        for (int i = 0; i < args.length; i++) {
            pattern.append(i).append(": {").append(i);
            if (formatName != null) {
                pattern.append(',').append(formatName);
            }
            pattern.append("}; ");
            expected.append(i).append(": ");
            if (format != null) {
                format.format(args[i], expected, new FieldPosition(0));
            } else {
                expected.append(String.valueOf(args[i]));
            }
            expected.append("; ");
            decodePattern.append(i).append(": {").append(i);
            if (decodeFormatName != null || formatName != null) {
                decodePattern.append(',').append(
                        decodeFormatName == null ? formatName
                                : decodeFormatName);
            }
            decodePattern.append("}; ");
        }
        doAssertions(expected.toString(), pattern.toString(), args,
                decodePattern.toString());
    }

PARAMS COUNT: 4
IS VOID METHOD: true
FRAGMENT LENGTH: 1218
FRAGMENT LINE AVG SIZE: 42.0
DEPTHS:
1 2 2 2 2 3 4 5 4 3 3 3 4 4 4 3 3 3 4 5 5 5 4 3 2 2 2 1 1 
AREA: 89
AVG DEPTH: 3.0689655172413794
---REFACTORING_FINISH---
-----REFACTORINGS_END-----
COMMIT ID: 2ddc45fc774db0d0ab1ee896aef632a02a02e4ff
URL: https://github.com/apache/commons-lang/commit/2ddc45fc774db0d0ab1ee896aef632a02a02e4ff
DESCRIPTION: Extract Method	private doUnescape(writer Writer, string String, firstAmp int) : void extracted from public unescape(writer Writer, string String) : void in class org.apache.commons.lang.Entities
REFACTORING FILE DIFF URL: https://github.com/apache/commons-lang/commit/2ddc45fc774db0d0ab1ee896aef632a02a02e4ff/src/java/org/apache/commons/lang/Entities.java
REFACTORING URL: https://github.com/apache/commons-lang/blob/2ddc45fc774db0d0ab1ee896aef632a02a02e4ff/src/java/org/apache/commons/lang/Entities.java#L909
DIRECTLY EXTRACTED OPERATION:
        writer.write(string, 0, firstAmp);
        int len = string.length();
        for (int i = firstAmp; i < len; i++) {
            char c = string.charAt(i);
            if (c == '&') {
                int nextIdx = i + 1;
                int semiColonIdx = string.indexOf(';', nextIdx);
                if (semiColonIdx == -1) {
                    writer.write(c);
                    continue;
                }
                int amphersandIdx = string.indexOf('&', i + 1);
                if (amphersandIdx != -1 && amphersandIdx < semiColonIdx) {
                    // Then the text looks like &...&...;
                    writer.write(c);
                    continue;
                }
                String entityContent = string.substring(nextIdx, semiColonIdx);
                int entityValue = -1;
                int entityContentLen = entityContent.length();
                if (entityContentLen > 0) {
                    if (entityContent.charAt(0) == '#') { // escaped value content is an integer (decimal or
                        // hexidecimal)
                        if (entityContentLen > 1) {
                            char isHexChar = entityContent.charAt(1);
                            try {
                                switch (isHexChar) {
                                    case 'X' :
                                    case 'x' : {
                                        entityValue = Integer.parseInt(entityContent.substring(2), 16);
                                        break;
                                    }
                                    default : {
                                        entityValue = Integer.parseInt(entityContent.substring(1), 10);
                                    }
                                }
                                if (entityValue > 0xFFFF) {
                                    entityValue = -1;
                                }
                            } catch (NumberFormatException e) {
                                entityValue = -1;
                            }
                        }
                    } else { // escaped value content is an entity name
                        entityValue = this.entityValue(entityContent);
                    }
                }

                if (entityValue == -1) {
                    writer.write('&');
                    writer.write(entityContent);
                    writer.write(';');
                } else {
                    writer.write(entityValue);
                }
                i = semiColonIdx; // move index up to the semi-colon
            } else {
                writer.write(c);
            }
        }
    }

PARAMS COUNT: 3
IS VOID METHOD: true
FRAGMENT LENGTH: 2709
FRAGMENT LINE AVG SIZE: 43.693548387096776
DEPTHS:
0 1 1 2 2 3 3 3 4 4 3 3 3 4 4 4 3 3 3 3 3 4 5 5 6 6 7 8 8 9 9 8 8 9 8 7 7 8 7 7 7 6 5 5 5 4 3 3 3 4 4 4 4 4 3 3 3 3 2 1 0 0 
AREA: 271
AVG DEPTH: 4.370967741935484
---REFACTORING_FINISH---
-----REFACTORINGS_END-----
COMMIT ID: ec4a0fdfac5f8e27aec46f9e04a255cf31b40686
URL: https://github.com/apache/commons-lang/commit/ec4a0fdfac5f8e27aec46f9e04a255cf31b40686
DESCRIPTION: Extract Method	protected appendCyclicObject(buffer StringBuffer, fieldName String, value Object) : void extracted from protected appendInternal(buffer StringBuffer, fieldName String, value Object, detail boolean) : void in class org.apache.commons.lang.builder.ToStringStyle
REFACTORING FILE DIFF URL: https://github.com/apache/commons-lang/commit/ec4a0fdfac5f8e27aec46f9e04a255cf31b40686/src/java/org/apache/commons/lang/builder/ToStringStyle.java
REFACTORING URL: https://github.com/apache/commons-lang/blob/ec4a0fdfac5f8e27aec46f9e04a255cf31b40686/src/java/org/apache/commons/lang/builder/ToStringStyle.java#L517
DIRECTLY EXTRACTED OPERATION:
     * <p>Append to the <code>toString</code> an <code>Object</code>
     * value that has been detected to participate in a cycle. This
     * implementation will print the standard string value of the value.</p>
     * 
     * @param buffer  the <code>StringBuffer</code> to populate
     * @param fieldName  the field name, typically not used as already appended
     * @param value  the value to add to the <code>toString</code>,
     *  not <code>null</code>
     *  
     * @since 2.2
     */
    protected void appendCyclicObject(StringBuffer buffer, String fieldName, Object value) {
       ObjectUtils.appendIdentityToString(buffer, value);
    }

PARAMS COUNT: 3
IS VOID METHOD: true
FRAGMENT LENGTH: 657
FRAGMENT LINE AVG SIZE: 43.8
DEPTHS:
0 1 1 1 1 1 1 1 1 1 1 1 2 1 1 
AREA: 15
AVG DEPTH: 1.0
---REFACTORING_FINISH---
-----REFACTORINGS_END-----
COMMIT ID: dd23ae863a8910581362b69c660b26d8e8f699b7
URL: https://github.com/apache/commons-lang/commit/dd23ae863a8910581362b69c660b26d8e8f699b7
DESCRIPTION: Extract Method	private assertEqualDuration(message String, expected String, start int[], end int[], format String) : void extracted from private assertEqualDuration(expected String, start int[], end int[], format String) : void in class org.apache.commons.lang.time.DurationFormatUtilsTest
REFACTORING FILE DIFF URL: https://github.com/apache/commons-lang/commit/dd23ae863a8910581362b69c660b26d8e8f699b7/src/test/org/apache/commons/lang/time/DurationFormatUtilsTest.java
REFACTORING URL: https://github.com/apache/commons-lang/blob/dd23ae863a8910581362b69c660b26d8e8f699b7/src/test/org/apache/commons/lang/time/DurationFormatUtilsTest.java#L498
DIRECTLY EXTRACTED OPERATION:
        Calendar cal1 = Calendar.getInstance();
        cal1.set(start[0], start[1], start[2], start[3], start[4], start[5]);
        cal1.set(Calendar.MILLISECOND, 0);
        Calendar cal2 = Calendar.getInstance();
        cal2.set(end[0], end[1], end[2], end[3], end[4], end[5]);
        cal2.set(Calendar.MILLISECOND, 0);
        long milli1 = cal1.getTime().getTime();
        long milli2 = cal2.getTime().getTime();
        String result = DurationFormatUtils.formatPeriod(milli1, milli2, format);
        if (message == null) {
            assertEquals(expected, result);
        } else {
            assertEquals(message, expected, result);
        }
    }

PARAMS COUNT: 5
IS VOID METHOD: true
FRAGMENT LENGTH: 666
FRAGMENT LINE AVG SIZE: 41.625
DEPTHS:
1 2 2 2 2 2 2 2 2 2 3 3 3 2 1 1 
AREA: 32
AVG DEPTH: 2.0
---REFACTORING_FINISH---
-----REFACTORINGS_END-----
COMMIT ID: 94530f113eca2f7612a0d5729e894038b32361fb
URL: https://github.com/apache/commons-lang/commit/94530f113eca2f7612a0d5729e894038b32361fb
DESCRIPTION: Extract Method	private assertEqualDuration(expected String, start int[], end int[], format String) : void extracted from public testBugzilla38401() : void in class org.apache.commons.lang.time.DurationFormatUtilsTest
REFACTORING FILE DIFF URL: https://github.com/apache/commons-lang/commit/94530f113eca2f7612a0d5729e894038b32361fb/src/test/org/apache/commons/lang/time/DurationFormatUtilsTest.java
REFACTORING URL: https://github.com/apache/commons-lang/blob/94530f113eca2f7612a0d5729e894038b32361fb/src/test/org/apache/commons/lang/time/DurationFormatUtilsTest.java#L426
DIRECTLY EXTRACTED OPERATION:
        Calendar cal1 = Calendar.getInstance();
        cal1.set(start[0], start[1], start[2], start[3], start[4], start[5]);
        cal1.set(Calendar.MILLISECOND, 0);
        Calendar cal2 = Calendar.getInstance();
        cal2.set(end[0], end[1], end[2], end[3], end[4], end[5]);
        cal2.set(Calendar.MILLISECOND, 0);
        String result = DurationFormatUtils.formatPeriod(cal1.getTime().getTime(), cal2.getTime().getTime(), format);
        assertEquals(expected, result);
    }

PARAMS COUNT: 4
IS VOID METHOD: true
FRAGMENT LENGTH: 491
FRAGMENT LINE AVG SIZE: 49.1
DEPTHS:
1 2 2 2 2 2 2 2 1 1 
AREA: 17
AVG DEPTH: 1.7
---REFACTORING_FINISH---
DESCRIPTION: Extract Method	private assertEqualDuration(expected String, start int[], end int[], format String) : void extracted from public testJiraLang281() : void in class org.apache.commons.lang.time.DurationFormatUtilsTest
REFACTORING FILE DIFF URL: https://github.com/apache/commons-lang/commit/94530f113eca2f7612a0d5729e894038b32361fb/src/test/org/apache/commons/lang/time/DurationFormatUtilsTest.java
REFACTORING URL: https://github.com/apache/commons-lang/blob/94530f113eca2f7612a0d5729e894038b32361fb/src/test/org/apache/commons/lang/time/DurationFormatUtilsTest.java#L426
DIRECTLY EXTRACTED OPERATION:
        Calendar cal1 = Calendar.getInstance();
        cal1.set(start[0], start[1], start[2], start[3], start[4], start[5]);
        cal1.set(Calendar.MILLISECOND, 0);
        Calendar cal2 = Calendar.getInstance();
        cal2.set(end[0], end[1], end[2], end[3], end[4], end[5]);
        cal2.set(Calendar.MILLISECOND, 0);
        String result = DurationFormatUtils.formatPeriod(cal1.getTime().getTime(), cal2.getTime().getTime(), format);
        assertEquals(expected, result);
    }

PARAMS COUNT: 4
IS VOID METHOD: true
FRAGMENT LENGTH: 491
FRAGMENT LINE AVG SIZE: 49.1
DEPTHS:
1 2 2 2 2 2 2 2 1 1 
AREA: 17
AVG DEPTH: 1.7
---REFACTORING_FINISH---
-----REFACTORINGS_END-----
COMMIT ID: 320b0b259c855cb78d763912e532e1ec91c023f9
URL: https://github.com/apache/commons-lang/commit/320b0b259c855cb78d763912e532e1ec91c023f9
DESCRIPTION: Extract Method	public join(array Object[], separator char, startIndex int, endIndex int) : String extracted from public join(array Object[], separator char) : String in class org.apache.commons.lang.StringUtils
REFACTORING FILE DIFF URL: https://github.com/apache/commons-lang/commit/320b0b259c855cb78d763912e532e1ec91c023f9/src/java/org/apache/commons/lang/StringUtils.java
REFACTORING URL: https://github.com/apache/commons-lang/blob/320b0b259c855cb78d763912e532e1ec91c023f9/src/java/org/apache/commons/lang/StringUtils.java#L2557
DIRECTLY EXTRACTED OPERATION:
     * <p>Joins the elements of the provided array into a single String
     * containing the provided list of elements.</p>
     *
     * <p>No delimiter is added before or after the list.
     * Null objects or empty strings within the array are represented by
     * empty strings.</p>
     *
     * <pre>
     * StringUtils.join(null, *)               = null
     * StringUtils.join([], *)                 = ""
     * StringUtils.join([null], *)             = ""
     * StringUtils.join(["a", "b", "c"], ';')  = "a;b;c"
     * StringUtils.join(["a", "b", "c"], null) = "abc"
     * StringUtils.join([null, "", "a"], ';')  = ";;a"
     * </pre>
     *
     * @param array  the array of values to join together, may be null
     * @param separator  the separator character to use
     * @param startIndex the first index to start joining from.  It is
     * an error to pass in an end index past the end of the array
     * @param endIndex the index to stop joining from (exclusive). It is
     * an error to pass in an end index past the end of the array
     * @return the joined String, <code>null</code> if null array input
     * @since 2.0
     */
    public static String join(Object[] array, char separator, int startIndex, int endIndex) {
        if (array == null) {
            return null;
        }
        int bufSize = (endIndex - startIndex);
        if (bufSize <= 0) {
            return EMPTY;
        }

        bufSize *= ((array[startIndex] == null ? 16 : array[startIndex].toString().length()) + 1);
        StringBuffer buf = new StringBuffer(bufSize);

        for (int i = startIndex; i < endIndex; i++) {
            if (i > startIndex) {
                buf.append(separator);
            }
            if (array[i] != null) {
                buf.append(array[i]);
            }
        }
        return buf.toString();
    }

PARAMS COUNT: 4
IS VOID METHOD: false
FRAGMENT LENGTH: 1857
FRAGMENT LINE AVG SIZE: 38.6875
DEPTHS:
0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 2 3 2 2 2 3 2 2 2 2 2 2 3 4 3 3 4 3 2 2 1 1 
AREA: 77
AVG DEPTH: 1.6041666666666667
---REFACTORING_FINISH---
DESCRIPTION: Extract Method	public join(array Object[], separator String, startIndex int, endIndex int) : String extracted from public join(array Object[], separator String) : String in class org.apache.commons.lang.StringUtils
REFACTORING FILE DIFF URL: https://github.com/apache/commons-lang/commit/320b0b259c855cb78d763912e532e1ec91c023f9/src/java/org/apache/commons/lang/StringUtils.java
REFACTORING URL: https://github.com/apache/commons-lang/blob/320b0b259c855cb78d763912e532e1ec91c023f9/src/java/org/apache/commons/lang/StringUtils.java#L2637
DIRECTLY EXTRACTED OPERATION:
     * <p>Joins the elements of the provided array into a single String
     * containing the provided list of elements.</p>
     *
     * <p>No delimiter is added before or after the list.
     * A <code>null</code> separator is the same as an empty String ("").
     * Null objects or empty strings within the array are represented by
     * empty strings.</p>
     *
     * <pre>
     * StringUtils.join(null, *)                = null
     * StringUtils.join([], *)                  = ""
     * StringUtils.join([null], *)              = ""
     * StringUtils.join(["a", "b", "c"], "--")  = "a--b--c"
     * StringUtils.join(["a", "b", "c"], null)  = "abc"
     * StringUtils.join(["a", "b", "c"], "")    = "abc"
     * StringUtils.join([null, "", "a"], ',')   = ",,a"
     * </pre>
     *
     * @param array  the array of values to join together, may be null
     * @param separator  the separator character to use, null treated as ""
     * @param startIndex the first index to start joining from.  It is
     * an error to pass in an end index past the end of the array
     * @param endIndex the index to stop joining from (exclusive). It is
     * an error to pass in an end index past the end of the array
     * @return the joined String, <code>null</code> if null array input
     */
    public static String join(Object[] array, String separator, int startIndex, int endIndex) {
        if (array == null) {
            return null;
        }
        if (separator == null) {
            separator = EMPTY;
        }

        // endIndex - startIndex > 0:   Len = NofStrings *(len(firstString) + len(separator))
        //           (Assuming that all Strings are roughly equally long)
        int bufSize = (endIndex - startIndex);
        if (bufSize <= 0) {
            return EMPTY;
        }

        bufSize *= ((array[startIndex] == null ? 16 : array[startIndex].toString().length())
                        + separator.length());

        StringBuffer buf = new StringBuffer(bufSize);

        for (int i = startIndex; i < endIndex; i++) {
            if (i > startIndex) {
                buf.append(separator);
            }
            if (array[i] != null) {
                buf.append(array[i]);
            }
        }
        return buf.toString();
    }

PARAMS COUNT: 4
IS VOID METHOD: false
FRAGMENT LENGTH: 2284
FRAGMENT LINE AVG SIZE: 40.07017543859649
DEPTHS:
0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 2 3 2 2 3 2 2 2 2 2 2 3 2 2 2 2 2 2 2 2 3 4 3 3 4 3 2 2 1 1 
AREA: 95
AVG DEPTH: 1.6666666666666667
---REFACTORING_FINISH---
-----REFACTORINGS_END-----
COMMIT ID: c803367cd0b3339c0aa3a687e90d51ca6c10624e
URL: https://github.com/apache/commons-lang/commit/c803367cd0b3339c0aa3a687e90d51ca6c10624e
DESCRIPTION: Extract Method	private getNameInOtherClassLoader(other Object) : String extracted from public equals(other Object) : boolean in class Enum
REFACTORING FILE DIFF URL: https://github.com/apache/commons-lang/commit/c803367cd0b3339c0aa3a687e90d51ca6c10624e/src/java/org/apache/commons/lang/enum/Enum.java
REFACTORING URL: https://github.com/apache/commons-lang/blob/c803367cd0b3339c0aa3a687e90d51ca6c10624e/src/java/org/apache/commons/lang/enum/Enum.java#L590
DIRECTLY EXTRACTED OPERATION:
        try {
            Method mth = other.getClass().getMethod("getName", null);
            String name = (String) mth.invoke(other, null);
            return name;
        } catch (NoSuchMethodException e) {
            // ignore - should never happen
        } catch (IllegalAccessException e) {
            // ignore - should never happen
        } catch (InvocationTargetException e) {
            // ignore - should never happen
        }
        throw new IllegalStateException("This should not happen");
    }

FRAGMENT LENGTH: 522
FRAGMENT LINE AVG SIZE: 37.285714285714285
DEPTHS:
1 2 2 2 2 2 2 2 2 2 1 1 0 0 
AREA: 21
AVG DEPTH: 1.5
---REFACTORING_FINISH---
DESCRIPTION: Extract Method	private getNameInOtherClassLoader(other Object) : String extracted from public equals(other Object) : boolean in class org.apache.commons.lang.enums.Enum
REFACTORING FILE DIFF URL: https://github.com/apache/commons-lang/commit/c803367cd0b3339c0aa3a687e90d51ca6c10624e/src/java/org/apache/commons/lang/enums/Enum.java
REFACTORING URL: https://github.com/apache/commons-lang/blob/c803367cd0b3339c0aa3a687e90d51ca6c10624e/src/java/org/apache/commons/lang/enums/Enum.java#L587
DIRECTLY EXTRACTED OPERATION:
        try {
            Method mth = other.getClass().getMethod("getName", null);
            String name = (String) mth.invoke(other, null);
            return name;
        } catch (NoSuchMethodException e) {
            // ignore - should never happen
        } catch (IllegalAccessException e) {
            // ignore - should never happen
        } catch (InvocationTargetException e) {
            // ignore - should never happen
        }
        throw new IllegalStateException("This should not happen");
    }

PARAMS COUNT: 1
IS VOID METHOD: false
FRAGMENT LENGTH: 522
FRAGMENT LINE AVG SIZE: 37.285714285714285
DEPTHS:
1 2 2 2 2 2 2 2 2 2 1 1 0 0 
AREA: 21
AVG DEPTH: 1.5
---REFACTORING_FINISH---
-----REFACTORINGS_END-----
COMMIT ID: 8393f10b791c4fd28a1031f0a6427a2c9af04977
URL: https://github.com/apache/commons-lang/commit/8393f10b791c4fd28a1031f0a6427a2c9af04977
DESCRIPTION: Extract Method	public reflectionEquals(lhs Object, rhs Object, testTransients boolean, reflectUpToClass Class, excludeFields String[]) : boolean extracted from public reflectionEquals(lhs Object, rhs Object, testTransients boolean, reflectUpToClass Class) : boolean in class org.apache.commons.lang.builder.EqualsBuilder
REFACTORING FILE DIFF URL: https://github.com/apache/commons-lang/commit/8393f10b791c4fd28a1031f0a6427a2c9af04977/src/java/org/apache/commons/lang/builder/EqualsBuilder.java
REFACTORING URL: https://github.com/apache/commons-lang/blob/8393f10b791c4fd28a1031f0a6427a2c9af04977/src/java/org/apache/commons/lang/builder/EqualsBuilder.java#L203
DIRECTLY EXTRACTED OPERATION:
     * <p>This method uses reflection to determine if the two <code>Object</code>s
     * are equal.</p>
     *
     * <p>It uses <code>AccessibleObject.setAccessible</code> to gain access to private
     * fields. This means that it will throw a security exception if run under
     * a security manager, if the permissions are not set up correctly. It is also
     * not as efficient as testing explicitly.</p>
     *
     * <p>If the testTransients parameter is set to <code>true</code>, transient
     * members will be tested, otherwise they are ignored, as they are likely
     * derived fields, and not part of the value of the <code>Object</code>.</p>
     *
     * <p>Static fields will not be included. Superclass fields will be appended
     * up to and including the specified superclass. A null superclass is treated
     * as java.lang.Object.</p>
     *
     * @param lhs  <code>this</code> object
     * @param rhs  the other object
     * @param testTransients  whether to include transient fields
     * @param reflectUpToClass  the superclass to reflect up to (inclusive),
     *  may be <code>null</code>
     * @param excludeFields  array of field names to exclude from testing
     * @return <code>true</code> if the two Objects have tested equals.
     * @since 2.0
     */
    public static boolean reflectionEquals(Object lhs, Object rhs, boolean testTransients, Class reflectUpToClass,
            String[] excludeFields) {
        if (lhs == rhs) {
            return true;
        }
        if (lhs == null || rhs == null) {
            return false;
        }
        // Find the leaf class since there may be transients in the leaf 
        // class or in classes between the leaf and root.
        // If we are not testing transients or a subclass has no ivars, 
        // then a subclass can test equals to a superclass.
        Class lhsClass = lhs.getClass();
        Class rhsClass = rhs.getClass();
        Class testClass;
        if (lhsClass.isInstance(rhs)) {
            testClass = lhsClass;
            if (!rhsClass.isInstance(lhs)) {
                // rhsClass is a subclass of lhsClass
                testClass = rhsClass;
            }
        } else if (rhsClass.isInstance(lhs)) {
            testClass = rhsClass;
            if (!lhsClass.isInstance(rhs)) {
                // lhsClass is a subclass of rhsClass
                testClass = lhsClass;
            }
        } else {
            // The two classes are not related.
            return false;
        }
        EqualsBuilder equalsBuilder = new EqualsBuilder();
        try {
            reflectionAppend(lhs, rhs, testClass, equalsBuilder, testTransients, excludeFields);
            while (testClass.getSuperclass() != null && testClass != reflectUpToClass) {
                testClass = testClass.getSuperclass();
                reflectionAppend(lhs, rhs, testClass, equalsBuilder, testTransients, excludeFields);
            }
        } catch (IllegalArgumentException e) {
            // In this case, we tried to test a subclass vs. a superclass and
            // the subclass has ivars or the ivars are transient and 
            // we are testing transients.
            // If a subclass has ivars that we are trying to test them, we get an
            // exception and we know that the objects are not equal.
            return false;
        }
        return equalsBuilder.isEquals();
    }

PARAMS COUNT: 5
IS VOID METHOD: false
FRAGMENT LENGTH: 3420
FRAGMENT LINE AVG SIZE: 46.21621621621622
DEPTHS:
0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 2 3 2 2 3 2 2 2 2 2 2 2 2 2 3 3 4 4 3 3 3 3 4 4 3 3 3 3 2 2 2 3 3 4 4 3 3 3 3 3 3 3 3 2 2 1 1 
AREA: 152
AVG DEPTH: 2.054054054054054
---REFACTORING_FINISH---
-----REFACTORINGS_END-----
COMMIT ID: fc55439441b6a61d00a4e43fbe91c2bc87b990c6
URL: https://github.com/apache/commons-lang/commit/fc55439441b6a61d00a4e43fbe91c2bc87b990c6
DESCRIPTION: Extract Method	private validateNonSecretField(toString String) : void extracted from package validateToStringValue(toString String) : void in class org.apache.commons.lang.builder.ReflectionToStringBuilderExcludeTest
REFACTORING FILE DIFF URL: https://github.com/apache/commons-lang/commit/fc55439441b6a61d00a4e43fbe91c2bc87b990c6/src/test/org/apache/commons/lang/builder/ReflectionToStringBuilderExcludeTest.java
REFACTORING URL: https://github.com/apache/commons-lang/blob/fc55439441b6a61d00a4e43fbe91c2bc87b990c6/src/test/org/apache/commons/lang/builder/ReflectionToStringBuilderExcludeTest.java#L110
DIRECTLY EXTRACTED OPERATION:
        Assert.assertTrue(toString.indexOf(NOT_SECRET_FIELD) > ArrayUtils.INDEX_NOT_FOUND);
        Assert.assertTrue(toString.indexOf(NOT_SECRET_VALUE) > ArrayUtils.INDEX_NOT_FOUND);
    }

PARAMS COUNT: 1
IS VOID METHOD: true
FRAGMENT LENGTH: 191
FRAGMENT LINE AVG SIZE: 47.75
DEPTHS:
1 2 1 1 
AREA: 5
AVG DEPTH: 1.25
---REFACTORING_FINISH---
-----REFACTORINGS_END-----
COMMIT ID: a9f5a6b1886992b35795fe5a3388bcaa53a1df5a
URL: https://github.com/apache/commons-lang/commit/a9f5a6b1886992b35795fe5a3388bcaa53a1df5a
DESCRIPTION: Extract Method	public getThrowableList(throwable Throwable) : List extracted from public getThrowableCount(throwable Throwable) : int in class org.apache.commons.lang.exception.ExceptionUtils
REFACTORING FILE DIFF URL: https://github.com/apache/commons-lang/commit/a9f5a6b1886992b35795fe5a3388bcaa53a1df5a/src/java/org/apache/commons/lang/exception/ExceptionUtils.java
REFACTORING URL: https://github.com/apache/commons-lang/blob/a9f5a6b1886992b35795fe5a3388bcaa53a1df5a/src/java/org/apache/commons/lang/exception/ExceptionUtils.java#L530
DIRECTLY EXTRACTED OPERATION:
     * <p>Returns the list of <code>Throwable</code> objects in the
     * exception chain.</p>
     *
     * <p>A throwable without cause will return a list containing
     * one element - the input throwable.
     * A throwable with one cause will return a list containing
     * two elements. - the input throwable and the cause throwable.
     * A <code>null</code> throwable will return a list of size zero.</p>
     *
     * <p>This method handles recursive cause structures that might
     * otherwise cause infinite loops. The cause chain is processed until
     * the end is reached, or until the next item in the chain is already
     * in the result set.</p>
     *
     * @param throwable  the throwable to inspect, may be null
     * @return the list of throwables, never null
     * @since Commons Lang 2.2
     */
    public static List getThrowableList(Throwable throwable) {
        List list = new ArrayList();
        while (throwable != null && list.contains(throwable) == false) {
            list.add(throwable);
            throwable = ExceptionUtils.getCause(throwable);
        }
        return list;
    }

PARAMS COUNT: 1
IS VOID METHOD: false
FRAGMENT LENGTH: 1133
FRAGMENT LINE AVG SIZE: 41.96296296296296
DEPTHS:
0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 2 2 3 3 2 2 1 1 
AREA: 34
AVG DEPTH: 1.2592592592592593
---REFACTORING_FINISH---
DESCRIPTION: Extract Method	public getThrowableList(throwable Throwable) : List extracted from public getThrowables(throwable Throwable) : Throwable[] in class org.apache.commons.lang.exception.ExceptionUtils
REFACTORING FILE DIFF URL: https://github.com/apache/commons-lang/commit/a9f5a6b1886992b35795fe5a3388bcaa53a1df5a/src/java/org/apache/commons/lang/exception/ExceptionUtils.java
REFACTORING URL: https://github.com/apache/commons-lang/blob/a9f5a6b1886992b35795fe5a3388bcaa53a1df5a/src/java/org/apache/commons/lang/exception/ExceptionUtils.java#L530
DIRECTLY EXTRACTED OPERATION:
     * <p>Returns the list of <code>Throwable</code> objects in the
     * exception chain.</p>
     *
     * <p>A throwable without cause will return a list containing
     * one element - the input throwable.
     * A throwable with one cause will return a list containing
     * two elements. - the input throwable and the cause throwable.
     * A <code>null</code> throwable will return a list of size zero.</p>
     *
     * <p>This method handles recursive cause structures that might
     * otherwise cause infinite loops. The cause chain is processed until
     * the end is reached, or until the next item in the chain is already
     * in the result set.</p>
     *
     * @param throwable  the throwable to inspect, may be null
     * @return the list of throwables, never null
     * @since Commons Lang 2.2
     */
    public static List getThrowableList(Throwable throwable) {
        List list = new ArrayList();
        while (throwable != null && list.contains(throwable) == false) {
            list.add(throwable);
            throwable = ExceptionUtils.getCause(throwable);
        }
        return list;
    }

PARAMS COUNT: 1
IS VOID METHOD: false
FRAGMENT LENGTH: 1133
FRAGMENT LINE AVG SIZE: 41.96296296296296
DEPTHS:
0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 2 2 3 3 2 2 1 1 
AREA: 34
AVG DEPTH: 1.2592592592592593
---REFACTORING_FINISH---
-----REFACTORINGS_END-----
COMMIT ID: b2da02296f79e4119b749522a1912f5be5ea4f8c
URL: https://github.com/apache/commons-lang/commit/b2da02296f79e4119b749522a1912f5be5ea4f8c
DESCRIPTION: Extract Method	private isDelimiter(ch char, delimiters char[]) : boolean extracted from public capitalize(str String, delimiters char[]) : String in class org.apache.commons.lang.WordUtils
REFACTORING FILE DIFF URL: https://github.com/apache/commons-lang/commit/b2da02296f79e4119b749522a1912f5be5ea4f8c/src/java/org/apache/commons/lang/WordUtils.java
REFACTORING URL: https://github.com/apache/commons-lang/blob/b2da02296f79e4119b749522a1912f5be5ea4f8c/src/java/org/apache/commons/lang/WordUtils.java#L565
DIRECTLY EXTRACTED OPERATION:
     * Is the character a delimiter.
     *
     * @param ch  the character to check
     * @param delimiters  the delimiters
     * @return true if it is a delimiter
     */
    private static boolean isDelimiter(char ch, char[] delimiters) {
        if (delimiters == null) {
            return Character.isWhitespace(ch);
        }
        for (int i = 0, isize = delimiters.length; i < isize; i++) {
            if (ch == delimiters[i]) {
                return true;
            }
        }
        return false;
    }

PARAMS COUNT: 2
IS VOID METHOD: false
FRAGMENT LENGTH: 525
FRAGMENT LINE AVG SIZE: 29.166666666666668
DEPTHS:
0 1 1 1 1 1 1 2 3 2 2 3 4 3 2 2 1 1 
AREA: 31
AVG DEPTH: 1.7222222222222223
---REFACTORING_FINISH---
DESCRIPTION: Extract Method	private isDelimiter(ch char, delimiters char[]) : boolean extracted from public uncapitalize(str String, delimiters char[]) : String in class org.apache.commons.lang.WordUtils
REFACTORING FILE DIFF URL: https://github.com/apache/commons-lang/commit/b2da02296f79e4119b749522a1912f5be5ea4f8c/src/java/org/apache/commons/lang/WordUtils.java
REFACTORING URL: https://github.com/apache/commons-lang/blob/b2da02296f79e4119b749522a1912f5be5ea4f8c/src/java/org/apache/commons/lang/WordUtils.java#L565
DIRECTLY EXTRACTED OPERATION:
     * Is the character a delimiter.
     *
     * @param ch  the character to check
     * @param delimiters  the delimiters
     * @return true if it is a delimiter
     */
    private static boolean isDelimiter(char ch, char[] delimiters) {
        if (delimiters == null) {
            return Character.isWhitespace(ch);
        }
        for (int i = 0, isize = delimiters.length; i < isize; i++) {
            if (ch == delimiters[i]) {
                return true;
            }
        }
        return false;
    }

PARAMS COUNT: 2
IS VOID METHOD: false
FRAGMENT LENGTH: 525
FRAGMENT LINE AVG SIZE: 29.166666666666668
DEPTHS:
0 1 1 1 1 1 1 2 3 2 2 3 4 3 2 2 1 1 
AREA: 31
AVG DEPTH: 1.7222222222222223
---REFACTORING_FINISH---
-----REFACTORINGS_END-----
COMMIT ID: b26d9c7877f9d87c5d06e9ae3171fe987958a408
URL: https://github.com/apache/commons-lang/commit/b26d9c7877f9d87c5d06e9ae3171fe987958a408
DESCRIPTION: Extract Method	protected cloneReset() : Object extracted from public clone() : Object in class org.apache.commons.lang.text.StrTokenizer
REFACTORING FILE DIFF URL: https://github.com/apache/commons-lang/commit/b26d9c7877f9d87c5d06e9ae3171fe987958a408/src/java/org/apache/commons/lang/text/StrTokenizer.java
REFACTORING URL: https://github.com/apache/commons-lang/blob/b26d9c7877f9d87c5d06e9ae3171fe987958a408/src/java/org/apache/commons/lang/text/StrTokenizer.java#L1064
DIRECTLY EXTRACTED OPERATION:
     * Creates a new instance of this Tokenizer. The new instance is reset so that it will be at the start of the token
     * list.
     * 
     * @return a new instance of this Tokenizer which has been reset.
     */
    protected Object cloneReset() throws CloneNotSupportedException {
        StrTokenizer cloned = (StrTokenizer) super.clone();
        if (cloned.chars != null) {
            cloned.chars = (char[]) cloned.chars.clone();
        }
        cloned.reset();
        return cloned;
    }

IS VOID METHOD: false
FRAGMENT LENGTH: 507
FRAGMENT LINE AVG SIZE: 36.214285714285715
DEPTHS:
0 1 1 1 1 1 2 2 3 2 2 2 1 1 
AREA: 20
AVG DEPTH: 1.4285714285714286
---REFACTORING_FINISH---
-----REFACTORINGS_END-----
COMMIT ID: 98e0d26cc93057f16b3ec6be95584e0531f6033b
URL: https://github.com/apache/commons-lang/commit/98e0d26cc93057f16b3ec6be95584e0531f6033b
DESCRIPTION: Extract Method	private doTestEscapeNamedEntity(expected String, entity String) : void extracted from public testEscapeNamedEntity() : void in class org.apache.commons.lang.EntitiesTest
REFACTORING FILE DIFF URL: https://github.com/apache/commons-lang/commit/98e0d26cc93057f16b3ec6be95584e0531f6033b/src/test/org/apache/commons/lang/EntitiesTest.java
REFACTORING URL: https://github.com/apache/commons-lang/blob/98e0d26cc93057f16b3ec6be95584e0531f6033b/src/test/org/apache/commons/lang/EntitiesTest.java#L67
DIRECTLY EXTRACTED OPERATION:
    {
        assertEquals(expected, entities.escape(entity));
        StringWriter writer = new StringWriter();
        entities.escape(writer, entity);
        assertEquals(expected, writer.toString());
    }
    
PARAMS COUNT: 2
IS VOID METHOD: true
FRAGMENT LENGTH: 216
FRAGMENT LINE AVG SIZE: 30.857142857142858
DEPTHS:
1 2 2 2 2 1 1 
AREA: 11
AVG DEPTH: 1.5714285714285714
---REFACTORING_FINISH---
DESCRIPTION: Extract Method	private doTestEscapeNamedEntity(expected String, entity String) : void extracted from public testEscapeNamedEntity() : void in class org.apache.commons.lang.EntitiesTest
REFACTORING FILE DIFF URL: https://github.com/apache/commons-lang/commit/98e0d26cc93057f16b3ec6be95584e0531f6033b/src/test/org/apache/commons/lang/EntitiesTest.java
REFACTORING URL: https://github.com/apache/commons-lang/blob/98e0d26cc93057f16b3ec6be95584e0531f6033b/src/test/org/apache/commons/lang/EntitiesTest.java#L67
DIRECTLY EXTRACTED OPERATION:
    {
        assertEquals(expected, entities.escape(entity));
        StringWriter writer = new StringWriter();
        entities.escape(writer, entity);
        assertEquals(expected, writer.toString());
    }
    
PARAMS COUNT: 2
IS VOID METHOD: true
FRAGMENT LENGTH: 216
FRAGMENT LINE AVG SIZE: 30.857142857142858
DEPTHS:
1 2 2 2 2 1 1 
AREA: 11
AVG DEPTH: 1.5714285714285714
---REFACTORING_FINISH---
DESCRIPTION: Extract Method	private doTestUnescapeEntity(expected String, entity String) : void extracted from public testUnescapeUnknownEntity() : void in class org.apache.commons.lang.EntitiesTest
REFACTORING FILE DIFF URL: https://github.com/apache/commons-lang/commit/98e0d26cc93057f16b3ec6be95584e0531f6033b/src/test/org/apache/commons/lang/EntitiesTest.java
REFACTORING URL: https://github.com/apache/commons-lang/blob/98e0d26cc93057f16b3ec6be95584e0531f6033b/src/test/org/apache/commons/lang/EntitiesTest.java#L98
DIRECTLY EXTRACTED OPERATION:
    {
        assertEquals(expected, entities.unescape(entity));
        StringWriter writer = new StringWriter();
        entities.unescape(writer, entity);
        assertEquals(expected, writer.toString());
    }
    
PARAMS COUNT: 2
IS VOID METHOD: true
FRAGMENT LENGTH: 220
FRAGMENT LINE AVG SIZE: 31.428571428571427
DEPTHS:
1 2 2 2 2 1 1 
AREA: 11
AVG DEPTH: 1.5714285714285714
---REFACTORING_FINISH---
-----REFACTORINGS_END-----
COMMIT ID: 810e69f7a470eb9dce71de314f0a98c0f7840a24
URL: https://github.com/apache/commons-lang/commit/810e69f7a470eb9dce71de314f0a98c0f7840a24
DESCRIPTION: Extract Method	private deleteImpl(startIndex int, endIndex int, len int) : void extracted from public delete(startIndex int, endIndex int) : StrBuilder in class org.apache.commons.lang.text.StrBuilder
REFACTORING FILE DIFF URL: https://github.com/apache/commons-lang/commit/810e69f7a470eb9dce71de314f0a98c0f7840a24/src/java/org/apache/commons/lang/text/StrBuilder.java
REFACTORING URL: https://github.com/apache/commons-lang/blob/810e69f7a470eb9dce71de314f0a98c0f7840a24/src/java/org/apache/commons/lang/text/StrBuilder.java#L1048
DIRECTLY EXTRACTED OPERATION:
     * Internal method to delete a range without validation.
     *
     * @param startIndex  the start index, must be valid
     * @param endIndex  the end index (exclusive), must be valid
     * @param len  the length, must be valid
     * @throws IndexOutOfBoundsException if any index is invalid
     */
    private void deleteImpl(int startIndex, int endIndex, int len) {
        System.arraycopy(buffer, endIndex, buffer, startIndex, size - endIndex);
        size -= len;
    }

PARAMS COUNT: 3
IS VOID METHOD: true
FRAGMENT LENGTH: 486
FRAGMENT LINE AVG SIZE: 40.5
DEPTHS:
0 1 1 1 1 1 1 1 2 2 1 1 
AREA: 13
AVG DEPTH: 1.0833333333333333
---REFACTORING_FINISH---
DESCRIPTION: Extract Method	private deleteImpl(startIndex int, endIndex int, len int) : void extracted from public delete(ch char) : StrBuilder in class org.apache.commons.lang.text.StrBuilder
REFACTORING FILE DIFF URL: https://github.com/apache/commons-lang/commit/810e69f7a470eb9dce71de314f0a98c0f7840a24/src/java/org/apache/commons/lang/text/StrBuilder.java
REFACTORING URL: https://github.com/apache/commons-lang/blob/810e69f7a470eb9dce71de314f0a98c0f7840a24/src/java/org/apache/commons/lang/text/StrBuilder.java#L1048
DIRECTLY EXTRACTED OPERATION:
     * Internal method to delete a range without validation.
     *
     * @param startIndex  the start index, must be valid
     * @param endIndex  the end index (exclusive), must be valid
     * @param len  the length, must be valid
     * @throws IndexOutOfBoundsException if any index is invalid
     */
    private void deleteImpl(int startIndex, int endIndex, int len) {
        System.arraycopy(buffer, endIndex, buffer, startIndex, size - endIndex);
        size -= len;
    }

PARAMS COUNT: 3
IS VOID METHOD: true
FRAGMENT LENGTH: 486
FRAGMENT LINE AVG SIZE: 40.5
DEPTHS:
0 1 1 1 1 1 1 1 2 2 1 1 
AREA: 13
AVG DEPTH: 1.0833333333333333
---REFACTORING_FINISH---
DESCRIPTION: Extract Method	private replaceImpl(startIndex int, endIndex int, removeLen int, insertStr String, insertLen int) : void extracted from public replace(startIndex int, endIndex int, str String) : StrBuilder in class org.apache.commons.lang.text.StrBuilder
REFACTORING FILE DIFF URL: https://github.com/apache/commons-lang/commit/810e69f7a470eb9dce71de314f0a98c0f7840a24/src/java/org/apache/commons/lang/text/StrBuilder.java
REFACTORING URL: https://github.com/apache/commons-lang/blob/810e69f7a470eb9dce71de314f0a98c0f7840a24/src/java/org/apache/commons/lang/text/StrBuilder.java#L1185
DIRECTLY EXTRACTED OPERATION:
     * Internal method to delete a range without validation.
     *
     * @param startIndex  the start index, must be valid
     * @param endIndex  the end index (exclusive), must be valid
     * @param removeLen  the length to remove (endIndex - startIndex), must be valid
     * @param insertStr  the string to replace with, null means delete range
     * @param insertLen  the length of the insert string, must be valid
     * @param len  the length, must be valid
     * @throws IndexOutOfBoundsException if any index is invalid
     */
    private void replaceImpl(int startIndex, int endIndex, int removeLen, String insertStr, int insertLen) {
        int newSize = size - removeLen + insertLen;
        if (insertLen != removeLen) {
            ensureCapacity(newSize);
            System.arraycopy(buffer, endIndex, buffer, startIndex + insertLen, size - endIndex);
            size = newSize;
        }
        if (insertLen > 0) {
            insertStr.getChars(0, insertLen, buffer, startIndex);
        }
    }

PARAMS COUNT: 5
IS VOID METHOD: true
FRAGMENT LENGTH: 1025
FRAGMENT LINE AVG SIZE: 46.59090909090909
DEPTHS:
0 1 1 1 1 1 1 1 1 1 1 2 2 3 3 3 2 2 3 2 1 1 
AREA: 34
AVG DEPTH: 1.5454545454545454
---REFACTORING_FINISH---
-----REFACTORINGS_END-----
COMMIT ID: e4812f52ba44f7284851ebf19107f89f27ec8b0e
URL: https://github.com/apache/commons-lang/commit/e4812f52ba44f7284851ebf19107f89f27ec8b0e
DESCRIPTION: Extract Method	private doReplace(data char[], offset int, length int, ref Object, priorVariables List) : Object extracted from private doReplace(obj Object, priorVariables List) : Object in class org.apache.commons.lang.text.VariableFormatter
REFACTORING FILE DIFF URL: https://github.com/apache/commons-lang/commit/e4812f52ba44f7284851ebf19107f89f27ec8b0e/src/java/org/apache/commons/lang/text/VariableFormatter.java
REFACTORING URL: https://github.com/apache/commons-lang/blob/e4812f52ba44f7284851ebf19107f89f27ec8b0e/src/java/org/apache/commons/lang/text/VariableFormatter.java#L700
DIRECTLY EXTRACTED OPERATION:
     * Recursive handler for multiple levels of interpolation. This is the main interpolation method, which resolves the
     * values of all variable references contained in the passed in text.
     * 
     * @param data
     *            the text to be interpolated (as character array)
     * @param offset
     *            the start offset in the text array
     * @param length
     *            the length of the data to be processed
     * @param ref
     *            a reference object which will be returned if no interpolation was performed
     * @param priorVariables
     *            keeps track of the replaced variables
     * @return the result of the interpolation process
     */
    private Object doReplace(char[] data, int offset, int length, Object ref, List priorVariables) {
        if (data == null) {
            return null;
        }

        Object resultObj = ref;
        int tokenCnt = 0;
        StrBuilder buf = new StrBuilder(length);

        // on the first call initialize priorVariables
        if (priorVariables == null) {
            priorVariables = new ArrayList();
            priorVariables.add(new String(data, offset, length));
        }

        VariableParser parser = createParser(data, offset, length);
        Token tok;
        while ((tok = parser.nextToken(data)) != null) {
            switch (tok.getType()) {
                case Token.TEXT_TOKEN :
                    buf.append(data, tok.getStartIndex(), tok.getLength());
                    break;

                case Token.ESCAPED_VAR_TOKEN :
                    buf.append(getVariablePrefix());
                    tokenCnt++;
                    break;

                case Token.VARIABLE_TOKEN :
                    String variable = tok.getText(data);

                    // if we've got a loop, create a useful exception message and
                    // throw
                    if (priorVariables.contains(variable)) {
                        String initialBase = priorVariables.remove(0).toString();
                        priorVariables.add(variable);
                        StrBuilder priorVariableSb = new StrBuilder();

                        // create a nice trace of interpolated variables like so:
                        // var1->var2->var3
                        for (Iterator it = priorVariables.iterator(); it.hasNext();) {
                            priorVariableSb.append(it.next());
                            if (it.hasNext()) {
                                priorVariableSb.append("->");
                            }
                        }
                        throw new IllegalStateException("Infinite loop in property interpolation of "
                            + initialBase
                            + ": "
                            + priorVariableSb.toString());
                    }
                    // otherwise, add this variable to the interpolation list.
                    priorVariables.add(variable);

                    resultObj = resolveVariable(variable);
                    if (resultObj != null) {
                        resultObj = doReplace(resultObj, priorVariables);
                        buf.append(resultObj);
                    } else {
                        // variable not defined - so put it back in the value
                        buf.append(getVariablePrefix()).append(variable).append(getVariableSuffix());
                    }

                    // pop the interpolated variable off the stack
                    // this maintains priorVariables correctness for
                    // properties with multiple interpolations, e.g.
                    // prop.name=${some.other.prop1}/blahblah/${some.other.prop2}
                    priorVariables.remove(priorVariables.size() - 1);
                    break;
            }
            tokenCnt++;
        }

        if (resultObj != null && tokenCnt == 1) {
            // if there was only one token, return the reference object
            return resultObj;
        }
        return buf.toString();
    }

PARAMS COUNT: 5
IS VOID METHOD: false
FRAGMENT LENGTH: 4079
FRAGMENT LINE AVG SIZE: 42.93684210526316
DEPTHS:
0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 2 3 2 2 2 2 2 2 2 2 3 3 2 2 2 2 2 3 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 5 5 5 5 5 5 5 6 6 7 6 5 5 5 5 5 4 4 4 4 4 4 5 5 5 5 5 4 4 4 4 4 4 4 4 3 3 2 2 2 3 3 2 2 1 1 
AREA: 305
AVG DEPTH: 3.210526315789474
---REFACTORING_FINISH---
-----REFACTORINGS_END-----
COMMIT ID: 2b6e554ccff63526adf46c347046a2f40fb439a9
URL: https://github.com/apache/commons-lang/commit/2b6e554ccff63526adf46c347046a2f40fb439a9
DESCRIPTION: Extract Method	private getCSVClone() : StrTokenizer extracted from public getCSVInstance() : StrTokenizer in class org.apache.commons.lang.text.StrTokenizer
REFACTORING FILE DIFF URL: https://github.com/apache/commons-lang/commit/2b6e554ccff63526adf46c347046a2f40fb439a9/src/java/org/apache/commons/lang/text/StrTokenizer.java
REFACTORING URL: https://github.com/apache/commons-lang/blob/2b6e554ccff63526adf46c347046a2f40fb439a9/src/java/org/apache/commons/lang/text/StrTokenizer.java#L226
DIRECTLY EXTRACTED OPERATION:
     * Returns a clone of <code>CSV_TOKENIZER_PROTOTYPE</code>.
     * 
     * @return a clone of <code>CSV_TOKENIZER_PROTOTYPE</code>.
     */
    private static StrTokenizer getCSVClone() {
        return (StrTokenizer) CSV_TOKENIZER_PROTOTYPE.clone();
    }

IS VOID METHOD: false
FRAGMENT LENGTH: 262
FRAGMENT LINE AVG SIZE: 32.75
DEPTHS:
0 1 1 1 1 2 1 1 
AREA: 8
AVG DEPTH: 1.0
---REFACTORING_FINISH---
DESCRIPTION: Extract Method	private getTSVClone() : StrTokenizer extracted from public getTSVInstance() : StrTokenizer in class org.apache.commons.lang.text.StrTokenizer
REFACTORING FILE DIFF URL: https://github.com/apache/commons-lang/commit/2b6e554ccff63526adf46c347046a2f40fb439a9/src/java/org/apache/commons/lang/text/StrTokenizer.java
REFACTORING URL: https://github.com/apache/commons-lang/blob/2b6e554ccff63526adf46c347046a2f40fb439a9/src/java/org/apache/commons/lang/text/StrTokenizer.java#L278
DIRECTLY EXTRACTED OPERATION:
     * Returns a clone of <code>TSV_TOKENIZER_PROTOTYPE</code>.
     * 
     * @return a clone of <code>TSV_TOKENIZER_PROTOTYPE</code>.
     */
    private static StrTokenizer getTSVClone() {
        return (StrTokenizer) TSV_TOKENIZER_PROTOTYPE.clone();
    }

IS VOID METHOD: false
FRAGMENT LENGTH: 262
FRAGMENT LINE AVG SIZE: 32.75
DEPTHS:
0 1 1 1 1 2 1 1 
AREA: 8
AVG DEPTH: 1.0
---REFACTORING_FINISH---
-----REFACTORINGS_END-----
COMMIT ID: e47b5d8e75e4af0edd747a451b43303391f13d96
URL: https://github.com/apache/commons-lang/commit/e47b5d8e75e4af0edd747a451b43303391f13d96
DESCRIPTION: Extract Method	package checkConstructorException(num Number) : void extracted from public testConstructorExceptions() : void in class org.apache.commons.lang.math.NumberRangeTest
REFACTORING FILE DIFF URL: https://github.com/apache/commons-lang/commit/e47b5d8e75e4af0edd747a451b43303391f13d96/src/test/org/apache/commons/lang/math/NumberRangeTest.java
REFACTORING URL: https://github.com/apache/commons-lang/blob/e47b5d8e75e4af0edd747a451b43303391f13d96/src/test/org/apache/commons/lang/math/NumberRangeTest.java#L42
DIRECTLY EXTRACTED OPERATION:
        try {
            new NumberRange(num);
            fail("Expected an IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            // Expected.
        }
    }

PARAMS COUNT: 1
IS VOID METHOD: true
FRAGMENT LENGTH: 195
FRAGMENT LINE AVG SIZE: 24.375
DEPTHS:
2 3 3 3 3 2 1 1 
AREA: 18
AVG DEPTH: 2.25
---REFACTORING_FINISH---
DESCRIPTION: Extract Method	package checkConstructorException(num Number) : void extracted from public testConstructorExceptions() : void in class org.apache.commons.lang.math.NumberRangeTest
REFACTORING FILE DIFF URL: https://github.com/apache/commons-lang/commit/e47b5d8e75e4af0edd747a451b43303391f13d96/src/test/org/apache/commons/lang/math/NumberRangeTest.java
REFACTORING URL: https://github.com/apache/commons-lang/blob/e47b5d8e75e4af0edd747a451b43303391f13d96/src/test/org/apache/commons/lang/math/NumberRangeTest.java#L42
DIRECTLY EXTRACTED OPERATION:
        try {
            new NumberRange(num);
            fail("Expected an IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            // Expected.
        }
    }

PARAMS COUNT: 1
IS VOID METHOD: true
FRAGMENT LENGTH: 195
FRAGMENT LINE AVG SIZE: 24.375
DEPTHS:
2 3 3 3 3 2 1 1 
AREA: 18
AVG DEPTH: 2.25
---REFACTORING_FINISH---
-----REFACTORINGS_END-----
COMMIT ID: aef69406ea3a67bb89aa2fb96361c2a41d209781
URL: https://github.com/apache/commons-lang/commit/aef69406ea3a67bb89aa2fb96361c2a41d209781
DESCRIPTION: Extract Method	private toArray(list List) : String[] extracted from public addCauseMethodName(methodName String) : void in class org.apache.commons.lang.exception.ExceptionUtils
REFACTORING FILE DIFF URL: https://github.com/apache/commons-lang/commit/aef69406ea3a67bb89aa2fb96361c2a41d209781/src/java/org/apache/commons/lang/exception/ExceptionUtils.java
REFACTORING URL: https://github.com/apache/commons-lang/blob/aef69406ea3a67bb89aa2fb96361c2a41d209781/src/java/org/apache/commons/lang/exception/ExceptionUtils.java#L131
DIRECTLY EXTRACTED OPERATION:
     * Returns the given list as a <code>String[]</code>.
     * @param list a list to transform.
     * @return the given list as a <code>String[]</code>.
     */
    private static String[] toArray(List list) {
        return (String[]) list.toArray(new String[list.size()]);
    }

PARAMS COUNT: 1
IS VOID METHOD: false
FRAGMENT LENGTH: 285
FRAGMENT LINE AVG SIZE: 35.625
DEPTHS:
0 1 1 1 1 2 1 1 
AREA: 8
AVG DEPTH: 1.0
---REFACTORING_FINISH---
DESCRIPTION: Extract Method	private toArray(list List) : String[] extracted from package getStackFrames(stackTrace String) : String[] in class org.apache.commons.lang.exception.ExceptionUtils
REFACTORING FILE DIFF URL: https://github.com/apache/commons-lang/commit/aef69406ea3a67bb89aa2fb96361c2a41d209781/src/java/org/apache/commons/lang/exception/ExceptionUtils.java
REFACTORING URL: https://github.com/apache/commons-lang/blob/aef69406ea3a67bb89aa2fb96361c2a41d209781/src/java/org/apache/commons/lang/exception/ExceptionUtils.java#L131
DIRECTLY EXTRACTED OPERATION:
     * Returns the given list as a <code>String[]</code>.
     * @param list a list to transform.
     * @return the given list as a <code>String[]</code>.
     */
    private static String[] toArray(List list) {
        return (String[]) list.toArray(new String[list.size()]);
    }

PARAMS COUNT: 1
IS VOID METHOD: false
FRAGMENT LENGTH: 285
FRAGMENT LINE AVG SIZE: 35.625
DEPTHS:
0 1 1 1 1 2 1 1 
AREA: 8
AVG DEPTH: 1.0
---REFACTORING_FINISH---
DESCRIPTION: Extract Method	private getCauseMethodNameList() : ArrayList extracted from public addCauseMethodName(methodName String) : void in class org.apache.commons.lang.exception.ExceptionUtils
REFACTORING FILE DIFF URL: https://github.com/apache/commons-lang/commit/aef69406ea3a67bb89aa2fb96361c2a41d209781/src/java/org/apache/commons/lang/exception/ExceptionUtils.java
REFACTORING URL: https://github.com/apache/commons-lang/blob/aef69406ea3a67bb89aa2fb96361c2a41d209781/src/java/org/apache/commons/lang/exception/ExceptionUtils.java#L140
DIRECTLY EXTRACTED OPERATION:
     * Returns {@link #CAUSE_METHOD_NAMES} as a List.
     * @return {@link #CAUSE_METHOD_NAMES} as a List.
     */
    private static ArrayList getCauseMethodNameList() {
        return new ArrayList(Arrays.asList(CAUSE_METHOD_NAMES));
    }

IS VOID METHOD: false
FRAGMENT LENGTH: 244
FRAGMENT LINE AVG SIZE: 34.857142857142854
DEPTHS:
0 1 1 1 2 1 1 
AREA: 7
AVG DEPTH: 1.0
---REFACTORING_FINISH---
-----REFACTORINGS_END-----
COMMIT ID: 838c1e7d0e75873054579a8dcba9889464ff75a3
URL: https://github.com/apache/commons-lang/commit/838c1e7d0e75873054579a8dcba9889464ff75a3
DESCRIPTION: Extract Method	private add(array Object, index int, element Object, clss Class) : Object extracted from public add(array Object[], index int, element Object) : Object[] in class org.apache.commons.lang.ArrayUtils
REFACTORING FILE DIFF URL: https://github.com/apache/commons-lang/commit/838c1e7d0e75873054579a8dcba9889464ff75a3/src/java/org/apache/commons/lang/ArrayUtils.java
REFACTORING URL: https://github.com/apache/commons-lang/blob/838c1e7d0e75873054579a8dcba9889464ff75a3/src/java/org/apache/commons/lang/ArrayUtils.java#L3455
DIRECTLY EXTRACTED OPERATION:
        if (array == null) {
            if (index != 0) {
                throw new IndexOutOfBoundsException("Index: " + index + ", Length: 0");
            }
            Object joinedArray = Array.newInstance(clss, 1);
            Array.set(joinedArray, 0, element);
            return joinedArray;
        }
        int length = Array.getLength(array);
        if (index > length || index < 0) {
            throw new IndexOutOfBoundsException("Index: " + index + ", Length: " + length);
        }
        Object result = Array.newInstance(clss, length + 1);
        System.arraycopy(array, 0, result, 0, index);
        Array.set(result, index, element);
        if (index < length) {
            System.arraycopy(array, index, result, index + 1, length - index);
        }
        return result;
    }
    
PARAMS COUNT: 4
IS VOID METHOD: false
FRAGMENT LENGTH: 813
FRAGMENT LINE AVG SIZE: 38.714285714285715
DEPTHS:
3 4 5 4 4 4 4 3 3 3 4 3 3 3 3 3 4 3 3 2 2 
AREA: 70
AVG DEPTH: 3.3333333333333335
---REFACTORING_FINISH---
-----REFACTORINGS_END-----
COMMIT ID: 5111ae7db08a70323a51a21df0bbaf46f21e072e
URL: https://github.com/apache/commons-lang/commit/5111ae7db08a70323a51a21df0bbaf46f21e072e
DESCRIPTION: Extract Method	public formatDuration(durationMillis long, format String, padWithZeros boolean) : String extracted from public format(millis long, format String, padWithZeros boolean, timezone TimeZone) : String in class org.apache.commons.lang.time.DurationFormatUtils
REFACTORING FILE DIFF URL: https://github.com/apache/commons-lang/commit/5111ae7db08a70323a51a21df0bbaf46f21e072e/src/java/org/apache/commons/lang/time/DurationFormatUtils.java
REFACTORING URL: https://github.com/apache/commons-lang/blob/5111ae7db08a70323a51a21df0bbaf46f21e072e/src/java/org/apache/commons/lang/time/DurationFormatUtils.java#L112
DIRECTLY EXTRACTED OPERATION:
     * <p>Get the time gap as a string, using the specified format.
     * Padding the left hand side of numbers with zeroes is optional and 
     * the timezone may be specified.</p>
     * 
     * <p>This method formats durations using the days and lower fields of the
     * format pattern. Months and larger are not used.</p>
     * 
     * @param durationMillis  the duration to format
     * @param format  the way in which to format the duration
     * @param padWithZeros  whether to pad the left hand side of numbers with 0's
     * @return the time as a String
     */
    public static String formatDuration(long durationMillis, String format, boolean padWithZeros) {

        Token[] tokens = lexx(format);

        int days         = 0;
        int hours        = 0;
        int minutes      = 0;
        int seconds      = 0;
        int milliseconds = 0;
        
        if (Token.containsTokenWithValue(tokens, d) ) {
            days = (int) (durationMillis / DateUtils.MILLIS_PER_DAY);
            durationMillis = durationMillis - (days * DateUtils.MILLIS_PER_DAY);
        }
        if (Token.containsTokenWithValue(tokens, H) ) {
            hours = (int) (durationMillis / DateUtils.MILLIS_PER_HOUR);
            durationMillis = durationMillis - (hours * DateUtils.MILLIS_PER_HOUR);
        }
        if (Token.containsTokenWithValue(tokens, m) ) {
            minutes = (int) (durationMillis / DateUtils.MILLIS_PER_MINUTE);
            durationMillis = durationMillis - (minutes * DateUtils.MILLIS_PER_MINUTE);
        }
        if (Token.containsTokenWithValue(tokens, s) ) {
            seconds = (int) (durationMillis / DateUtils.MILLIS_PER_SECOND);
            durationMillis = durationMillis - (seconds * DateUtils.MILLIS_PER_SECOND);
        }
        if (Token.containsTokenWithValue(tokens, S) ) {
            milliseconds = (int) durationMillis;
        }

        return format(tokens, 0, 0, days, hours, minutes, seconds, milliseconds, padWithZeros);
    }

PARAMS COUNT: 3
IS VOID METHOD: false
FRAGMENT LENGTH: 1994
FRAGMENT LINE AVG SIZE: 44.31111111111111
DEPTHS:
0 1 1 1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 2 2 3 3 2 2 3 3 2 2 3 3 2 2 3 3 2 2 3 2 2 2 1 1 
AREA: 83
AVG DEPTH: 1.8444444444444446
---REFACTORING_FINISH---
-----REFACTORINGS_END-----
COMMIT ID: fbaf1c371ad64089b31ec77e08f4a05fe3bcf097
URL: https://github.com/apache/commons-lang/commit/fbaf1c371ad64089b31ec77e08f4a05fe3bcf097
DESCRIPTION: Extract Method	private indexOf(throwable Throwable, type Class, fromIndex int, subclass boolean) : int extracted from public indexOfThrowable(throwable Throwable, type Class, fromIndex int) : int in class org.apache.commons.lang.exception.ExceptionUtils
REFACTORING FILE DIFF URL: https://github.com/apache/commons-lang/commit/fbaf1c371ad64089b31ec77e08f4a05fe3bcf097/src/java/org/apache/commons/lang/exception/ExceptionUtils.java
REFACTORING URL: https://github.com/apache/commons-lang/blob/fbaf1c371ad64089b31ec77e08f4a05fe3bcf097/src/java/org/apache/commons/lang/exception/ExceptionUtils.java#L477
DIRECTLY EXTRACTED OPERATION:
        if (throwable == null || type == null) {
            return -1;
        }
        if (fromIndex < 0) {
            fromIndex = 0;
        }
        Throwable[] throwables = ExceptionUtils.getThrowables(throwable);
        if (fromIndex >= throwables.length) {
            return -1;
        }
        if (subclass) {
            for (int i = fromIndex; i < throwables.length; i++) {
                if (type.isAssignableFrom(throwables[i].getClass())) {
                    return i;
                }
            }
        } else {
            for (int i = fromIndex; i < throwables.length; i++) {
                if (type.equals(throwables[i].getClass())) {
                    return i;
                }
            }
        }
        return -1;
    }

PARAMS COUNT: 4
IS VOID METHOD: false
FRAGMENT LENGTH: 766
FRAGMENT LINE AVG SIZE: 29.46153846153846
DEPTHS:
2 3 2 2 3 2 2 2 3 2 2 3 4 5 4 3 3 3 4 5 4 3 2 2 1 1 
AREA: 72
AVG DEPTH: 2.769230769230769
---REFACTORING_FINISH---
-----REFACTORINGS_END-----
COMMIT ID: 177d40989f45197fd9f9669f4eeb6033b73bc16e
URL: https://github.com/apache/commons-lang/commit/177d40989f45197fd9f9669f4eeb6033b73bc16e
DESCRIPTION: Extract Method	private formatDuration(tokens Token[], years int, months int, days int, hours int, minutes int, seconds int, milliseconds int, padWithZeros boolean) : String extracted from public format(millis long, format String, padWithZeros boolean) : String in class org.apache.commons.lang.time.DurationFormatUtils
REFACTORING FILE DIFF URL: https://github.com/apache/commons-lang/commit/177d40989f45197fd9f9669f4eeb6033b73bc16e/src/java/org/apache/commons/lang/time/DurationFormatUtils.java
REFACTORING URL: https://github.com/apache/commons-lang/blob/177d40989f45197fd9f9669f4eeb6033b73bc16e/src/java/org/apache/commons/lang/time/DurationFormatUtils.java#L167
DIRECTLY EXTRACTED OPERATION:
                                         int minutes, int seconds, int milliseconds, boolean padWithZeros) 
    { 
        StringBuffer buffer = new StringBuffer();
        int sz = tokens.length;
        for(int i=0; i<sz; i++) {
            Token token = tokens[i];
            Object value = token.getValue();
            int count = token.getCount();
            if(value instanceof StringBuffer) {
                buffer.append(value.toString());
            } else {
                if(value == y) {
                    buffer.append( padWithZeros ? StringUtils.leftPad(""+years, count, "0") : ""+years ); 
                } else
                if(value == M) {
                    buffer.append( padWithZeros ? StringUtils.leftPad(""+months, count, "0") : ""+months ); 
                } else
                if(value == d) {
                    buffer.append( padWithZeros ? StringUtils.leftPad(""+days, count, "0") : ""+days ); 
                } else
                if(value == H) {
                    buffer.append( padWithZeros ? StringUtils.leftPad(""+hours, count, "0") : ""+hours ); 
                } else
                if(value == m) {
                    buffer.append( padWithZeros ? StringUtils.leftPad(""+minutes, count, "0") : ""+minutes ); 
                } else
                if(value == s) {
                    buffer.append( padWithZeros ? StringUtils.leftPad(""+seconds, count, "0") : ""+seconds ); 
                } else
                if(value == S) {
                    buffer.append( padWithZeros ? StringUtils.leftPad(""+milliseconds, count, "0") : ""+milliseconds ); 
                }
            }
        }
        
        return buffer.toString();
    }

PARAMS COUNT: 9
IS VOID METHOD: false
FRAGMENT LENGTH: 1705
FRAGMENT LINE AVG SIZE: 44.86842105263158
DEPTHS:
0 1 2 2 2 3 3 3 3 4 4 4 5 4 4 5 4 4 5 4 4 5 4 4 5 4 4 5 4 4 5 4 3 2 2 2 1 1 
AREA: 129
AVG DEPTH: 3.3947368421052633
---REFACTORING_FINISH---
DESCRIPTION: Extract Method	public format(millis long, format String, padWithZeros boolean, timezone TimeZone) : String extracted from public format(millis long, format String, padWithZeros boolean) : String in class org.apache.commons.lang.time.DurationFormatUtils
REFACTORING FILE DIFF URL: https://github.com/apache/commons-lang/commit/177d40989f45197fd9f9669f4eeb6033b73bc16e/src/java/org/apache/commons/lang/time/DurationFormatUtils.java
REFACTORING URL: https://github.com/apache/commons-lang/blob/177d40989f45197fd9f9669f4eeb6033b73bc16e/src/java/org/apache/commons/lang/time/DurationFormatUtils.java#L109
DIRECTLY EXTRACTED OPERATION:

        if(millis > 28 * DateUtils.MILLIS_PER_DAY) {
            Calendar c = Calendar.getInstance(timezone);
            c.set(1970, 0, 1, 0, 0, 0);
            c.set(Calendar.MILLISECOND, 0);
            return format(c.getTime().getTime(), millis, format, padWithZeros, timezone);
        }

        Token[] tokens = lexx(format);

        int years        = 0;
        int months       = 0;
        int days         = 0;
        int hours        = 0;
        int minutes      = 0;
        int seconds      = 0;
        int milliseconds = 0;

        /*  This will never be evaluated
        if(Token.containsTokenWithValue(tokens, y) ) {
            years = (int) (millis / DateUtils.MILLIS_PER_YEAR);
            millis = millis - (years * DateUtils.MILLIS_PER_YEAR);
        }
        if(Token.containsTokenWithValue(tokens, M) ) {
            months = (int) (millis / DateUtils.MILLIS_PER_MONTH);
            millis = millis - (months * DateUtils.MILLIS_PER_MONTH);
            // as MONTH * 12 != YEAR, this fixes issues
            if(months == 12) {
                years++;
                months = 0;
            }
        }
        */
        if(Token.containsTokenWithValue(tokens, d) ) {
            days = (int) (millis / DateUtils.MILLIS_PER_DAY);
            millis = millis - (days * DateUtils.MILLIS_PER_DAY);
        }
        if(Token.containsTokenWithValue(tokens, H) ) {
            hours = (int) (millis / DateUtils.MILLIS_PER_HOUR);
            millis = millis - (hours * DateUtils.MILLIS_PER_HOUR);
        }
        if(Token.containsTokenWithValue(tokens, m) ) {
            minutes = (int) (millis / DateUtils.MILLIS_PER_MINUTE);
            millis = millis - (minutes * DateUtils.MILLIS_PER_MINUTE);
        }
        if(Token.containsTokenWithValue(tokens, s) ) {
            seconds = (int) (millis / DateUtils.MILLIS_PER_SECOND);
            millis = millis - (seconds * DateUtils.MILLIS_PER_SECOND);
        }
        if(Token.containsTokenWithValue(tokens, S) ) {
            milliseconds = (int) millis;
        }

        return formatDuration(tokens, years, months, days, hours, minutes, seconds, milliseconds, padWithZeros);
    }

PARAMS COUNT: 4
IS VOID METHOD: false
FRAGMENT LENGTH: 2172
FRAGMENT LINE AVG SIZE: 38.785714285714285
DEPTHS:
1 2 3 3 3 3 2 2 2 2 2 2 2 2 2 2 2 2 2 2 3 3 2 2 3 3 3 3 4 4 3 2 2 2 3 3 2 2 3 3 2 2 3 3 2 2 3 3 2 2 3 2 2 2 1 1 
AREA: 133
AVG DEPTH: 2.375
---REFACTORING_FINISH---
-----REFACTORINGS_END-----
COMMIT ID: fc447adfef826f1c27650c3d3129d40754fa4a89
URL: https://github.com/apache/commons-lang/commit/fc447adfef826f1c27650c3d3129d40754fa4a89
DESCRIPTION: Extract Method	public format(millis long, format String, padWithZeros boolean) : String extracted from public format(millis long, format String) : String in class org.apache.commons.lang.time.DurationFormatUtils
REFACTORING FILE DIFF URL: https://github.com/apache/commons-lang/commit/fc447adfef826f1c27650c3d3129d40754fa4a89/src/java/org/apache/commons/lang/time/DurationFormatUtils.java
REFACTORING URL: https://github.com/apache/commons-lang/blob/fc447adfef826f1c27650c3d3129d40754fa4a89/src/java/org/apache/commons/lang/time/DurationFormatUtils.java#L103
DIRECTLY EXTRACTED OPERATION:
        StringBuffer buffer = new StringBuffer();
        Token[] tokens = lexx(format);
        int sz = tokens.length;

        int years        = 0;
        int months       = 0;
        int days         = 0;
        int hours        = 0;
        int minutes      = 0;
        int seconds      = 0;
        int milliseconds = 0;

        if(Token.containsTokenWithValue(tokens, y) ) {
            years = (int) (millis / DateUtils.MILLIS_PER_YEAR);
            millis = millis - (years * DateUtils.MILLIS_PER_YEAR);
        }
        if(Token.containsTokenWithValue(tokens, M) ) {
            months = (int) (millis / DateUtils.MILLIS_PER_MONTH);
            millis = millis - (months * DateUtils.MILLIS_PER_MONTH);
            // as MONTH * 12 != YEAR, this fixes issues
            if(months == 12) {
                years++;
                months = 0;
            }
        }
        if(Token.containsTokenWithValue(tokens, d) ) {
            days = (int) (millis / DateUtils.MILLIS_PER_DAY);
            millis = millis - (days * DateUtils.MILLIS_PER_DAY);
        }
        if(Token.containsTokenWithValue(tokens, H) ) {
            hours = (int) (millis / DateUtils.MILLIS_PER_HOUR);
            millis = millis - (hours * DateUtils.MILLIS_PER_HOUR);
        }
        if(Token.containsTokenWithValue(tokens, m) ) {
            minutes = (int) (millis / DateUtils.MILLIS_PER_MINUTE);
            millis = millis - (minutes * DateUtils.MILLIS_PER_MINUTE);
        }
        if(Token.containsTokenWithValue(tokens, s) ) {
            seconds = (int) (millis / DateUtils.MILLIS_PER_SECOND);
            millis = millis - (seconds * DateUtils.MILLIS_PER_SECOND);
        }
        if(Token.containsTokenWithValue(tokens, S) ) {
            milliseconds = (int) millis;
        }


        for(int i=0; i<sz; i++) {
            Token token = tokens[i];
            Object value = token.getValue();
            int count = token.getCount();
            if(value instanceof StringBuffer) {
                buffer.append(value.toString());
            } else {
                if(value == y) {
                    buffer.append( padWithZeros ? StringUtils.leftPad(""+years, count, "0") : ""+years ); 
                } else
                if(value == M) {
                    buffer.append( padWithZeros ? StringUtils.leftPad(""+months, count, "0") : ""+months ); 
                } else
                if(value == d) {
                    buffer.append( padWithZeros ? StringUtils.leftPad(""+days, count, "0") : ""+days ); 
                } else
                if(value == H) {
                    buffer.append( padWithZeros ? StringUtils.leftPad(""+hours, count, "0") : ""+hours ); 
                } else
                if(value == m) {
                    buffer.append( padWithZeros ? StringUtils.leftPad(""+minutes, count, "0") : ""+minutes ); 
                } else
                if(value == s) {
                    buffer.append( padWithZeros ? StringUtils.leftPad(""+seconds, count, "0") : ""+seconds ); 
                } else
                if(value == S) {
                    buffer.append( padWithZeros ? StringUtils.leftPad(""+milliseconds, count, "0") : ""+milliseconds ); 
                }
            }
        }
        
        return buffer.toString();
    }

PARAMS COUNT: 3
IS VOID METHOD: false
FRAGMENT LENGTH: 3295
FRAGMENT LINE AVG SIZE: 41.1875
DEPTHS:
1 2 2 2 2 2 2 2 2 2 2 2 2 3 3 2 2 3 3 3 3 4 4 3 2 2 3 3 2 2 3 3 2 2 3 3 2 2 3 3 2 2 3 2 2 2 2 3 3 3 3 4 4 4 5 4 4 5 4 4 5 4 4 5 4 4 5 4 4 5 4 4 5 4 3 2 2 2 1 1 
AREA: 235
AVG DEPTH: 2.9375
---REFACTORING_FINISH---
-----REFACTORINGS_END-----
COMMIT ID: ccf4e93bb7f7699d4a87db07a9822c05031af73e
URL: https://github.com/apache/commons-lang/commit/ccf4e93bb7f7699d4a87db07a9822c05031af73e
DESCRIPTION: Extract Method	private assertIsEquals(array1 Object, array2 Object, array3 Object) : void extracted from public testIsEquals() : void in class org.apache.commons.lang.ArrayUtilsTest
REFACTORING FILE DIFF URL: https://github.com/apache/commons-lang/commit/ccf4e93bb7f7699d4a87db07a9822c05031af73e/src/test/org/apache/commons/lang/ArrayUtilsTest.java
REFACTORING URL: https://github.com/apache/commons-lang/blob/ccf4e93bb7f7699d4a87db07a9822c05031af73e/src/test/org/apache/commons/lang/ArrayUtilsTest.java#L106
DIRECTLY EXTRACTED OPERATION:
        assertEquals(true, ArrayUtils.isEquals(array1, array1));
        assertEquals(true, ArrayUtils.isEquals(array2, array2));
        assertEquals(true, ArrayUtils.isEquals(array3, array3));
        assertEquals(false, ArrayUtils.isEquals(array1, array2));
        assertEquals(false, ArrayUtils.isEquals(array2, array1));
        assertEquals(false, ArrayUtils.isEquals(array1, array3));
        assertEquals(false, ArrayUtils.isEquals(array3, array1));
        assertEquals(false, ArrayUtils.isEquals(array1, array2));
        assertEquals(false, ArrayUtils.isEquals(array2, array1));
    }

PARAMS COUNT: 3
IS VOID METHOD: true
FRAGMENT LENGTH: 598
FRAGMENT LINE AVG SIZE: 54.36363636363637
DEPTHS:
1 2 2 2 2 2 2 2 2 1 1 
AREA: 19
AVG DEPTH: 1.7272727272727273
---REFACTORING_FINISH---
-----REFACTORINGS_END-----
COMMIT ID: 13ae992c23f9e693903f32c77e018de27f66442c
URL: https://github.com/apache/commons-lang/commit/13ae992c23f9e693903f32c77e018de27f66442c
DESCRIPTION: Extract Method	private mulAndCheck(x int, y int) : int extracted from public multiplyBy(fraction Fraction) : Fraction in class org.apache.commons.lang.math.Fraction
REFACTORING FILE DIFF URL: https://github.com/apache/commons-lang/commit/13ae992c23f9e693903f32c77e018de27f66442c/src/java/org/apache/commons/lang/math/Fraction.java
REFACTORING URL: https://github.com/apache/commons-lang/blob/13ae992c23f9e693903f32c77e018de27f66442c/src/java/org/apache/commons/lang/math/Fraction.java#L600
DIRECTLY EXTRACTED OPERATION:
     * Multiply two integers, checking for overflow.
     * 
     * @param x a factor
     * @param y a factor
     * @return the product <code>x*y</code>
     * @throws ArithmeticException if the result can not be represented as
     *                             an int
     */
    private static int mulAndCheck(int x, int y) {
        long m = ((long)x)*((long)y);
        if (m < Integer.MIN_VALUE ||
            m > Integer.MAX_VALUE) {
            throw new ArithmeticException("overflow: mul");
        }
        return (int)m;
    }
    
PARAMS COUNT: 2
IS VOID METHOD: false
FRAGMENT LENGTH: 547
FRAGMENT LINE AVG SIZE: 32.1764705882353
DEPTHS:
0 1 1 1 1 1 1 1 1 2 2 2 3 2 2 1 1 
AREA: 23
AVG DEPTH: 1.3529411764705883
---REFACTORING_FINISH---
DESCRIPTION: Extract Method	private addSub(fraction Fraction, isAdd boolean) : Fraction extracted from public add(fraction Fraction) : Fraction in class org.apache.commons.lang.math.Fraction
REFACTORING FILE DIFF URL: https://github.com/apache/commons-lang/commit/13ae992c23f9e693903f32c77e018de27f66442c/src/java/org/apache/commons/lang/math/Fraction.java
REFACTORING URL: https://github.com/apache/commons-lang/blob/13ae992c23f9e693903f32c77e018de27f66442c/src/java/org/apache/commons/lang/math/Fraction.java#L700
DIRECTLY EXTRACTED OPERATION:
     * Implement add and subtract using algorithm described in Knuth 4.5.1.
     * 
     * @param fraction the fraction to subtract, must not be <code>null</code>
     * @param isAdd true to add, false to subtract
     * @return a <code>Fraction</code> instance with the resulting values
     * @throws IllegalArgumentException if the fraction is <code>null</code>
     * @throws ArithmeticException if the resulting numerator or denominator
     *   cannot be represented in an <code>int</code>.
     */
    private Fraction addSub(Fraction fraction, boolean isAdd) {
        if (fraction == null) {
            throw new IllegalArgumentException("The fraction must not be null");
        }
        // zero is identity for addition.
        if (numerator == 0) {
            return isAdd ? fraction : fraction.negate();
        }
        if (fraction.numerator == 0) {
            return this;
        }     
        // if denominators are randomly distributed, d1 will be 1 about 61%
        // of the time.
        int d1 = greatestCommonDivisor(denominator, fraction.denominator);
        if (d1==1) {
            // result is ( (u*v' +/- u'v) / u'v')
            int uvp = mulAndCheck(numerator, fraction.denominator);
            int upv = mulAndCheck(fraction.numerator, denominator);
            return new Fraction
                (isAdd ? addAndCheck(uvp, upv) : subAndCheck(uvp, upv),
                 mulPosAndCheck(denominator, fraction.denominator));
        }
        // the quantity 't' requires 65 bits of precision; see knuth 4.5.1
        // exercise 7.  we're going to use a BigInteger.
        // t = u(v'/d1) +/- v(u'/d1)
        BigInteger uvp = BigInteger.valueOf(numerator)
            .multiply(BigInteger.valueOf(fraction.denominator/d1));
        BigInteger upv = BigInteger.valueOf(fraction.numerator)
            .multiply(BigInteger.valueOf(denominator/d1));
        BigInteger t = isAdd ? uvp.add(upv) : uvp.subtract(upv);
        // but d2 doesn't need extra precision because
        // d2 = gcd(t,d1) = gcd(t mod d1, d1)
        int tmodd1 = t.mod(BigInteger.valueOf(d1)).intValue();
        int d2 = (tmodd1==0)?d1:greatestCommonDivisor(tmodd1, d1);

        // result is (t/d2) / (u'/d1)(v'/d2)
        BigInteger w = t.divide(BigInteger.valueOf(d2));
        if (w.bitLength() > 31) {
            throw new ArithmeticException
                ("overflow: numerator too large after multiply");
        }
        return new Fraction
            (w.intValue(),
             mulPosAndCheck(denominator/d1, fraction.denominator/d2));
    }

PARAMS COUNT: 2
IS VOID METHOD: false
FRAGMENT LENGTH: 2574
FRAGMENT LINE AVG SIZE: 46.8
DEPTHS:
0 1 1 1 1 1 1 1 1 1 2 3 2 2 2 3 2 2 3 2 2 2 2 2 3 3 3 3 3 3 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 3 3 2 2 2 2 1 1 
AREA: 108
AVG DEPTH: 1.9636363636363636
---REFACTORING_FINISH---
DESCRIPTION: Extract Method	private addSub(fraction Fraction, isAdd boolean) : Fraction extracted from public subtract(fraction Fraction) : Fraction in class org.apache.commons.lang.math.Fraction
REFACTORING FILE DIFF URL: https://github.com/apache/commons-lang/commit/13ae992c23f9e693903f32c77e018de27f66442c/src/java/org/apache/commons/lang/math/Fraction.java
REFACTORING URL: https://github.com/apache/commons-lang/blob/13ae992c23f9e693903f32c77e018de27f66442c/src/java/org/apache/commons/lang/math/Fraction.java#L700
DIRECTLY EXTRACTED OPERATION:
     * Implement add and subtract using algorithm described in Knuth 4.5.1.
     * 
     * @param fraction the fraction to subtract, must not be <code>null</code>
     * @param isAdd true to add, false to subtract
     * @return a <code>Fraction</code> instance with the resulting values
     * @throws IllegalArgumentException if the fraction is <code>null</code>
     * @throws ArithmeticException if the resulting numerator or denominator
     *   cannot be represented in an <code>int</code>.
     */
    private Fraction addSub(Fraction fraction, boolean isAdd) {
        if (fraction == null) {
            throw new IllegalArgumentException("The fraction must not be null");
        }
        // zero is identity for addition.
        if (numerator == 0) {
            return isAdd ? fraction : fraction.negate();
        }
        if (fraction.numerator == 0) {
            return this;
        }     
        // if denominators are randomly distributed, d1 will be 1 about 61%
        // of the time.
        int d1 = greatestCommonDivisor(denominator, fraction.denominator);
        if (d1==1) {
            // result is ( (u*v' +/- u'v) / u'v')
            int uvp = mulAndCheck(numerator, fraction.denominator);
            int upv = mulAndCheck(fraction.numerator, denominator);
            return new Fraction
                (isAdd ? addAndCheck(uvp, upv) : subAndCheck(uvp, upv),
                 mulPosAndCheck(denominator, fraction.denominator));
        }
        // the quantity 't' requires 65 bits of precision; see knuth 4.5.1
        // exercise 7.  we're going to use a BigInteger.
        // t = u(v'/d1) +/- v(u'/d1)
        BigInteger uvp = BigInteger.valueOf(numerator)
            .multiply(BigInteger.valueOf(fraction.denominator/d1));
        BigInteger upv = BigInteger.valueOf(fraction.numerator)
            .multiply(BigInteger.valueOf(denominator/d1));
        BigInteger t = isAdd ? uvp.add(upv) : uvp.subtract(upv);
        // but d2 doesn't need extra precision because
        // d2 = gcd(t,d1) = gcd(t mod d1, d1)
        int tmodd1 = t.mod(BigInteger.valueOf(d1)).intValue();
        int d2 = (tmodd1==0)?d1:greatestCommonDivisor(tmodd1, d1);

        // result is (t/d2) / (u'/d1)(v'/d2)
        BigInteger w = t.divide(BigInteger.valueOf(d2));
        if (w.bitLength() > 31) {
            throw new ArithmeticException
                ("overflow: numerator too large after multiply");
        }
        return new Fraction
            (w.intValue(),
             mulPosAndCheck(denominator/d1, fraction.denominator/d2));
    }

PARAMS COUNT: 2
IS VOID METHOD: false
FRAGMENT LENGTH: 2574
FRAGMENT LINE AVG SIZE: 46.8
DEPTHS:
0 1 1 1 1 1 1 1 1 1 2 3 2 2 2 3 2 2 3 2 2 2 2 2 3 3 3 3 3 3 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 3 3 2 2 2 2 1 1 
AREA: 108
AVG DEPTH: 1.9636363636363636
---REFACTORING_FINISH---
-----REFACTORINGS_END-----
COMMIT ID: f919d930401b3b1b7d41cf5455f649e6d9708717
URL: https://github.com/apache/commons-lang/commit/f919d930401b3b1b7d41cf5455f649e6d9708717
DESCRIPTION: Extract Method	private splitWorker(str String, separatorChar char, preserveAllTokens boolean) : String[] extracted from public split(str String, separatorChar char) : String[] in class org.apache.commons.lang.StringUtils
REFACTORING FILE DIFF URL: https://github.com/apache/commons-lang/commit/f919d930401b3b1b7d41cf5455f649e6d9708717/src/java/org/apache/commons/lang/StringUtils.java
REFACTORING URL: https://github.com/apache/commons-lang/blob/f919d930401b3b1b7d41cf5455f649e6d9708717/src/java/org/apache/commons/lang/StringUtils.java#L2128
DIRECTLY EXTRACTED OPERATION:
     * Performs the logic for the <code>split</code> and 
     * <code>splitPreserveAllTokens</code> methods that do not return a
     * maximum array length.
     *
     * @param str  the String to parse, may be <code>null</code>
     * @param separatorChar the separate character
     * @param preserveAllTokens if <code>true</code>, adjacent separators are
     * treated as empty token separators; if <code>false</code>, adjacent
     * separators are treated as one separator.
     * @return an array of parsed Strings, <code>null</code> if null String input
     */
    private static String[] splitWorker(String str, char separatorChar, boolean preserveAllTokens) {
        // Performance tuned for 2.0 (JDK1.4)

        if (str == null) {
            return null;
        }
        int len = str.length();
        if (len == 0) {
            return ArrayUtils.EMPTY_STRING_ARRAY;
        }
        List list = new ArrayList();
        int i = 0, start = 0;
        boolean match = false;
        boolean lastMatch = false;
        while (i < len) {
            if (str.charAt(i) == separatorChar) {
                if (match || preserveAllTokens) {
                    list.add(str.substring(start, i));
                    match = false;
                    lastMatch = true;
                }
                start = ++i;
                continue;
            } else {
                lastMatch = false;
            }
            match = true;
            i++;
        }
        if (match || (preserveAllTokens && lastMatch)) {
            list.add(str.substring(start, i));
        }
        return (String[]) list.toArray(new String[list.size()]);
    }

PARAMS COUNT: 3
IS VOID METHOD: false
FRAGMENT LENGTH: 1667
FRAGMENT LINE AVG SIZE: 36.23913043478261
DEPTHS:
0 1 1 1 1 1 1 1 1 1 1 1 2 2 2 3 2 2 2 3 2 2 2 2 2 2 3 4 5 5 5 4 4 4 4 4 3 3 3 2 2 3 2 2 1 1 
AREA: 105
AVG DEPTH: 2.282608695652174
---REFACTORING_FINISH---
DESCRIPTION: Extract Method	private splitWorker(str String, separatorChars String, max int, preserveAllTokens boolean) : String[] extracted from public split(str String, separatorChars String, max int) : String[] in class org.apache.commons.lang.StringUtils
REFACTORING FILE DIFF URL: https://github.com/apache/commons-lang/commit/f919d930401b3b1b7d41cf5455f649e6d9708717/src/java/org/apache/commons/lang/StringUtils.java
REFACTORING URL: https://github.com/apache/commons-lang/blob/f919d930401b3b1b7d41cf5455f649e6d9708717/src/java/org/apache/commons/lang/StringUtils.java#L2250
DIRECTLY EXTRACTED OPERATION:
     * Performs the logic for the <code>split</code> and 
     * <code>splitPreserveAllTokens</code> methods that return a maximum array 
     * length.
     *
     * @param str  the String to parse, may be <code>null</code>
     * @param separatorChars the separate character
     * @param max  the maximum number of elements to include in the
     *  array. A zero or negative value implies no limit.
     * @param preserveAllTokens if <code>true</code>, adjacent separators are
     * treated as empty token separators; if <code>false</code>, adjacent
     * separators are treated as one separator.
     * @return an array of parsed Strings, <code>null</code> if null String input
     */
    private static String[] splitWorker(String str, String separatorChars, int max, boolean preserveAllTokens) {
        // Performance tuned for 2.0 (JDK1.4)
        // Direct code is quicker than StringTokenizer.
        // Also, StringTokenizer uses isSpace() not isWhitespace()

        if (str == null) {
            return null;
        }
        int len = str.length();
        if (len == 0) {
            return ArrayUtils.EMPTY_STRING_ARRAY;
        }
        List list = new ArrayList();
        int sizePlus1 = 1;
        int i = 0, start = 0;
        boolean match = false;
        boolean lastMatch = false;
        if (separatorChars == null) {
            // Null separator means use whitespace
            while (i < len) {
                if (Character.isWhitespace(str.charAt(i))) {
                    if (match || preserveAllTokens) {
                        lastMatch = true;
                        if (sizePlus1++ == max) {
                            i = len;
                            lastMatch = false;
                        }
                        list.add(str.substring(start, i));
                        match = false;
                    }
                    start = ++i;
                    continue;
                } else {
                    lastMatch = false;
                }
                match = true;
                i++;
            }
        } else if (separatorChars.length() == 1) {
            // Optimise 1 character case
            char sep = separatorChars.charAt(0);
            while (i < len) {
                if (str.charAt(i) == sep) {
                    if (match || preserveAllTokens) {
                        lastMatch = true;
                        if (sizePlus1++ == max) {
                            i = len;
                            lastMatch = false;
                        }
                        list.add(str.substring(start, i));
                        match = false;
                    }
                    start = ++i;
                    continue;
                } else {
                    lastMatch = false;
                }
                match = true;
                i++;
            }
        } else {
            // standard case
            while (i < len) {
                if (separatorChars.indexOf(str.charAt(i)) >= 0) {
                    if (match || preserveAllTokens) {
                        lastMatch = true;
                        if (sizePlus1++ == max) {
                            i = len;
                            lastMatch = false;
                        }
                        list.add(str.substring(start, i));
                        match = false;
                    }
                    start = ++i;
                    continue;
                } else {
                    lastMatch = false;
                }
                match = true;
                i++;
            }
        }
        if (match || (preserveAllTokens && lastMatch)) {
            list.add(str.substring(start, i));
        }
        return (String[]) list.toArray(new String[list.size()]);
    }

PARAMS COUNT: 4
IS VOID METHOD: false
FRAGMENT LENGTH: 3805
FRAGMENT LINE AVG SIZE: 37.67326732673267
DEPTHS:
0 1 1 1 1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 3 2 2 2 3 2 2 2 2 2 2 2 3 3 4 5 6 6 7 7 6 6 6 5 5 5 5 5 4 4 4 3 3 3 3 3 4 5 6 6 7 7 6 6 6 5 5 5 5 5 4 4 4 3 3 3 3 4 5 6 6 7 7 6 6 6 5 5 5 5 5 4 4 4 3 2 2 3 2 2 1 1 
AREA: 368
AVG DEPTH: 3.6435643564356437
---REFACTORING_FINISH---
-----REFACTORINGS_END-----
COMMIT ID: f90d753d0638596889ae04664690f386475d27ac
URL: https://github.com/apache/commons-lang/commit/f90d753d0638596889ae04664690f386475d27ac
DESCRIPTION: Extract Method	public uncapitalize(str String, delimiters char[]) : String extracted from public uncapitalize(str String) : String in class org.apache.commons.lang.WordUtils
REFACTORING FILE DIFF URL: https://github.com/apache/commons-lang/commit/f90d753d0638596889ae04664690f386475d27ac/src/java/org/apache/commons/lang/WordUtils.java
REFACTORING URL: https://github.com/apache/commons-lang/blob/f90d753d0638596889ae04664690f386475d27ac/src/java/org/apache/commons/lang/WordUtils.java#L375
DIRECTLY EXTRACTED OPERATION:
        if (str == null || str.length() == 0) {
            return str;
        }
        int strLen = str.length();

        int delimitersLen = 0;
        if(delimiters != null) {
            delimitersLen = delimiters.length;
        }

        StringBuffer buffer = new StringBuffer(strLen);
        boolean uncapitalizeNext = true;
        for (int i = 0; i < strLen; i++) {
            char ch = str.charAt(i);

            boolean isDelimiter = false;
            if(delimiters == null) {
                isDelimiter = Character.isWhitespace(ch);
            } else {
                for(int j=0; j < delimitersLen; j++) {
                    if(ch == delimiters[j]) {
                        isDelimiter = true;
                        break;
                    }
                }
            }

            if (isDelimiter) {
                buffer.append(ch);
                uncapitalizeNext = true;
            } else if (uncapitalizeNext) {
                buffer.append(Character.toLowerCase(ch));
                uncapitalizeNext = false;
            } else {
                buffer.append(ch);
            }
        }
        return buffer.toString();
    }

PARAMS COUNT: 2
IS VOID METHOD: false
FRAGMENT LENGTH: 1177
FRAGMENT LINE AVG SIZE: 29.425
DEPTHS:
2 3 2 2 2 2 2 3 2 2 2 2 2 3 3 3 3 4 4 4 5 6 6 5 4 3 3 3 4 4 4 4 4 4 4 3 2 2 1 1 
AREA: 124
AVG DEPTH: 3.1
---REFACTORING_FINISH---
-----REFACTORINGS_END-----
COMMIT ID: f845e36c540a9c0329c0b8ddf403df04e5fffcc0
URL: https://github.com/apache/commons-lang/commit/f845e36c540a9c0329c0b8ddf403df04e5fffcc0
DESCRIPTION: Extract Method	public capitalize(str String, delimiters char[]) : String extracted from public capitalize(str String) : String in class org.apache.commons.lang.WordUtils
REFACTORING FILE DIFF URL: https://github.com/apache/commons-lang/commit/f845e36c540a9c0329c0b8ddf403df04e5fffcc0/src/java/org/apache/commons/lang/WordUtils.java
REFACTORING URL: https://github.com/apache/commons-lang/blob/f845e36c540a9c0329c0b8ddf403df04e5fffcc0/src/java/org/apache/commons/lang/WordUtils.java#L244
DIRECTLY EXTRACTED OPERATION:
     * <p>Capitalizes all the delimiter separated words in a String.
     * Only the first letter of each word is changed. To change all letters to
     * the capitalized case, use {@link #capitalizeFully(String)}.</p>
     *
     * <p>A <code>null</code> input String returns <code>null</code>.
     * Capitalization uses the unicode title case, normally equivalent to
     * upper case.</p>
     *
     * <pre>
     * WordUtils.capitalize(null)        = null
     * WordUtils.capitalize("")          = ""
     * WordUtils.capitalize("i am FINE") = "I Am FINE"
     * </pre>
     * 
     * @param str  the String to capitalize, may be null
     * @param delimiters  characters to capitalize afterwards
     * @return capitalized String, <code>null</code> if null String input
     * @see #uncapitalize(String)
     * @see #capitalizeFully(String)
     */
    public static String capitalize(String str, char[] delimiters) {
        if (str == null || str.length() == 0) {
            return str;
        }
        int strLen = str.length();
        StringBuffer buffer = new StringBuffer(strLen);

        int delimitersLen = 0;
        if(delimiters != null) {
            delimitersLen = delimiters.length;
        }

        boolean capitalizeNext = true;
        for (int i = 0; i < strLen; i++) {
            char ch = str.charAt(i);

            boolean isDelimiter = false;
            if(delimiters == null) {
                isDelimiter = Character.isWhitespace(ch);
            } else {
                for(int j=0; j < delimitersLen; j++) {
                    if(ch == delimiters[j]) {
                        isDelimiter = true;
                        break;
                    }
                }
            }

            if (isDelimiter) {
                buffer.append(ch);
                capitalizeNext = true;
            } else if (capitalizeNext) {
                buffer.append(Character.toTitleCase(ch));
                capitalizeNext = false;
            } else {
                buffer.append(ch);
            }
        }
        return buffer.toString();
    }

PARAMS COUNT: 2
IS VOID METHOD: false
FRAGMENT LENGTH: 2094
FRAGMENT LINE AVG SIZE: 34.32786885245902
DEPTHS:
0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 2 3 2 2 2 2 2 2 3 2 2 2 2 3 3 3 3 4 4 4 5 6 6 5 4 3 3 3 4 4 4 4 4 4 4 3 2 2 1 1 
AREA: 144
AVG DEPTH: 2.360655737704918
---REFACTORING_FINISH---
DESCRIPTION: Extract Method	public capitalizeFully(str String, delimiters char[]) : String extracted from public capitalizeFully(str String) : String in class org.apache.commons.lang.WordUtils
REFACTORING FILE DIFF URL: https://github.com/apache/commons-lang/commit/f845e36c540a9c0329c0b8ddf403df04e5fffcc0/src/java/org/apache/commons/lang/WordUtils.java
REFACTORING URL: https://github.com/apache/commons-lang/blob/f845e36c540a9c0329c0b8ddf403df04e5fffcc0/src/java/org/apache/commons/lang/WordUtils.java#L328
DIRECTLY EXTRACTED OPERATION:
     * <p>Capitalizes all the delimiter separated words in a String.
     * All letters are changed, so the resulting string will be fully changed.</p>
     *
     * <p>A <code>null</code> input String returns <code>null</code>.
     * Capitalization uses the unicode title case, normally equivalent to
     * upper case.</p>
     *
     * <pre>
     * WordUtils.capitalize(null)        = null
     * WordUtils.capitalize("")          = ""
     * WordUtils.capitalize("i am FINE") = "I Am Fine"
     * </pre>
     * 
     * @param str  the String to capitalize, may be null
     * @param delimiters  characters to capitalize afterwards
     * @return capitalized String, <code>null</code> if null String input
     */
    public static String capitalizeFully(String str, char[] delimiters) {
        if (str == null || str.length() == 0) {
            return str;
        }
        str = str.toLowerCase();
        return capitalize(str, delimiters);
    }

PARAMS COUNT: 2
IS VOID METHOD: false
FRAGMENT LENGTH: 958
FRAGMENT LINE AVG SIZE: 38.32
DEPTHS:
0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 2 3 2 2 2 1 1 
AREA: 30
AVG DEPTH: 1.2
---REFACTORING_FINISH---
-----REFACTORINGS_END-----
COMMIT ID: 11bd2237bf4e50799e091f3bfa9aba5e50c8de70
URL: https://github.com/apache/commons-lang/commit/11bd2237bf4e50799e091f3bfa9aba5e50c8de70
DESCRIPTION: Extract Method	private copyArrayGrow1(array Object, newArrayComponentType Class) : Object extracted from public add(array Object[], element Object) : Object[] in class org.apache.commons.lang.ArrayUtils
REFACTORING FILE DIFF URL: https://github.com/apache/commons-lang/commit/11bd2237bf4e50799e091f3bfa9aba5e50c8de70/src/java/org/apache/commons/lang/ArrayUtils.java
REFACTORING URL: https://github.com/apache/commons-lang/blob/11bd2237bf4e50799e091f3bfa9aba5e50c8de70/src/java/org/apache/commons/lang/ArrayUtils.java#L3034
DIRECTLY EXTRACTED OPERATION:
     * Returns a copy of the given array of size 1 greater than the argument. 
     * The last value of the array is left to the default value.
     * 
     * @param array The array to copy, must not be <code>null</code>.
     * @param newArrayComponentType If <code>array</code> is <code>null</code>, create a 
     * size 1 array of this type.
     * @return A new copy of the array of size 1 greater than the input.
     */    
    private static Object copyArrayGrow1(final Object array, Class newArrayComponentType) {
        if (array != null) {
            int arrayLength = Array.getLength(array);
            Object newArray = Array.newInstance(array.getClass().getComponentType(), arrayLength + 1);
            System.arraycopy(array, 0, newArray, 0, arrayLength);
            return newArray;
        } else {
            return Array.newInstance(newArrayComponentType, 1);
        }
    }
    
PARAMS COUNT: 2
IS VOID METHOD: false
FRAGMENT LENGTH: 906
FRAGMENT LINE AVG SIZE: 47.68421052631579
DEPTHS:
1 2 2 2 2 2 2 2 2 3 4 4 4 4 4 4 3 2 2 
AREA: 51
AVG DEPTH: 2.6842105263157894
---REFACTORING_FINISH---
-----REFACTORINGS_END-----
COMMIT ID: 00731e8e2a89dede2660551579d71595969afbb1
URL: https://github.com/apache/commons-lang/commit/00731e8e2a89dede2660551579d71595969afbb1
DESCRIPTION: Extract Method	public toInt(str String, defaultValue int) : int extracted from public stringToInt(str String, defaultValue int) : int in class org.apache.commons.lang.math.NumberUtils
REFACTORING FILE DIFF URL: https://github.com/apache/commons-lang/commit/00731e8e2a89dede2660551579d71595969afbb1/src/java/org/apache/commons/lang/math/NumberUtils.java
REFACTORING URL: https://github.com/apache/commons-lang/blob/00731e8e2a89dede2660551579d71595969afbb1/src/java/org/apache/commons/lang/math/NumberUtils.java#L190
DIRECTLY EXTRACTED OPERATION:
     * <p>Convert a <code>String</code> to an <code>int</code>, returning a
     * default value if the conversion fails.</p>
     *
     * <p>If the string is <code>null</code>, the default value is returned.</p>
     *
     * <pre>
     *   NumberUtils.toInt(null, 1) = 1
     *   NumberUtils.toInt("", 1)   = 1
     *   NumberUtils.toInt("1", 0)  = 1
     * </pre>
     *
     * @param str  the string to convert, may be null
     * @param defaultValue  the default value
     * @return the int represented by the string, or the default if conversion fails
     */
    public static int toInt(String str, int defaultValue) {
        try {
            return Integer.parseInt(str);
        } catch (NumberFormatException nfe) {
            return defaultValue;
        }
    }

PARAMS COUNT: 2
IS VOID METHOD: false
FRAGMENT LENGTH: 780
FRAGMENT LINE AVG SIZE: 33.91304347826087
DEPTHS:
0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 2 3 3 3 2 1 1 
AREA: 30
AVG DEPTH: 1.3043478260869565
---REFACTORING_FINISH---
-----REFACTORINGS_END-----
COMMIT ID: 96de49e7ae7cfe951e590887e5f3944752e38581
URL: https://github.com/apache/commons-lang/commit/96de49e7ae7cfe951e590887e5f3944752e38581
DESCRIPTION: Extract Method	public isUseShortClassName() : boolean extracted from public isShortClassName() : boolean in class org.apache.commons.lang.builder.StandardToStringStyle
REFACTORING FILE DIFF URL: https://github.com/apache/commons-lang/commit/96de49e7ae7cfe951e590887e5f3944752e38581/src/java/org/apache/commons/lang/builder/StandardToStringStyle.java
REFACTORING URL: https://github.com/apache/commons-lang/blob/96de49e7ae7cfe951e590887e5f3944752e38581/src/java/org/apache/commons/lang/builder/StandardToStringStyle.java#L102
DIRECTLY EXTRACTED OPERATION:
     * <p>Gets whether to output short or long class names.</p>
     *
     * @return the current useShortClassName flag
     */
    public boolean isUseShortClassName() {
        return super.isUseShortClassName();
    }

IS VOID METHOD: false
FRAGMENT LENGTH: 223
FRAGMENT LINE AVG SIZE: 27.875
DEPTHS:
0 1 1 1 1 2 1 1 
AREA: 8
AVG DEPTH: 1.0
---REFACTORING_FINISH---
-----REFACTORINGS_END-----
COMMIT ID: cd5c0cdb42c0e49de4722f39e3def51dc9b48df8
URL: https://github.com/apache/commons-lang/commit/cd5c0cdb42c0e49de4722f39e3def51dc9b48df8
DESCRIPTION: Extract Method	public capitalize(str String) : String extracted from public capitalise(str String) : String in class org.apache.commons.lang.StringUtils
REFACTORING FILE DIFF URL: https://github.com/apache/commons-lang/commit/cd5c0cdb42c0e49de4722f39e3def51dc9b48df8/src/java/org/apache/commons/lang/StringUtils.java
REFACTORING URL: https://github.com/apache/commons-lang/blob/cd5c0cdb42c0e49de4722f39e3def51dc9b48df8/src/java/org/apache/commons/lang/StringUtils.java#L3412
DIRECTLY EXTRACTED OPERATION:
     * <p>Capitalizes a String changing the first letter to title case as
     * per {@link Character#toTitleCase(char)}. No other letters are changed.</p>
     * 
     * <p>A <code>null</code> input String returns <code>null</code>.</p>
     * 
     * <pre>
     * StringUtils.capitalize(null)  = null
     * StringUtils.capitalize("")    = ""
     * StringUtils.capitalize("cat") = "Cat"
     * StringUtils.capitalize("cAt") = "CAt"
     * </pre>
     * 
     * @param str  the String to capitalize, may be null
     * @return the capitalized String, <code>null</code> if null String input
     */
    public static String capitalize(String str) {
        int strLen;
        if (str == null || (strLen = str.length()) == 0) {
            return str;
        }
        return new StringBuffer(strLen)
            .append(Character.toTitleCase(str.charAt(0)))
            .append(str.substring(1))
            .toString();
    }

PARAMS COUNT: 1
IS VOID METHOD: false
FRAGMENT LENGTH: 931
FRAGMENT LINE AVG SIZE: 35.80769230769231
DEPTHS:
0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 2 2 3 2 2 2 2 2 1 1 
AREA: 34
AVG DEPTH: 1.3076923076923077
---REFACTORING_FINISH---
DESCRIPTION: Extract Method	public uncapitalize(str String) : String extracted from public uncapitalise(str String) : String in class org.apache.commons.lang.StringUtils
REFACTORING FILE DIFF URL: https://github.com/apache/commons-lang/commit/cd5c0cdb42c0e49de4722f39e3def51dc9b48df8/src/java/org/apache/commons/lang/StringUtils.java
REFACTORING URL: https://github.com/apache/commons-lang/blob/cd5c0cdb42c0e49de4722f39e3def51dc9b48df8/src/java/org/apache/commons/lang/StringUtils.java#L3446
DIRECTLY EXTRACTED OPERATION:
     * <p>Uncapitalizes a String changing the first letter to title case as
     * per {@link Character#toLowerCase(char)}. No other letters are changed.</p>
     * 
     * <p>A <code>null</code> input String returns <code>null</code>.</p>
     * 
     * <pre>
     * StringUtils.uncapitalize(null)  = null
     * StringUtils.uncapitalize("")    = ""
     * StringUtils.uncapitalize("Cat") = "cat"
     * StringUtils.uncapitalize("CAT") = "cAT"
     * </pre>
     * 
     * @param str  the String to uncapitalize, may be null
     * @return the uncapitalized String, <code>null</code> if null String input
     */
    public static String uncapitalize(String str) {
        int strLen;
        if (str == null || (strLen = str.length()) == 0) {
            return str;
        }
        return new StringBuffer(strLen)
            .append(Character.toLowerCase(str.charAt(0)))
            .append(str.substring(1))
            .toString();
    }

PARAMS COUNT: 1
IS VOID METHOD: false
FRAGMENT LENGTH: 947
FRAGMENT LINE AVG SIZE: 36.42307692307692
DEPTHS:
0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 2 2 3 2 2 2 2 2 1 1 
AREA: 34
AVG DEPTH: 1.3076923076923077
---REFACTORING_FINISH---
DESCRIPTION: Extract Method	public capitalizeAllWords(str String) : String extracted from public capitaliseAllWords(str String) : String in class org.apache.commons.lang.StringUtils
REFACTORING FILE DIFF URL: https://github.com/apache/commons-lang/commit/cd5c0cdb42c0e49de4722f39e3def51dc9b48df8/src/java/org/apache/commons/lang/StringUtils.java
REFACTORING URL: https://github.com/apache/commons-lang/blob/cd5c0cdb42c0e49de4722f39e3def51dc9b48df8/src/java/org/apache/commons/lang/StringUtils.java#L3534
DIRECTLY EXTRACTED OPERATION:
     * <p>Capitalizes all the whitespace separated words in a String.
     * Only the first letter of each word is changed.</p>
     *
     * <p>Whitespace is defined by {@link Character#isWhitespace(char)}.
     * A <code>null</code> input String returns <code>null</code>.</p>
     *
     * <pre>
     * StringUtils.capitalizeAllWords(null)        = null
     * StringUtils.capitalizeAllWords("")          = ""
     * StringUtils.capitalizeAllWords("i am FINE") = "I Am FINE"
     * </pre>
     * 
     * @param str  the String to capitalize, may be null
     * @return capitalized String, <code>null</code> if null String input
     */
    public static String capitalizeAllWords(String str) {
        int strLen;
        if (str == null || (strLen = str.length()) == 0) {
            return str;
        }
        StringBuffer buffer = new StringBuffer(strLen);
        boolean whitespace = true;
        for (int i = 0; i < strLen; i++) {
            char ch = str.charAt(i);
            if (Character.isWhitespace(ch)) {
                buffer.append(ch);
                whitespace = true;
            } else if (whitespace) {
                buffer.append(Character.toTitleCase(ch));
                whitespace = false;
            } else {
                buffer.append(ch);
            }
        }
        return buffer.toString();
    }

PARAMS COUNT: 1
IS VOID METHOD: false
FRAGMENT LENGTH: 1349
FRAGMENT LINE AVG SIZE: 36.45945945945946
DEPTHS:
0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 2 2 3 2 2 2 2 3 3 4 4 4 4 4 4 4 3 2 2 1 1 
AREA: 73
AVG DEPTH: 1.972972972972973
---REFACTORING_FINISH---
DESCRIPTION: Extract Method	public uncapitalizeAllWords(str String) : String extracted from public uncapitaliseAllWords(str String) : String in class org.apache.commons.lang.StringUtils
REFACTORING FILE DIFF URL: https://github.com/apache/commons-lang/commit/cd5c0cdb42c0e49de4722f39e3def51dc9b48df8/src/java/org/apache/commons/lang/StringUtils.java
REFACTORING URL: https://github.com/apache/commons-lang/blob/cd5c0cdb42c0e49de4722f39e3def51dc9b48df8/src/java/org/apache/commons/lang/StringUtils.java#L3579
DIRECTLY EXTRACTED OPERATION:
     * <p>Uncapitalizes all the whitespace separated words in a String.
     * Only the first letter of each word is changed.</p>
     *
     * <p>Whitespace is defined by {@link Character#isWhitespace(char)}.
     * A <code>null</code> input String returns <code>null</code>.</p>
     *
     * <pre>
     * StringUtils.uncapitalizeAllWords(null)        = null
     * StringUtils.uncapitalizeAllWords("")          = ""
     * StringUtils.uncapitalizeAllWords("I Am FINE") = "i am fINE"
     * </pre>
     * 
     * @param str  the String to uncapitalize, may be null
     * @return uncapitalized String, <code>null</code> if null String input
     */
    public static String uncapitalizeAllWords(String str) {
        int strLen;
        if (str == null || (strLen = str.length()) == 0) {
            return str;
        }
        StringBuffer buffer = new StringBuffer(strLen);
        boolean whitespace = true;
        for (int i = 0; i < strLen; i++) {
            char ch = str.charAt(i);
            if (Character.isWhitespace(ch)) {
                buffer.append(ch);
                whitespace = true;
            } else if (whitespace) {
                buffer.append(Character.toLowerCase(ch));
                whitespace = false;
            } else {
                buffer.append(ch);
            }
        }
        return buffer.toString();
    }

PARAMS COUNT: 1
IS VOID METHOD: false
FRAGMENT LENGTH: 1363
FRAGMENT LINE AVG SIZE: 36.83783783783784
DEPTHS:
0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 2 2 3 2 2 2 2 3 3 4 4 4 4 4 4 4 3 2 2 1 1 
AREA: 73
AVG DEPTH: 1.972972972972973
---REFACTORING_FINISH---
-----REFACTORINGS_END-----
COMMIT ID: 8b1992ee2ffefeaf763477216241a02a80e0522e
URL: https://github.com/apache/commons-lang/commit/8b1992ee2ffefeaf763477216241a02a80e0522e
DESCRIPTION: Extract Method	private init(name String, enumClass Class) : void extracted from protected Enum(name String) in class Enum
REFACTORING FILE DIFF URL: https://github.com/apache/commons-lang/commit/8b1992ee2ffefeaf763477216241a02a80e0522e/src/java/org/apache/commons/lang/enum/Enum.java
REFACTORING URL: https://github.com/apache/commons-lang/blob/8b1992ee2ffefeaf763477216241a02a80e0522e/src/java/org/apache/commons/lang/enum/Enum.java#L315
DIRECTLY EXTRACTED OPERATION:
     * Initializes the enumeration.
     * 
     * @param name  the enum name
     * @param enumClass  the enum class
     * @throws IllegalArgumentException if the name is null or empty
     * @throws IllegalArgumentException if the enumClass is null or invalid
     */
    private void init(String name, Class enumClass) {
        if (StringUtils.isEmpty(name)) {
            throw new IllegalArgumentException("The Enum name must not be empty or null");
        }
        Entry entry = (Entry) cEnumClasses.get(enumClass);
        if (entry == null) {
            entry = createEntry(enumClass);
            cEnumClasses.put(enumClass, entry);
        }
        if (entry.map.containsKey(name)) {
            throw new IllegalArgumentException("The Enum name must be unique, '" + name + "' has already been added");
        }
        entry.map.put(name, this);
        entry.list.add(this);
    }

FRAGMENT LENGTH: 901
FRAGMENT LINE AVG SIZE: 39.17391304347826
DEPTHS:
0 0 0 0 0 0 0 0 1 2 1 1 1 2 2 1 1 2 1 1 1 0 0 
AREA: 17
AVG DEPTH: 0.7391304347826086
---REFACTORING_FINISH---
-----REFACTORINGS_END-----
COMMIT ID: 95c2d8bbad7ac41ca6882c72bda7d0073663f01c
URL: https://github.com/apache/commons-lang/commit/95c2d8bbad7ac41ca6882c72bda7d0073663f01c
DESCRIPTION: Extract Method	public substringBetween(str String, open String, close String) : String extracted from public getNestedString(str String, open String, close String) : String in class org.apache.commons.lang.StringUtils
REFACTORING FILE DIFF URL: https://github.com/apache/commons-lang/commit/95c2d8bbad7ac41ca6882c72bda7d0073663f01c/src/java/org/apache/commons/lang/StringUtils.java
REFACTORING URL: https://github.com/apache/commons-lang/blob/95c2d8bbad7ac41ca6882c72bda7d0073663f01c/src/java/org/apache/commons/lang/StringUtils.java#L1720
DIRECTLY EXTRACTED OPERATION:
     * <p>Gets the String that is nested in between two Strings.
     * Only the first match is returned.</p>
     * 
     * <p>A <code>null</code> input String returns <code>null</code>.
     * A <code>null</code> open/close returns <code>null</code> (no match).
     * An empty ("") open/close returns an empty string.</p>
     *
     * <pre>
     * StringUtils.substringBetween(null, *, *)          = null
     * StringUtils.substringBetween("", "", "")          = ""
     * StringUtils.substringBetween("", "", "tag")       = null
     * StringUtils.substringBetween("", "tag", "tag")    = null
     * StringUtils.substringBetween("yabcz", null, null) = null
     * StringUtils.substringBetween("yabcz", "", "")     = ""
     * StringUtils.substringBetween("yabcz", "y", "z")   = "abc"
     * StringUtils.substringBetween("yabczyabcz", "y", "z")   = "abc"
     * </pre>
     *
     * @param str  the String containing the substring, may be null
     * @param open  the String before the substring, may be null
     * @param close  the String after the substring, may be null
     * @return the substring, <code>null</code> if no match
     */
    public static String substringBetween(String str, String open, String close) {
        if (str == null || open == null || close == null) {
            return null;
        }
        int start = str.indexOf(open);
        if (start != -1) {
            int end = str.indexOf(close, start + open.length());
            if (end != -1) {
                return str.substring(start + open.length(), end);
            }
        }
        return null;
    }

PARAMS COUNT: 3
IS VOID METHOD: false
FRAGMENT LENGTH: 1603
FRAGMENT LINE AVG SIZE: 43.32432432432432
DEPTHS:
0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 2 3 2 2 2 3 3 4 3 2 2 1 1 
AREA: 53
AVG DEPTH: 1.4324324324324325
---REFACTORING_FINISH---
-----REFACTORINGS_END-----
COMMIT ID: 3b19309d76817dfacb40299b474ecbc27a471e11
URL: https://github.com/apache/commons-lang/commit/3b19309d76817dfacb40299b474ecbc27a471e11
DESCRIPTION: Extract Method	protected validateNumber(str String) : boolean extracted from public createNumber(str String) : Number in class org.apache.commons.lang.math.NumberUtils
REFACTORING FILE DIFF URL: https://github.com/apache/commons-lang/commit/3b19309d76817dfacb40299b474ecbc27a471e11/src/java/org/apache/commons/lang/math/NumberUtils.java
REFACTORING URL: https://github.com/apache/commons-lang/blob/3b19309d76817dfacb40299b474ecbc27a471e11/src/java/org/apache/commons/lang/math/NumberUtils.java#L479
DIRECTLY EXTRACTED OPERATION:
     * Checks the validitiy of a <code>String</code> for conversion it to a number.
     * <ol>
     * <li>If <code>str</code> is <code>null</code>, return <code>false</code>;</li>
     * <li>If <code>str</code> is <i>blank</i>, throw a <code>NumberFormatException</code>;</li>
     * <li>Otherewise return <code>true</code>.</li>
     * </ol>
     *  
     * @param str The <code>String</code> to check.
     * @return Whether or not the argument is suitable for conversion.
     */
    protected static boolean validateNumber(String str) {
        if (str == null) {
            return false;
        }
        if (StringUtils.isBlank(str)) {
            throw new NumberFormatException("A blank string is not a valid number.");
        }  
        return true;
    }
    
PARAMS COUNT: 1
IS VOID METHOD: false
FRAGMENT LENGTH: 775
FRAGMENT LINE AVG SIZE: 38.75
DEPTHS:
0 1 1 1 1 1 1 1 1 1 1 2 3 2 2 3 2 2 1 1 
AREA: 28
AVG DEPTH: 1.4
---REFACTORING_FINISH---
DESCRIPTION: Extract Method	protected testCreateFloatFailure(str String) : void extracted from public testCreateFloat() : void in class org.apache.commons.lang.math.NumberUtilsTest
REFACTORING FILE DIFF URL: https://github.com/apache/commons-lang/commit/3b19309d76817dfacb40299b474ecbc27a471e11/src/test/org/apache/commons/lang/math/NumberUtilsTest.java
REFACTORING URL: https://github.com/apache/commons-lang/blob/3b19309d76817dfacb40299b474ecbc27a471e11/src/test/org/apache/commons/lang/math/NumberUtilsTest.java#L161
DIRECTLY EXTRACTED OPERATION:
        try {
            Float value = NumberUtils.createFloat(str);
            fail("createFloat(blank) failed: " + value);
        } catch (NumberFormatException ex) {
            // empty
        }
    }

PARAMS COUNT: 1
IS VOID METHOD: true
FRAGMENT LENGTH: 210
FRAGMENT LINE AVG SIZE: 26.25
DEPTHS:
2 3 3 3 3 2 1 1 
AREA: 18
AVG DEPTH: 2.25
---REFACTORING_FINISH---
DESCRIPTION: Extract Method	protected testCreateDoubleFailure(str String) : void extracted from public testCreateDouble() : void in class org.apache.commons.lang.math.NumberUtilsTest
REFACTORING FILE DIFF URL: https://github.com/apache/commons-lang/commit/3b19309d76817dfacb40299b474ecbc27a471e11/src/test/org/apache/commons/lang/math/NumberUtilsTest.java
REFACTORING URL: https://github.com/apache/commons-lang/blob/3b19309d76817dfacb40299b474ecbc27a471e11/src/test/org/apache/commons/lang/math/NumberUtilsTest.java#L180
DIRECTLY EXTRACTED OPERATION:
        try {
            Double value = NumberUtils.createDouble(str);
            fail("createDouble(blank) failed: " + value);
        } catch (NumberFormatException ex) {
            // empty
        }
    }

PARAMS COUNT: 1
IS VOID METHOD: true
FRAGMENT LENGTH: 213
FRAGMENT LINE AVG SIZE: 26.625
DEPTHS:
2 3 3 3 3 2 1 1 
AREA: 18
AVG DEPTH: 2.25
---REFACTORING_FINISH---
DESCRIPTION: Extract Method	protected testCreateIntegerFailure(str String) : void extracted from public testCreateInteger() : void in class org.apache.commons.lang.math.NumberUtilsTest
REFACTORING FILE DIFF URL: https://github.com/apache/commons-lang/commit/3b19309d76817dfacb40299b474ecbc27a471e11/src/test/org/apache/commons/lang/math/NumberUtilsTest.java
REFACTORING URL: https://github.com/apache/commons-lang/blob/3b19309d76817dfacb40299b474ecbc27a471e11/src/test/org/apache/commons/lang/math/NumberUtilsTest.java#L199
DIRECTLY EXTRACTED OPERATION:
        try {
            Integer value = NumberUtils.createInteger(str);
            fail("createInteger(blank) failed: " + value);
        } catch (NumberFormatException ex) {
            // empty
        }
    }

PARAMS COUNT: 1
IS VOID METHOD: true
FRAGMENT LENGTH: 216
FRAGMENT LINE AVG SIZE: 27.0
DEPTHS:
2 3 3 3 3 2 1 1 
AREA: 18
AVG DEPTH: 2.25
---REFACTORING_FINISH---
DESCRIPTION: Extract Method	protected testCreateLongFailure(str String) : void extracted from public testCreateLong() : void in class org.apache.commons.lang.math.NumberUtilsTest
REFACTORING FILE DIFF URL: https://github.com/apache/commons-lang/commit/3b19309d76817dfacb40299b474ecbc27a471e11/src/test/org/apache/commons/lang/math/NumberUtilsTest.java
REFACTORING URL: https://github.com/apache/commons-lang/blob/3b19309d76817dfacb40299b474ecbc27a471e11/src/test/org/apache/commons/lang/math/NumberUtilsTest.java#L218
DIRECTLY EXTRACTED OPERATION:
        try {
            Long value = NumberUtils.createLong(str);
            fail("createLong(blank) failed: " + value);
        } catch (NumberFormatException ex) {
            // empty
        }
    }

PARAMS COUNT: 1
IS VOID METHOD: true
FRAGMENT LENGTH: 207
FRAGMENT LINE AVG SIZE: 25.875
DEPTHS:
2 3 3 3 3 2 1 1 
AREA: 18
AVG DEPTH: 2.25
---REFACTORING_FINISH---
DESCRIPTION: Extract Method	protected testCreateBigIntegerFailure(str String) : void extracted from public testCreateBigInteger() : void in class org.apache.commons.lang.math.NumberUtilsTest
REFACTORING FILE DIFF URL: https://github.com/apache/commons-lang/commit/3b19309d76817dfacb40299b474ecbc27a471e11/src/test/org/apache/commons/lang/math/NumberUtilsTest.java
REFACTORING URL: https://github.com/apache/commons-lang/blob/3b19309d76817dfacb40299b474ecbc27a471e11/src/test/org/apache/commons/lang/math/NumberUtilsTest.java#L237
DIRECTLY EXTRACTED OPERATION:
        try {
            BigInteger value = NumberUtils.createBigInteger(str);
            fail("createBigInteger(blank) failed: " + value);
        } catch (NumberFormatException ex) {
            // empty
        }
    }

PARAMS COUNT: 1
IS VOID METHOD: true
FRAGMENT LENGTH: 225
FRAGMENT LINE AVG SIZE: 28.125
DEPTHS:
2 3 3 3 3 2 1 1 
AREA: 18
AVG DEPTH: 2.25
---REFACTORING_FINISH---
DESCRIPTION: Extract Method	protected testCreateBigDecimalFailure(str String) : void extracted from public testCreateBigDecimal() : void in class org.apache.commons.lang.math.NumberUtilsTest
REFACTORING FILE DIFF URL: https://github.com/apache/commons-lang/commit/3b19309d76817dfacb40299b474ecbc27a471e11/src/test/org/apache/commons/lang/math/NumberUtilsTest.java
REFACTORING URL: https://github.com/apache/commons-lang/blob/3b19309d76817dfacb40299b474ecbc27a471e11/src/test/org/apache/commons/lang/math/NumberUtilsTest.java#L256
DIRECTLY EXTRACTED OPERATION:
        try {
            BigDecimal value = NumberUtils.createBigDecimal(str);
            fail("createBigDecimal(blank) failed: " + value);
        } catch (NumberFormatException ex) {
            // empty
        }
    }

PARAMS COUNT: 1
IS VOID METHOD: true
FRAGMENT LENGTH: 225
FRAGMENT LINE AVG SIZE: 28.125
DEPTHS:
2 3 3 3 3 2 1 1 
AREA: 18
AVG DEPTH: 2.25
---REFACTORING_FINISH---
-----REFACTORINGS_END-----
COMMIT ID: 4c1e760dd8a93c118190c41bf911818ccf29ff27
URL: https://github.com/apache/commons-lang/commit/4c1e760dd8a93c118190c41bf911818ccf29ff27
DESCRIPTION: Extract Method	public center(str String, size int, padChar char) : String extracted from public center(str String, size int) : String in class org.apache.commons.lang.StringUtils
REFACTORING FILE DIFF URL: https://github.com/apache/commons-lang/commit/4c1e760dd8a93c118190c41bf911818ccf29ff27/src/java/org/apache/commons/lang/StringUtils.java
REFACTORING URL: https://github.com/apache/commons-lang/blob/4c1e760dd8a93c118190c41bf911818ccf29ff27/src/java/org/apache/commons/lang/StringUtils.java#L2666
DIRECTLY EXTRACTED OPERATION:
     * <p>Centers a String in a larger String of size <code>size</code>.
     * Uses a supplied character as the value to pad the String with.</p>
     *
     * <p>If the size is less than the String length, the String is returned.
     * A <code>null</code> String returns <code>null</code>.
     * A negative size is treated as zero.</p>
     *
     * <pre>
     * StringUtils.center(null, -1, ' ')  = null
     * StringUtils.center("ab", -1, ' ')  = "ab"
     * StringUtils.center(null, 4, ' ')   = null
     * StringUtils.center("", 4, ' ')     = "    "
     * StringUtils.center("ab", 4, ' ')   = " ab"
     * StringUtils.center("abcd", 2, ' ') = "abcd"
     * StringUtils.center("a", 4, ' ')    = " a  "
     * StringUtils.center("a", 4, 'y')    = "yayy"
     * </pre>
     * 
     * @param str  the String to center, may be null
     * @param size  the int size of new String, negative treated as zero
     * @param padChar  the character to pad the new String with
     * @return centered String, <code>null</code> if null String input
     */
    public static String center(String str, int size, char padChar) {
        if (str == null || size <= 0) {
            return str;
        }
        int strLen = str.length();
        int pads = size - strLen;
        if (pads <= 0) {
            return str;
        }
        str = leftPad(str, strLen + pads / 2, padChar);
        str = rightPad(str, size, padChar);
        return str;
    }

PARAMS COUNT: 3
IS VOID METHOD: false
FRAGMENT LENGTH: 1451
FRAGMENT LINE AVG SIZE: 39.21621621621622
DEPTHS:
0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 2 3 2 2 2 2 3 2 2 2 2 1 1 
AREA: 49
AVG DEPTH: 1.3243243243243243
---REFACTORING_FINISH---
-----REFACTORINGS_END-----
COMMIT ID: 61dd85ca2f57884672e20e232ff1a15fc1a23c73
URL: https://github.com/apache/commons-lang/commit/61dd85ca2f57884672e20e232ff1a15fc1a23c73
DESCRIPTION: Extract Method	public appendIdentityToString(buffer StringBuffer, object Object) : StringBuffer extracted from public identityToString(object Object) : String in class org.apache.commons.lang.ObjectUtils
REFACTORING FILE DIFF URL: https://github.com/apache/commons-lang/commit/61dd85ca2f57884672e20e232ff1a15fc1a23c73/src/java/org/apache/commons/lang/ObjectUtils.java
REFACTORING URL: https://github.com/apache/commons-lang/blob/61dd85ca2f57884672e20e232ff1a15fc1a23c73/src/java/org/apache/commons/lang/ObjectUtils.java#L148
DIRECTLY EXTRACTED OPERATION:
     * <p>Appends the toString that would be produced by <code>Object</code>
     * if a class did not override toString itself. <code>Null</code>
     * will return <code>null</code>.</p>
     *
     * @param buffer  the buffer to append to, may not be
     *  <code>null</code>
     * @param object  the object to create a toString for, may be
     *  <code>null</code>
     * @return the default toString text, or <code>null</code> if
     *  <code>null</code> passed in
     */
    public static StringBuffer appendIdentityToString(StringBuffer buffer, Object object) {
        if (object == null) {
            return null;
        }
        return buffer
            .append(object.getClass().getName())
            .append('@')
            .append(Integer.toHexString(System.identityHashCode(object)));
    }

PARAMS COUNT: 2
IS VOID METHOD: false
FRAGMENT LENGTH: 817
FRAGMENT LINE AVG SIZE: 38.904761904761905
DEPTHS:
0 1 1 1 1 1 1 1 1 1 1 1 2 3 2 2 2 2 2 1 1 
AREA: 28
AVG DEPTH: 1.3333333333333333
---REFACTORING_FINISH---
-----REFACTORINGS_END-----
COMMIT ID: 73ee6c3d270a91bd447f732b24c4d65169b0c8d6
URL: https://github.com/apache/commons-lang/commit/73ee6c3d270a91bd447f732b24c4d65169b0c8d6
DESCRIPTION: Extract Method	public format(date Date, pattern String, timeZone TimeZone, locale Locale) : String extracted from public format(date Date, pattern String) : String in class org.apache.commons.lang.time.DateFormatUtils
REFACTORING FILE DIFF URL: https://github.com/apache/commons-lang/commit/73ee6c3d270a91bd447f732b24c4d65169b0c8d6/src/java/org/apache/commons/lang/time/DateFormatUtils.java
REFACTORING URL: https://github.com/apache/commons-lang/blob/73ee6c3d270a91bd447f732b24c4d65169b0c8d6/src/java/org/apache/commons/lang/time/DateFormatUtils.java#L283
DIRECTLY EXTRACTED OPERATION:
     * Format a date/time into a specific pattern in a timezone and locale.
     * 
     * @param date  the date to format
     * @param pattern  the pattern to use to format the date
     * @param timeZone  the timezone to use, may be null
     * @param locale  the locale to use, may be null
     * @return the formatted date
     */
    public static String format(Date date, String pattern, TimeZone timeZone, Locale locale) {
        FastDateFormat df = FastDateFormat.getInstance(pattern, timeZone, locale);
        return df.format(date);
    }

PARAMS COUNT: 4
IS VOID METHOD: false
FRAGMENT LENGTH: 553
FRAGMENT LINE AVG SIZE: 42.53846153846154
DEPTHS:
0 1 1 1 1 1 1 1 1 2 2 1 1 
AREA: 14
AVG DEPTH: 1.0769230769230769
---REFACTORING_FINISH---
-----REFACTORINGS_END-----
COMMIT ID: 1921f71345ccf2971383aace5cd819098b321965
URL: https://github.com/apache/commons-lang/commit/1921f71345ccf2971383aace5cd819098b321965
DESCRIPTION: Extract Method	private html40value(i int) : char extracted from public setUp() : void in class org.apache.commons.lang.EntitiesPerformanceTest
REFACTORING FILE DIFF URL: https://github.com/apache/commons-lang/commit/1921f71345ccf2971383aace5cd819098b321965/src/test/org/apache/commons/lang/EntitiesPerformanceTest.java
REFACTORING URL: https://github.com/apache/commons-lang/blob/1921f71345ccf2971383aace5cd819098b321965/src/test/org/apache/commons/lang/EntitiesPerformanceTest.java#L98
DIRECTLY EXTRACTED OPERATION:
        String entityValue = Entities.html40[i % Entities.html40.length][1];
        char ch = (char) Integer.parseInt(entityValue);
        return ch;
    }

PARAMS COUNT: 1
IS VOID METHOD: false
FRAGMENT LENGTH: 159
FRAGMENT LINE AVG SIZE: 31.8
DEPTHS:
1 2 2 1 1 
AREA: 7
AVG DEPTH: 1.4
---REFACTORING_FINISH---
DESCRIPTION: Extract Method	private checkSomeIntMap(map Entities.IntMap) : void extracted from public testArrayIntMap() : void in class org.apache.commons.lang.EntitiesTest
REFACTORING FILE DIFF URL: https://github.com/apache/commons-lang/commit/1921f71345ccf2971383aace5cd819098b321965/src/test/org/apache/commons/lang/EntitiesTest.java
REFACTORING URL: https://github.com/apache/commons-lang/blob/1921f71345ccf2971383aace5cd819098b321965/src/test/org/apache/commons/lang/EntitiesTest.java#L160
DIRECTLY EXTRACTED OPERATION:
        map.add("foo", 1);
        assertEquals(1, map.value("foo"));
        assertEquals("foo", map.name(1));
        map.add("bar", 2);
        map.add("baz", 3);
        assertEquals(3, map.value("baz"));
        assertEquals("baz", map.name(3));
    }
}
PARAMS COUNT: 1
IS VOID METHOD: true
FRAGMENT LENGTH: 259
FRAGMENT LINE AVG SIZE: 28.77777777777778
DEPTHS:
1 2 2 2 2 2 2 1 0 
AREA: 14
AVG DEPTH: 1.5555555555555556
---REFACTORING_FINISH---
-----REFACTORINGS_END-----
COMMIT ID: 82c5dada6f7b369b69c383aa995f45578325e139
URL: https://github.com/apache/commons-lang/commit/82c5dada6f7b369b69c383aa995f45578325e139
DESCRIPTION: Extract Method	private checkStackTrace(d NestableDelegate, topDown boolean, trimStackFrames boolean, startsWith String, expCount int) : void extracted from public testNestableDelegetePrintStackTrace() : void in class org.apache.commons.lang.exception.NestableDelegateTestCase
REFACTORING FILE DIFF URL: https://github.com/apache/commons-lang/commit/82c5dada6f7b369b69c383aa995f45578325e139/src/test/org/apache/commons/lang/exception/NestableDelegateTestCase.java
REFACTORING URL: https://github.com/apache/commons-lang/blob/82c5dada6f7b369b69c383aa995f45578325e139/src/test/org/apache/commons/lang/exception/NestableDelegateTestCase.java#L567
DIRECTLY EXTRACTED OPERATION:
            String startsWith, int expCount) {
        ByteArrayOutputStream baos1 = new ByteArrayOutputStream();
        PrintStream ps1 = new PrintStream(baos1);
        d.printStackTrace(ps1);
        String stack1 = baos1.toString();
        int actCount = countLines(stack1);
        assertTrue("topDown: "+topDown+", trimStackFrames: "+trimStackFrames+" startsWith",
            stack1.startsWith(startsWith));
        assertEquals("topDown: "+topDown+", trimStackFrames: "+trimStackFrames+" lineCount",
            expCount, actCount);
    }
    private int countLines(String s) {
PARAMS COUNT: 5
IS VOID METHOD: true
FRAGMENT LENGTH: 588
FRAGMENT LINE AVG SIZE: 49.0
DEPTHS:
1 2 2 2 2 2 2 2 2 2 1 1 
AREA: 21
AVG DEPTH: 1.75
---REFACTORING_FINISH---
-----REFACTORINGS_END-----
COMMIT ID: 3734b1e3ad1c870cab29c59e7a724299ef03de27
URL: https://github.com/apache/commons-lang/commit/3734b1e3ad1c870cab29c59e7a724299ef03de27
DESCRIPTION: Extract Method	public nextLong(n long) : long extracted from public nextLong() : long in class org.apache.commons.lang.math.JVMRandom
REFACTORING FILE DIFF URL: https://github.com/apache/commons-lang/commit/3734b1e3ad1c870cab29c59e7a724299ef03de27/src/java/org/apache/commons/lang/math/JVMRandom.java
REFACTORING URL: https://github.com/apache/commons-lang/blob/3734b1e3ad1c870cab29c59e7a724299ef03de27/src/java/org/apache/commons/lang/math/JVMRandom.java#L126
DIRECTLY EXTRACTED OPERATION:
     * Returns a pseudorandom, uniformly distributed long value between 0 
     * (inclusive) and the specified value (exclusive), from the 
     * Math.random() sequence.
     *
     * @param n  the specified exclusive max-value
     * @throws IllegalArgumentException when n <= 0
     *
     * @return the random long
     */
    public static long nextLong(long n) {
        if (n <= 0) {
            throw new IllegalArgumentException(
                "Upper bound for nextInt must be positive"
            );
        }
        // TODO: check this cannot return 'n'
        return (long)(Math.random() * n);
     }

PARAMS COUNT: 1
IS VOID METHOD: false
FRAGMENT LENGTH: 620
FRAGMENT LINE AVG SIZE: 32.63157894736842
DEPTHS:
0 1 1 1 1 1 1 1 1 1 2 3 3 3 2 2 2 1 1 
AREA: 28
AVG DEPTH: 1.4736842105263157
---REFACTORING_FINISH---
-----REFACTORINGS_END-----
COMMIT ID: 69cc0e40e6a67e9a9d843f97350a5031bb6e8ab1
URL: https://github.com/apache/commons-lang/commit/69cc0e40e6a67e9a9d843f97350a5031bb6e8ab1
DESCRIPTION: Extract Method	private escapeEntities(str String, entities Entities) : String extracted from public escapeHtml(str String) : String in class org.apache.commons.lang.StringEscapeUtils
REFACTORING FILE DIFF URL: https://github.com/apache/commons-lang/commit/69cc0e40e6a67e9a9d843f97350a5031bb6e8ab1/src/java/org/apache/commons/lang/StringEscapeUtils.java
REFACTORING URL: https://github.com/apache/commons-lang/blob/69cc0e40e6a67e9a9d843f97350a5031bb6e8ab1/src/java/org/apache/commons/lang/StringEscapeUtils.java#L417
DIRECTLY EXTRACTED OPERATION:
        StringBuffer buf = new StringBuffer(str.length() * 2);
        int i;
        for (i = 0; i < str.length(); ++i) {
            char ch = str.charAt(i);
            String entity = entities.entityName(ch);
            if (entity == null) {
                if (((int) ch) > 0x7F) {
                    int intValue = ((int) ch);
                    buf.append("&#" + intValue + ";");
                } else {
                    buf.append(ch);
                }
            } else {
                buf.append("&" + entity + ";");
            }
        }
        return buf.toString();
    }

PARAMS COUNT: 2
IS VOID METHOD: false
FRAGMENT LENGTH: 600
FRAGMENT LINE AVG SIZE: 31.57894736842105
DEPTHS:
1 2 2 3 3 3 4 5 5 5 5 4 4 4 3 2 2 1 1 
AREA: 59
AVG DEPTH: 3.1052631578947367
---REFACTORING_FINISH---
DESCRIPTION: Extract Method	private unescapeEntities(str String, entities Entities) : String extracted from public unescapeHtml(str String) : String in class org.apache.commons.lang.StringEscapeUtils
REFACTORING FILE DIFF URL: https://github.com/apache/commons-lang/commit/69cc0e40e6a67e9a9d843f97350a5031bb6e8ab1/src/java/org/apache/commons/lang/StringEscapeUtils.java
REFACTORING URL: https://github.com/apache/commons-lang/blob/69cc0e40e6a67e9a9d843f97350a5031bb6e8ab1/src/java/org/apache/commons/lang/StringEscapeUtils.java#L437
DIRECTLY EXTRACTED OPERATION:
        StringBuffer buf = new StringBuffer(str.length());
        int i;
        for (i = 0; i < str.length(); ++i) {
            char ch = str.charAt(i);
            if (ch == '&') {
                int semi = str.indexOf(';', i + 1);
                if (semi == -1) {
                    buf.append(ch);
                    continue;
                }
                String entity = str.substring(i + 1, semi);
                Integer iso;
                if (entity.charAt(0) == '#') {
                    iso = new Integer(entity.substring(1));
                } else {
                    iso = entities.entityValue(entity);
                }
                if (iso == null) {
                    buf.append("&" + entity + ";");
                } else {
                    buf.append((char) (iso.intValue()));
                }
                i = semi;
            } else {
                buf.append(ch);
            }
        }
        return buf.toString();
    }

PARAMS COUNT: 2
IS VOID METHOD: false
FRAGMENT LENGTH: 978
FRAGMENT LINE AVG SIZE: 32.6
DEPTHS:
1 2 2 3 3 4 4 5 5 4 4 4 4 5 5 5 4 4 5 5 5 4 4 4 4 3 2 2 1 1 
AREA: 108
AVG DEPTH: 3.6
---REFACTORING_FINISH---
-----REFACTORINGS_END-----
COMMIT ID: 6af3b80369a62de8f2ee501998d1bda4585758fd
URL: https://github.com/apache/commons-lang/commit/6af3b80369a62de8f2ee501998d1bda4585758fd
DESCRIPTION: Extract Method	private hex(ch char) : String extracted from private escapeJavaStyleString(out Writer, str String, escapeSingleQuote boolean) : void in class org.apache.commons.lang.StringEscapeUtils
REFACTORING FILE DIFF URL: https://github.com/apache/commons-lang/commit/6af3b80369a62de8f2ee501998d1bda4585758fd/src/java/org/apache/commons/lang/StringEscapeUtils.java
REFACTORING URL: https://github.com/apache/commons-lang/blob/6af3b80369a62de8f2ee501998d1bda4585758fd/src/java/org/apache/commons/lang/StringEscapeUtils.java#L244
DIRECTLY EXTRACTED OPERATION:
        return Integer.toHexString(ch).toUpperCase();
    }

PARAMS COUNT: 1
IS VOID METHOD: false
FRAGMENT LENGTH: 61
FRAGMENT LINE AVG SIZE: 20.333333333333332
DEPTHS:
1 1 1 
AREA: 3
AVG DEPTH: 1.0
---REFACTORING_FINISH---
DESCRIPTION: Extract Method	private hex(ch char) : String extracted from private escapeJavaStyleString(out Writer, str String, escapeSingleQuote boolean) : void in class org.apache.commons.lang.StringEscapeUtils
REFACTORING FILE DIFF URL: https://github.com/apache/commons-lang/commit/6af3b80369a62de8f2ee501998d1bda4585758fd/src/java/org/apache/commons/lang/StringEscapeUtils.java
REFACTORING URL: https://github.com/apache/commons-lang/blob/6af3b80369a62de8f2ee501998d1bda4585758fd/src/java/org/apache/commons/lang/StringEscapeUtils.java#L244
DIRECTLY EXTRACTED OPERATION:
        return Integer.toHexString(ch).toUpperCase();
    }

PARAMS COUNT: 1
IS VOID METHOD: false
FRAGMENT LENGTH: 61
FRAGMENT LINE AVG SIZE: 20.333333333333332
DEPTHS:
1 1 1 
AREA: 3
AVG DEPTH: 1.0
---REFACTORING_FINISH---
DESCRIPTION: Extract Method	private hex(ch char) : String extracted from private escapeJavaStyleString(out Writer, str String, escapeSingleQuote boolean) : void in class org.apache.commons.lang.StringEscapeUtils
REFACTORING FILE DIFF URL: https://github.com/apache/commons-lang/commit/6af3b80369a62de8f2ee501998d1bda4585758fd/src/java/org/apache/commons/lang/StringEscapeUtils.java
REFACTORING URL: https://github.com/apache/commons-lang/blob/6af3b80369a62de8f2ee501998d1bda4585758fd/src/java/org/apache/commons/lang/StringEscapeUtils.java#L244
DIRECTLY EXTRACTED OPERATION:
        return Integer.toHexString(ch).toUpperCase();
    }

PARAMS COUNT: 1
IS VOID METHOD: false
FRAGMENT LENGTH: 61
FRAGMENT LINE AVG SIZE: 20.333333333333332
DEPTHS:
1 1 1 
AREA: 3
AVG DEPTH: 1.0
---REFACTORING_FINISH---
DESCRIPTION: Extract Method	private hex(ch char) : String extracted from private escapeJavaStyleString(out Writer, str String, escapeSingleQuote boolean) : void in class org.apache.commons.lang.StringEscapeUtils
REFACTORING FILE DIFF URL: https://github.com/apache/commons-lang/commit/6af3b80369a62de8f2ee501998d1bda4585758fd/src/java/org/apache/commons/lang/StringEscapeUtils.java
REFACTORING URL: https://github.com/apache/commons-lang/blob/6af3b80369a62de8f2ee501998d1bda4585758fd/src/java/org/apache/commons/lang/StringEscapeUtils.java#L244
DIRECTLY EXTRACTED OPERATION:
        return Integer.toHexString(ch).toUpperCase();
    }

PARAMS COUNT: 1
IS VOID METHOD: false
FRAGMENT LENGTH: 61
FRAGMENT LINE AVG SIZE: 20.333333333333332
DEPTHS:
1 1 1 
AREA: 3
AVG DEPTH: 1.0
---REFACTORING_FINISH---
DESCRIPTION: Extract Method	private hex(ch char) : String extracted from private escapeJavaStyleString(out Writer, str String, escapeSingleQuote boolean) : void in class org.apache.commons.lang.StringEscapeUtils
REFACTORING FILE DIFF URL: https://github.com/apache/commons-lang/commit/6af3b80369a62de8f2ee501998d1bda4585758fd/src/java/org/apache/commons/lang/StringEscapeUtils.java
REFACTORING URL: https://github.com/apache/commons-lang/blob/6af3b80369a62de8f2ee501998d1bda4585758fd/src/java/org/apache/commons/lang/StringEscapeUtils.java#L244
DIRECTLY EXTRACTED OPERATION:
        return Integer.toHexString(ch).toUpperCase();
    }

PARAMS COUNT: 1
IS VOID METHOD: false
FRAGMENT LENGTH: 61
FRAGMENT LINE AVG SIZE: 20.333333333333332
DEPTHS:
1 1 1 
AREA: 3
AVG DEPTH: 1.0
---REFACTORING_FINISH---
DESCRIPTION: Extract Method	private assertUnescapeJava(message String, unescaped String, original String) : void extracted from private assertUnescapeJava(unescaped String, original String) : void in class org.apache.commons.lang.StringEscapeUtilsTest
REFACTORING FILE DIFF URL: https://github.com/apache/commons-lang/commit/6af3b80369a62de8f2ee501998d1bda4585758fd/src/test/org/apache/commons/lang/StringEscapeUtilsTest.java
REFACTORING URL: https://github.com/apache/commons-lang/blob/6af3b80369a62de8f2ee501998d1bda4585758fd/src/test/org/apache/commons/lang/StringEscapeUtilsTest.java#L140
DIRECTLY EXTRACTED OPERATION:
        String expected = unescaped;
        String actual = StringEscapeUtils.unescapeJava(original);

        assertEquals("unescape(String) failed" +
                (message == null ? "" : (": " + message)) +
                // we escape this so we can see it in the error message
                ": expected '" + StringUtils.escape(expected) +
                "' actual '" + StringUtils.escape(actual) + "'",
                expected, actual);

        StringPrintWriter writer = new StringPrintWriter();
        StringEscapeUtils.unescapeJava(writer, original);
        assertEquals(unescaped, writer.getString());

    }

PARAMS COUNT: 3
IS VOID METHOD: true
FRAGMENT LENGTH: 629
FRAGMENT LINE AVG SIZE: 39.3125
DEPTHS:
1 2 2 2 2 2 2 2 2 2 2 2 2 2 1 1 
AREA: 29
AVG DEPTH: 1.8125
---REFACTORING_FINISH---
-----REFACTORINGS_END-----
COMMIT ID: f64ecf1cd76a70dcb78b225e7db3913c9eca559c
URL: https://github.com/apache/commons-lang/commit/f64ecf1cd76a70dcb78b225e7db3913c9eca559c
DESCRIPTION: Extract Method	private modify(str String, set String[], expect boolean) : String extracted from public delete(str String, set String[]) : String in class org.apache.commons.lang.CharSetUtils
REFACTORING FILE DIFF URL: https://github.com/apache/commons-lang/commit/f64ecf1cd76a70dcb78b225e7db3913c9eca559c/src/java/org/apache/commons/lang/CharSetUtils.java
REFACTORING URL: https://github.com/apache/commons-lang/blob/f64ecf1cd76a70dcb78b225e7db3913c9eca559c/src/java/org/apache/commons/lang/CharSetUtils.java#L265
DIRECTLY EXTRACTED OPERATION:
        CharSet chars = evaluateSet(set);
        StringBuffer buffer = new StringBuffer(str.length());
        char[] chrs = str.toCharArray();
        int sz = chrs.length;
        for(int i=0; i<sz; i++) {
            if(chars.contains(chrs[i]) == expect) {
                buffer.append(chrs[i]);
            }
        }
        return buffer.toString();
    }

PARAMS COUNT: 3
IS VOID METHOD: false
FRAGMENT LENGTH: 366
FRAGMENT LINE AVG SIZE: 30.5
DEPTHS:
1 2 2 2 2 3 4 3 2 2 1 1 
AREA: 25
AVG DEPTH: 2.0833333333333335
---REFACTORING_FINISH---
-----REFACTORINGS_END-----
COMMIT ID: d9bc18e804bf754b8cc11c4ce61a5dc1b9cda242
URL: https://github.com/apache/commons-lang/commit/d9bc18e804bf754b8cc11c4ce61a5dc1b9cda242
DESCRIPTION: Extract Method	public random(count int, start int, end int, letters boolean, numbers boolean, set char[], random Random) : String extracted from public random(count int, start int, end int, letters boolean, numbers boolean, set char[]) : String in class org.apache.commons.lang.RandomStringUtils
REFACTORING FILE DIFF URL: https://github.com/apache/commons-lang/commit/d9bc18e804bf754b8cc11c4ce61a5dc1b9cda242/src/java/org/apache/commons/lang/RandomStringUtils.java
REFACTORING URL: https://github.com/apache/commons-lang/blob/d9bc18e804bf754b8cc11c4ce61a5dc1b9cda242/src/java/org/apache/commons/lang/RandomStringUtils.java#L220
DIRECTLY EXTRACTED OPERATION:
     * <p>Creates a random string based on a variety of options, using
     * supplied source of randomness.</p>
     *
	 * <p>If start and end are both <code>0</code>, start and end are set
     * to <code>' '</code> and <code>'z'</code>, the ASCII printable
     * characters, will be used, unless letters and numbers are both
	 * <code>false</code>, in which case, start and end are set to
     * <code>0</code> and <code>Integer.MAX_VALUE</code>.
     *
	 * <p>If set is not <code>null</code>, characters between start and
     * end are chosen.</p>
     *
     * <p>As a source of randomness is used supplied {@link Random}
     * instance. This makes method behave predictively, and allows
     * usage of <code>RandomStringUtils</code> in situations that need
     * repetitive behaviour.</p>
     *
     * @param count length of random string to create
     * @param start position in set of chars to start at
     * @param end position in set of chars to end before
     * @param letters only allow letters?
     * @param numbers only allow numbers?
     * @param set set of chars to choose randoms from. If <code>null</code>,
     *  then it will use the set of all chars.
     * @param random source of randomness.
     * @return the random string
     * @throws ArrayIndexOutOfBoundsException if there are not
     *  <code>(end - start) + 1</code> characters in the set array.
     */
    public static String random(int count, int start, int end, boolean letters, boolean numbers, char[] set, Random random) {
        if( (start == 0) && (end == 0) ) {
            end = (int)'z';
            start = (int)' ';
            if(!letters && !numbers) {
                start = 0;
                end = Integer.MAX_VALUE;
            }
        }

        StringBuffer buffer = new StringBuffer();
        int gap = end - start;

        while(count-- != 0) {
            char ch;
            if(set == null) {
                ch = (char)(random.nextInt(gap) + start);
            } else {
                ch = set[random.nextInt(gap) + start];
            }
            if( (letters && numbers && Character.isLetterOrDigit(ch)) ||
                (letters && Character.isLetter(ch)) ||
                (numbers && Character.isDigit(ch)) ||
                (!letters && !numbers)
              ) 
            {
                buffer.append( ch );
            } else {
                count++;
            }
        }
        return buffer.toString();
    }

PARAMS COUNT: 7
IS VOID METHOD: false
FRAGMENT LENGTH: 2468
FRAGMENT LINE AVG SIZE: 39.17460317460318
DEPTHS:
0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 2 3 3 3 4 4 3 2 2 2 2 2 2 3 3 4 4 4 3 3 3 3 3 3 3 4 4 4 3 2 2 1 1 
AREA: 123
AVG DEPTH: 1.9523809523809523
---REFACTORING_FINISH---
-----REFACTORINGS_END-----
COMMIT ID: 5c40090fecdacd9366bba7e3e29d94f213cf2633
URL: https://github.com/apache/commons-lang/commit/5c40090fecdacd9366bba7e3e29d94f213cf2633
DESCRIPTION: Extract Method	private reflectionAppend(lhs Object, rhs Object, clazz Class, builder CompareToBuilder, useTransients boolean) : void extracted from public reflectionCompare(lhs Object, rhs Object, testTransients boolean) : int in class org.apache.commons.lang.builder.CompareToBuilder
REFACTORING FILE DIFF URL: https://github.com/apache/commons-lang/commit/5c40090fecdacd9366bba7e3e29d94f213cf2633/src/java/org/apache/commons/lang/builder/CompareToBuilder.java
REFACTORING URL: https://github.com/apache/commons-lang/blob/5c40090fecdacd9366bba7e3e29d94f213cf2633/src/java/org/apache/commons/lang/builder/CompareToBuilder.java#L235
DIRECTLY EXTRACTED OPERATION:
     * Appends the fields and values defined by the given object of the
     * given Class.
     * 
     * @param lhs  the left hand object
     * @param rhs  the right hand object
     * @param clazz  the class to append details of
     * @param builder  the builder to append to
     * @param useTransients  whether to test transient fields
     */
    private static void reflectionAppend(Object lhs, Object rhs, Class clazz, CompareToBuilder builder, boolean useTransients) {
        Field[] fields = clazz.getDeclaredFields();
        Field.setAccessible(fields, true);
        for (int i = 0; i < fields.length && builder.comparison == 0; i++) {
            Field f = fields[i];
            if (useTransients || !Modifier.isTransient(f.getModifiers())) {
                if (!Modifier.isStatic(f.getModifiers())) {
                    try {
                        builder.append(f.get(lhs), f.get(rhs));
                    } catch (IllegalAccessException e) {
                        //this can't happen. Would get a Security exception instead
                        //throw a runtime exception in case the impossible happens.
                    }
                }
            }
        }
    }

PARAMS COUNT: 5
IS VOID METHOD: true
FRAGMENT LENGTH: 1207
FRAGMENT LINE AVG SIZE: 44.7037037037037
DEPTHS:
0 1 1 1 1 1 1 1 1 1 2 2 2 3 3 4 5 6 6 6 6 5 4 3 2 1 1 
AREA: 70
AVG DEPTH: 2.5925925925925926
---REFACTORING_FINISH---
DESCRIPTION: Extract Method	public reflectionCompare(lhs Object, rhs Object, testTransients boolean, reflectUpToClass Class) : int extracted from public reflectionCompare(lhs Object, rhs Object, testTransients boolean) : int in class org.apache.commons.lang.builder.CompareToBuilder
REFACTORING FILE DIFF URL: https://github.com/apache/commons-lang/commit/5c40090fecdacd9366bba7e3e29d94f213cf2633/src/java/org/apache/commons/lang/builder/CompareToBuilder.java
REFACTORING URL: https://github.com/apache/commons-lang/blob/5c40090fecdacd9366bba7e3e29d94f213cf2633/src/java/org/apache/commons/lang/builder/CompareToBuilder.java#L187
DIRECTLY EXTRACTED OPERATION:
     * <p>This method uses reflection to determine if the two Objects are
     * equal.</p>
     *
     * <p>It uses <code>Field.setAccessible</code> to gain access to private
     * fields. This means that it will throw a security exception if run under
     * a security manger, if  the permissions are not set up correctly. It is
     * also not as efficient as testing explicitly.</p>
     *
     * <p>If the <code>testTransients</code> is set to <code>true</code>,
     * transient members will be tested, otherwise they are ignored, as they
     * are likely derived fields, and not part of the value of the object.</p>
     *
     * <p>Static fields will not be included. Superclass fields will be appended
     * up to and including the specified superclass. A null superclass is treated
     * as java.lang.Object.</p>
     * 
     * @param lhs  <code>this</code> object
     * @param rhs  the other object
     * @param testTransients  whether to include transient fields
     * @param reflectUpToClass  the superclass to reflect up to (inclusive), may be null
     * @return a negative integer, zero, or a positive integer as this 
     *  Object is less than, equal to, or greater than the specified Object.
     * @throws NullPointerException  if either (but not both) parameter is
     *  <code>null</code>
     * @throws ClassCastException  if the specified Object's type prevents it
     *  from being compared to this Object.
     */
    public static int reflectionCompare(Object lhs, Object rhs, boolean testTransients, Class reflectUpToClass) {
        if (lhs == rhs) {
            return 0;
        }
        if (lhs == null || rhs == null) {
            throw new NullPointerException();
        }
        Class c1 = lhs.getClass();
        if (!c1.isInstance(rhs)) {
            throw new ClassCastException();
        }
        CompareToBuilder compareToBuilder = new CompareToBuilder();
        reflectionAppend(lhs, rhs, c1, compareToBuilder, testTransients);
        while (c1.getSuperclass() != null && c1 != reflectUpToClass) {
            c1 = c1.getSuperclass();
            reflectionAppend(lhs, rhs, c1, compareToBuilder, testTransients);
        }
        return compareToBuilder.toComparison();
    }

PARAMS COUNT: 4
IS VOID METHOD: false
FRAGMENT LENGTH: 2238
FRAGMENT LINE AVG SIZE: 47.61702127659574
DEPTHS:
0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 2 3 2 2 3 2 2 2 3 2 2 2 2 3 3 2 2 1 1 
AREA: 68
AVG DEPTH: 1.446808510638298
---REFACTORING_FINISH---
DESCRIPTION: Extract Method	private reflectionAppend(lhs Object, rhs Object, clazz Class, builder EqualsBuilder, useTransients boolean) : void extracted from public reflectionEquals(lhs Object, rhs Object, testTransients boolean) : boolean in class org.apache.commons.lang.builder.EqualsBuilder
REFACTORING FILE DIFF URL: https://github.com/apache/commons-lang/commit/5c40090fecdacd9366bba7e3e29d94f213cf2633/src/java/org/apache/commons/lang/builder/EqualsBuilder.java
REFACTORING URL: https://github.com/apache/commons-lang/blob/5c40090fecdacd9366bba7e3e29d94f213cf2633/src/java/org/apache/commons/lang/builder/EqualsBuilder.java#L246
DIRECTLY EXTRACTED OPERATION:
     * Appends the fields and values defined by the given object of the
     * given Class.
     * 
     * @param lhs  the left hand object
     * @param rhs  the right hand object
     * @param clazz  the class to append details of
     * @param builder  the builder to append to
     * @param useTransients  whether to test transient fields
     */
    private static void reflectionAppend(Object lhs, Object rhs, Class clazz, EqualsBuilder builder, boolean useTransients) {
        Field[] fields = clazz.getDeclaredFields();
        Field.setAccessible(fields, true);
        for (int i = 0; i < fields.length && builder.isEquals; i++) {
            Field f = fields[i];
            if (useTransients || !Modifier.isTransient(f.getModifiers())) {
                if (!Modifier.isStatic(f.getModifiers())) {
                    try {
                        builder.append(f.get(lhs), f.get(rhs));
                    } catch (IllegalAccessException e) {
                        //this can't happen. Would get a Security exception instead
                        //throw a runtime exception in case the impossible happens.
                    }
                }
            }
        }
    }

PARAMS COUNT: 5
IS VOID METHOD: true
FRAGMENT LENGTH: 1197
FRAGMENT LINE AVG SIZE: 44.333333333333336
DEPTHS:
0 1 1 1 1 1 1 1 1 1 2 2 2 3 3 4 5 6 6 6 6 5 4 3 2 1 1 
AREA: 70
AVG DEPTH: 2.5925925925925926
---REFACTORING_FINISH---
DESCRIPTION: Extract Method	public reflectionEquals(lhs Object, rhs Object, testTransients boolean, reflectUpToClass Class) : boolean extracted from public reflectionEquals(lhs Object, rhs Object, testTransients boolean) : boolean in class org.apache.commons.lang.builder.EqualsBuilder
REFACTORING FILE DIFF URL: https://github.com/apache/commons-lang/commit/5c40090fecdacd9366bba7e3e29d94f213cf2633/src/java/org/apache/commons/lang/builder/EqualsBuilder.java
REFACTORING URL: https://github.com/apache/commons-lang/blob/5c40090fecdacd9366bba7e3e29d94f213cf2633/src/java/org/apache/commons/lang/builder/EqualsBuilder.java#L176
DIRECTLY EXTRACTED OPERATION:
     * <p>This method uses reflection to determine if the two Object are equal.</p>
     *
     * <p>It uses <code>Field.setAccessible</code> to gain access to private
     * fields. This means that it will throw a security exception if run under
     * a security manger, if the permissions are not set up correctly. It is also
     * not as efficient as testing explicitly.</p>
     *
     * <p>If the testTransients parameter is set to <code>true</code>, transient
     * members will be tested, otherwise they are ignored, as they are likely
     * derived fields, and not part of the value of the Object.</p>
     *
     * <p>Static fields will not be included. Superclass fields will be appended
     * up to and including the specified superclass. A null superclass is treated
     * as java.lang.Object.</p>
     *
     * @param lhs  <code>this</code> object
     * @param rhs  the other object
     * @param testTransients  whether to include transient fields
     * @param reflectUpToClass  the superclass to reflect up to (inclusive), may be null
     * @return <code>true</code> if the two Objects have tested equals.
     */
    public static boolean reflectionEquals(Object lhs, Object rhs, boolean testTransients, Class reflectUpToClass) {
        if (lhs == rhs) {
            return true;
        }
        if (lhs == null || rhs == null) {
            return false;
        }
        // Find the leaf class since there may be transients in the leaf 
        // class or in classes between the leaf and root.
        // If we are not testing transients or a subclass has no ivars, 
        // then a subclass can test equals to a superclass.
        Class lhsClass = lhs.getClass();
        Class rhsClass = rhs.getClass();
        Class testClass;
        if (lhsClass.isInstance(rhs)) {
            testClass = lhsClass;
            if (!rhsClass.isInstance(lhs)) {
                // rhsClass is a subclass of lhsClass
                testClass = rhsClass;
            }
        } else if (rhsClass.isInstance(lhs)) {
            testClass = rhsClass;
            if (!lhsClass.isInstance(rhs)) {
                // lhsClass is a subclass of rhsClass
                testClass = lhsClass;
            }
        } else {
            // The two classes are not related.
            return false;
        }
        EqualsBuilder equalsBuilder = new EqualsBuilder();
        try {
            reflectionAppend(lhs, rhs, testClass, equalsBuilder, testTransients);
            while (testClass.getSuperclass() != null && testClass != reflectUpToClass) {
                testClass = testClass.getSuperclass();
                reflectionAppend(lhs, rhs, testClass, equalsBuilder, testTransients);
            }
        } catch (IllegalArgumentException e) {
            // In this case, we tried to test a subclass vs. a superclass and
            // the subclass has ivars or the ivars are transient and 
            // we are testing transients.
            // If a subclass has ivars that we are trying to test them, we get an
            // exception and we know that the objects are not equal.
            return false;
        }
        return equalsBuilder.isEquals();
    }

PARAMS COUNT: 4
IS VOID METHOD: false
FRAGMENT LENGTH: 3195
FRAGMENT LINE AVG SIZE: 46.30434782608695
DEPTHS:
0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 2 3 2 2 3 2 2 2 2 2 2 2 2 2 3 3 4 4 3 3 3 3 4 4 3 3 3 3 2 2 2 3 3 4 4 3 3 3 3 3 3 3 3 2 2 1 1 
AREA: 147
AVG DEPTH: 2.130434782608696
---REFACTORING_FINISH---
DESCRIPTION: Extract Method	private reflectionAppend(object Object, clazz Class, builder HashCodeBuilder, useTransients boolean) : void extracted from public reflectionHashCode(initialNonZeroOddNumber int, multiplierNonZeroOddNumber int, object Object, testTransients boolean) : int in class org.apache.commons.lang.builder.HashCodeBuilder
REFACTORING FILE DIFF URL: https://github.com/apache/commons-lang/commit/5c40090fecdacd9366bba7e3e29d94f213cf2633/src/java/org/apache/commons/lang/builder/HashCodeBuilder.java
REFACTORING URL: https://github.com/apache/commons-lang/blob/5c40090fecdacd9366bba7e3e29d94f213cf2633/src/java/org/apache/commons/lang/builder/HashCodeBuilder.java#L326
DIRECTLY EXTRACTED OPERATION:
     * Appends the fields and values defined by the given object of the
     * given Class.
     * 
     * @param object  the object to append details of
     * @param clazz  the class to append details of
     * @param builder  the builder to append to
     * @param useTransients  whether to use transient fields
     */
    private static void reflectionAppend(Object object, Class clazz, HashCodeBuilder builder, boolean useTransients) {
        Field[] fields = clazz.getDeclaredFields();
        Field.setAccessible(fields, true);
        for (int i = 0; i < fields.length; i++) {
            Field f = fields[i];
            if (useTransients || !Modifier.isTransient(f.getModifiers())) {
                if (!Modifier.isStatic(f.getModifiers())) {
                    try {
                        builder.append(f.get(object));
                    } catch (IllegalAccessException e) {
                        //this can't happen. Would get a Security exception instead
                        //throw a runtime exception in case the impossible happens.
                    }
                }
            }
        }
     }

PARAMS COUNT: 4
IS VOID METHOD: true
FRAGMENT LENGTH: 1134
FRAGMENT LINE AVG SIZE: 43.61538461538461
DEPTHS:
0 1 1 1 1 1 1 1 1 2 2 2 3 3 4 5 6 6 6 6 5 4 3 2 1 1 
AREA: 69
AVG DEPTH: 2.6538461538461537
---REFACTORING_FINISH---
DESCRIPTION: Extract Method	public reflectionHashCode(initialNonZeroOddNumber int, multiplierNonZeroOddNumber int, object Object, testTransients boolean, reflectUpToClass Class) : int extracted from public reflectionHashCode(initialNonZeroOddNumber int, multiplierNonZeroOddNumber int, object Object, testTransients boolean) : int in class org.apache.commons.lang.builder.HashCodeBuilder
REFACTORING FILE DIFF URL: https://github.com/apache/commons-lang/commit/5c40090fecdacd9366bba7e3e29d94f213cf2633/src/java/org/apache/commons/lang/builder/HashCodeBuilder.java
REFACTORING URL: https://github.com/apache/commons-lang/blob/5c40090fecdacd9366bba7e3e29d94f213cf2633/src/java/org/apache/commons/lang/builder/HashCodeBuilder.java#L280
DIRECTLY EXTRACTED OPERATION:
     * <p>This method uses reflection to build a valid hash code.</p>
     *
     * <p>It uses <code>Field.setAccessible</code> to gain access to private
     * fields. This means that it will throw a security exception if run under
     * a security manger, if the permissions are not set up correctly. It is also
     * not as efficient as testing explicitly.</p>
     *
     * <p>If the TestTransients parameter is set to <code>true</code>, transient
     * members will be tested, otherwise they are ignored, as they are likely
     * derived fields, and not part of the value of the Object.</p>
     *
     * <p>Static fields will not be included. Superclass fields will be included
     * up to and including the specified superclass. A null superclass is treated
     * as java.lang.Object.</p>
     *
     * <p>Two randomly chosen, non-zero, odd numbers must be passed in. Ideally
     * these should be different for each class, however this is not vital.
     * Prime numbers are preferred, especially for the multiplier.</p>
     *
     * @param initialNonZeroOddNumber
     * @param multiplierNonZeroOddNumber
     * @param object  the Object to create a <code>hashCode</code> for
     * @param testTransients  whether to include transient fields
     * @param reflectUpToClass  the superclass to reflect up to (inclusive), may be null
     * @return int hash code
     * @throws IllegalArgumentException if the Object is <code>null</code>
     * @throws IllegalArgumentException if the number is zero or even
     */
    public static int reflectionHashCode(
            int initialNonZeroOddNumber, int multiplierNonZeroOddNumber,
            Object object, boolean testTransients, Class reflectUpToClass) {

        if (object == null) {
            throw new IllegalArgumentException("The object to build a hash code for must not be null");
        }
        HashCodeBuilder builder = new HashCodeBuilder(initialNonZeroOddNumber, multiplierNonZeroOddNumber);
        Class clazz = object.getClass();
        reflectionAppend(object, clazz, builder, testTransients);
        while (clazz.getSuperclass() != null && clazz != reflectUpToClass) {
            clazz = clazz.getSuperclass();
            reflectionAppend(object, clazz, builder, testTransients);
        }
        return builder.toHashCode();
    }

PARAMS COUNT: 5
IS VOID METHOD: false
FRAGMENT LENGTH: 2326
FRAGMENT LINE AVG SIZE: 51.68888888888889
DEPTHS:
0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 2 2 3 2 2 2 2 2 3 3 2 2 1 1 
AREA: 59
AVG DEPTH: 1.3111111111111111
---REFACTORING_FINISH---
-----REFACTORINGS_END-----
COMMIT ID: 2f50297e5eb582ed50e87e6801917abe5a30b3c1
URL: https://github.com/apache/commons-lang/commit/2f50297e5eb582ed50e87e6801917abe5a30b3c1
DESCRIPTION: Extract Method	private getEntry(enumClass Class) : Entry extracted from protected getEnum(enumClass Class, name String) : Enum in class Enum
REFACTORING FILE DIFF URL: https://github.com/apache/commons-lang/commit/2f50297e5eb582ed50e87e6801917abe5a30b3c1/src/java/org/apache/commons/lang/enum/Enum.java
REFACTORING URL: https://github.com/apache/commons-lang/blob/2f50297e5eb582ed50e87e6801917abe5a30b3c1/src/java/org/apache/commons/lang/enum/Enum.java#L296
DIRECTLY EXTRACTED OPERATION:
     * Gets an entry from the map of Enums.
     * 
     * @param enumClass  the class of the Enum to get
     * @return the enum entry
     */
    private static Entry getEntry(Class enumClass) {
        if (enumClass == null) {
            throw new IllegalArgumentException("The Enum Class must not be null");
        }
        if (Enum.class.isAssignableFrom(enumClass) == false) {
            throw new IllegalArgumentException("The Class must be a subclass of Enum");
        }
        Entry entry = (Entry) cEnumClasses.get(enumClass.getName());
        return entry;
    }
    
FRAGMENT LENGTH: 586
FRAGMENT LINE AVG SIZE: 36.625
DEPTHS:
0 1 1 1 1 1 2 3 2 2 3 2 2 2 1 1 
AREA: 25
AVG DEPTH: 1.5625
---REFACTORING_FINISH---
DESCRIPTION: Extract Method	private getEntry(enumClass Class) : Entry extracted from protected getEnumMap(enumClass Class) : Map in class Enum
REFACTORING FILE DIFF URL: https://github.com/apache/commons-lang/commit/2f50297e5eb582ed50e87e6801917abe5a30b3c1/src/java/org/apache/commons/lang/enum/Enum.java
REFACTORING URL: https://github.com/apache/commons-lang/blob/2f50297e5eb582ed50e87e6801917abe5a30b3c1/src/java/org/apache/commons/lang/enum/Enum.java#L296
DIRECTLY EXTRACTED OPERATION:
     * Gets an entry from the map of Enums.
     * 
     * @param enumClass  the class of the Enum to get
     * @return the enum entry
     */
    private static Entry getEntry(Class enumClass) {
        if (enumClass == null) {
            throw new IllegalArgumentException("The Enum Class must not be null");
        }
        if (Enum.class.isAssignableFrom(enumClass) == false) {
            throw new IllegalArgumentException("The Class must be a subclass of Enum");
        }
        Entry entry = (Entry) cEnumClasses.get(enumClass.getName());
        return entry;
    }
    
FRAGMENT LENGTH: 586
FRAGMENT LINE AVG SIZE: 36.625
DEPTHS:
0 1 1 1 1 1 2 3 2 2 3 2 2 2 1 1 
AREA: 25
AVG DEPTH: 1.5625
---REFACTORING_FINISH---
DESCRIPTION: Extract Method	private getEntry(enumClass Class) : Entry extracted from protected getEnumList(enumClass Class) : List in class Enum
REFACTORING FILE DIFF URL: https://github.com/apache/commons-lang/commit/2f50297e5eb582ed50e87e6801917abe5a30b3c1/src/java/org/apache/commons/lang/enum/Enum.java
REFACTORING URL: https://github.com/apache/commons-lang/blob/2f50297e5eb582ed50e87e6801917abe5a30b3c1/src/java/org/apache/commons/lang/enum/Enum.java#L296
DIRECTLY EXTRACTED OPERATION:
     * Gets an entry from the map of Enums.
     * 
     * @param enumClass  the class of the Enum to get
     * @return the enum entry
     */
    private static Entry getEntry(Class enumClass) {
        if (enumClass == null) {
            throw new IllegalArgumentException("The Enum Class must not be null");
        }
        if (Enum.class.isAssignableFrom(enumClass) == false) {
            throw new IllegalArgumentException("The Class must be a subclass of Enum");
        }
        Entry entry = (Entry) cEnumClasses.get(enumClass.getName());
        return entry;
    }
    
FRAGMENT LENGTH: 586
FRAGMENT LINE AVG SIZE: 36.625
DEPTHS:
0 1 1 1 1 1 2 3 2 2 3 2 2 2 1 1 
AREA: 25
AVG DEPTH: 1.5625
---REFACTORING_FINISH---
-----REFACTORINGS_END-----
COMMIT ID: 891b71ff2c20e4846eb5569c3b1103f2243c831a
URL: https://github.com/apache/commons-lang/commit/891b71ff2c20e4846eb5569c3b1103f2243c831a
DESCRIPTION: Extract Method	private reflectionAppend(object Object, clazz Class, builder ToStringBuilder, outputTransients boolean) : void extracted from public reflectionToString(object Object, style ToStringStyle, outputTransients boolean) : String in class org.apache.commons.lang.builder.ToStringBuilder
REFACTORING FILE DIFF URL: https://github.com/apache/commons-lang/commit/891b71ff2c20e4846eb5569c3b1103f2243c831a/src/java/org/apache/commons/lang/builder/ToStringBuilder.java
REFACTORING URL: https://github.com/apache/commons-lang/blob/891b71ff2c20e4846eb5569c3b1103f2243c831a/src/java/org/apache/commons/lang/builder/ToStringBuilder.java#L362
DIRECTLY EXTRACTED OPERATION:
     * Appends the fields and values defined by the given object of the
     * given Class.
     * 
     * @param object  the object to append details of
     * @param clazz  the class to append details of
     * @param builder  the builder to append to
     * @param outputTransients  whether to output transient fields
     */
    private static void reflectionAppend(Object object, Class clazz, ToStringBuilder builder, boolean outputTransients) {
        Field[] fields = clazz.getDeclaredFields();
        Field.setAccessible(fields, true);
        for (int i = 0; i < fields.length; ++i) {
            Field f = fields[i];
            if (outputTransients || !Modifier.isTransient(f.getModifiers())) {
                if (!Modifier.isStatic(f.getModifiers())) {
                    try {
                        builder.append(f.getName(), f.get(object));
                    } catch (IllegalAccessException ex) {
                        //this can't happen. Would get a Security exception instead
                        //throw a runtime exception in case the impossible happens.
                    }
                }
            }
        }
     }
     
PARAMS COUNT: 4
IS VOID METHOD: true
FRAGMENT LENGTH: 1165
FRAGMENT LINE AVG SIZE: 44.80769230769231
DEPTHS:
0 1 1 1 1 1 1 1 1 2 2 2 3 3 4 5 6 6 6 6 5 4 3 2 1 1 
AREA: 69
AVG DEPTH: 2.6538461538461537
---REFACTORING_FINISH---
DESCRIPTION: Extract Method	public reflectionToString(object Object, style ToStringStyle, outputTransients boolean, reflectUpToClass Class) : String extracted from public reflectionToString(object Object, style ToStringStyle, outputTransients boolean) : String in class org.apache.commons.lang.builder.ToStringBuilder
REFACTORING FILE DIFF URL: https://github.com/apache/commons-lang/commit/891b71ff2c20e4846eb5569c3b1103f2243c831a/src/java/org/apache/commons/lang/builder/ToStringBuilder.java
REFACTORING URL: https://github.com/apache/commons-lang/blob/891b71ff2c20e4846eb5569c3b1103f2243c831a/src/java/org/apache/commons/lang/builder/ToStringBuilder.java#L315
DIRECTLY EXTRACTED OPERATION:
     * <p>This method uses reflection to build a suitable
     * <code>toString</code>.</p>
     *
     * <p>It uses <code>Field.setAccessible</code> to gain access to private
     * fields. This means that it will throw a security exception if run
     * under a security manger, if the permissions are not set up correctly.
     * It is also not as efficient as testing explicitly. </p>
     *
     * <p>If the <code>outputTransients</code> is <code>true</code>,
     * transient members will be output, otherwise they are ignored,
     * as they are likely derived fields, and not part of the value of the
     * Object.</p>
     *
     * <p>Static fields will not be included. Superclass fields will be appended
     * up to and including the specified superclass. A null superclass is treated
     * as java.lang.Object.</p>
     *
     * <p>
     * If the style is <code>null</code>, the default
     * <code>ToStringStyle</code> is used.</p>
     * 
     * @param object  the Object to be output
     * @param style  the style of the <code>toString</code> to create,
     *  may be <code>null</code>
     * @param outputTransients  whether to include transient fields
     * @param reflectUpToClass  the superclass to reflect up to (inclusive), may be null
     * @return the String result
     * @throws IllegalArgumentException if the Object is <code>null</code>
     */
    public static String reflectionToString(Object object, ToStringStyle style, boolean outputTransients, Class reflectUpToClass) {
        if (object == null) {
            throw new IllegalArgumentException("The object must not be null");
        }
        if (style == null) {
            style = getDefaultStyle();
        }
        ToStringBuilder builder = new ToStringBuilder(object, style);
        Class clazz = object.getClass();
        reflectionAppend(object, clazz, builder, outputTransients);
        while (clazz.getSuperclass() != null && clazz != reflectUpToClass) {
            clazz = clazz.getSuperclass();
            reflectionAppend(object, clazz, builder, outputTransients);
        }
        return builder.toString();
    }

PARAMS COUNT: 4
IS VOID METHOD: false
FRAGMENT LENGTH: 2132
FRAGMENT LINE AVG SIZE: 46.34782608695652
DEPTHS:
0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 2 3 2 2 3 2 2 2 2 2 3 3 2 2 1 1 
AREA: 63
AVG DEPTH: 1.3695652173913044
---REFACTORING_FINISH---
-----REFACTORINGS_END-----
COMMIT ID: b91dfd1a2c7bf0d76f3badacc1d4d525c6aeba7f
URL: https://github.com/apache/commons-lang/commit/b91dfd1a2c7bf0d76f3badacc1d4d525c6aeba7f
DESCRIPTION: Extract Method	public getMethod(method Method) : Method extracted from private getMatchingAccessibleMethod(clazz Class, methodName String, parameterTypes Class[]) : Method in class org.apache.commons.lang.reflect.MethodUtils
REFACTORING FILE DIFF URL: https://github.com/apache/commons-lang/commit/b91dfd1a2c7bf0d76f3badacc1d4d525c6aeba7f/src/java/org/apache/commons/lang/reflect/MethodUtils.java
REFACTORING URL: https://github.com/apache/commons-lang/blob/b91dfd1a2c7bf0d76f3badacc1d4d525c6aeba7f/src/java/org/apache/commons/lang/reflect/MethodUtils.java#L223
DIRECTLY EXTRACTED OPERATION:
     * <p>Return an accessible method (that is, one that can be invoked via
     * reflection) that implements the specified Method.  If no such method
     * can be found, return <code>null</code>.</p>
     *
     * @param method The method that we wish to call
     */
    public static Method getMethod(Method method) {
        
        Method accessibleMethod = getAccessibleMethod(method);
        if (accessibleMethod == null) {
            try {
                //
                // XXX Default access superclass workaround
                //
                // When a public class has a default access superclass
                // with public methods, these methods are accessible.
                // Calling them from compiled code works fine.
                //
                // Unfortunately, using reflection to invoke these methods
                // seems to (wrongly) to prevent access even when the method
                // modifer is public.
                //
                // The following workaround solves the problem but will only
                // work from sufficiently privilages code. 
                //
                // Better workarounds would be greatfully accepted.
                //
                if (ReflectionUtils.isPublicScope(method)) {
                    method.setAccessible(true);
                    accessibleMethod = method;
                }
                
            } catch (SecurityException se) {
                // log but continue just in case the method.invoke works anyway
                log(
                "Cannot setAccessible on method. Therefore cannot use jvm access bug workaround.", 
                se);
            }
        }
        return (accessibleMethod);

    }
    
PARAMS COUNT: 1
IS VOID METHOD: false
FRAGMENT LENGTH: 1755
FRAGMENT LINE AVG SIZE: 40.81395348837209
DEPTHS:
0 1 1 1 1 1 1 2 2 2 3 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 5 5 4 4 4 4 4 4 4 3 2 2 2 1 1 
AREA: 132
AVG DEPTH: 3.0697674418604652
---REFACTORING_FINISH---
-----REFACTORINGS_END-----
COMMIT ID: 19248809e78867606fe25c223ca9993554b1ff3b
URL: https://github.com/apache/commons-lang/commit/19248809e78867606fe25c223ca9993554b1ff3b
DESCRIPTION: Extract Method	public append(lhs Object, rhs Object, comparator Comparator) : CompareToBuilder extracted from public append(lhs Object, rhs Object) : CompareToBuilder in class org.apache.commons.lang.builder.CompareToBuilder
REFACTORING FILE DIFF URL: https://github.com/apache/commons-lang/commit/19248809e78867606fe25c223ca9993554b1ff3b/src/java/org/apache/commons/lang/builder/CompareToBuilder.java
REFACTORING URL: https://github.com/apache/commons-lang/blob/19248809e78867606fe25c223ca9993554b1ff3b/src/java/org/apache/commons/lang/builder/CompareToBuilder.java#L238
DIRECTLY EXTRACTED OPERATION:
     * <p>Comparison of two Object references.</p>
     * <ol>
     * <li>Check if Objects are same using <code>==</code>
     * <li>Check if either is null, a null object is less than a non-null
     * <li>Check the object contents
     * </ol>
     * 
     * <p>If the first parameter to be compared is an array, the array methods will
     * be used. Otherwise the comparator will be used. If the comparator is null, 
     * the <code>lhs</code> will be cast to Comparable.</p>
     *
     * @param lhs  the Object from <code>this</code> object
     * @param rhs  the Object from the other object
     * @param comparator  the comparator to use to compare the objects,
     *  <code>null</code> means to treat the <code>lhs</code> as <code>Comparable</code>.
     * @return CompareToBuilder - used to chain calls.
     * @throws ClassCastException if the specified Object's type prevents it
     * from being compared to this Object.
     */
    public CompareToBuilder append(Object lhs, Object rhs, Comparator comparator) {
        if (comparison != 0) {
            return this;
        }
        if (lhs == rhs) {
            return this;
        }
        if (lhs == null) {
            comparison = -1;
            return this;
        }
        if (rhs == null) {
            comparison = +1;
            return this;
        }
        Class lhsClass = lhs.getClass();
        if (lhsClass.isArray()) {
            // 'Switch' on type of array, to dispatch to the correct handler
            // This handles multi dimensional arrays
            // this could throw a ClassCastException is rhs is not the correct array type
            if (lhs instanceof long[]) {
                append((long[]) lhs, (long[]) rhs);
            } else if (lhs instanceof int[]) {
                append((int[]) lhs, (int[]) rhs);
            } else if (lhs instanceof short[]) {
                append((short[]) lhs, (short[]) rhs);
            } else if (lhs instanceof char[]) {
                append((char[]) lhs, (char[]) rhs);
            } else if (lhs instanceof byte[]) {
                append((byte[]) lhs, (byte[]) rhs);
            } else if (lhs instanceof double[]) {
                append((double[]) lhs, (double[]) rhs);
            } else if (lhs instanceof float[]) {
                append((float[]) lhs, (float[]) rhs);
            } else if (lhs instanceof boolean[]) {
                append((boolean[]) lhs, (boolean[]) rhs);
            } else {
                // Not an array of primitives
                // this could throw a ClassCastException is rhs is not an array
                append((Object[]) lhs, (Object[]) rhs, comparator);
            }
        } else {
            // the simple case, not an array, just test the element
            if (comparator == null) {
                comparison = ((Comparable) lhs).compareTo(rhs);
            } else {
                comparison = comparator.compare(lhs, rhs);
            }
        }
        return this;
    }

FRAGMENT LENGTH: 2992
FRAGMENT LINE AVG SIZE: 42.140845070422536
DEPTHS:
0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 2 3 2 2 3 2 2 3 3 2 2 3 3 2 2 2 3 3 3 3 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 3 3 3 3 4 4 4 3 2 2 1 1 
AREA: 178
AVG DEPTH: 2.507042253521127
---REFACTORING_FINISH---
DESCRIPTION: Extract Method	public append(lhs Object[], rhs Object[], comparator Comparator) : CompareToBuilder extracted from public append(lhs Object[], rhs Object[]) : CompareToBuilder in class org.apache.commons.lang.builder.CompareToBuilder
REFACTORING FILE DIFF URL: https://github.com/apache/commons-lang/commit/19248809e78867606fe25c223ca9993554b1ff3b/src/java/org/apache/commons/lang/builder/CompareToBuilder.java
REFACTORING URL: https://github.com/apache/commons-lang/blob/19248809e78867606fe25c223ca9993554b1ff3b/src/java/org/apache/commons/lang/builder/CompareToBuilder.java#L469
DIRECTLY EXTRACTED OPERATION:
     * <p>Deep comparison of an <code>Object</code> array.</p>
     * <ol>
     * <li>Check if arrays are same using <code>==</code>
     * <li>Check if either is null, a null array is less than a non-null
     * <li>Check array length, a shorter length array is less than a longer length array
     * <li>Check array contents element by element using {@link #append(Object, Object, Comparator)}
     * </ol>
     *
     * <p>This method will also will be called for the top level of multi-dimensional,
     * ragged, and multi-typed arrays.</p>
     *
     * @param lhs  array from <code>this</code> object
     * @param rhs  array from the other object
     * @param comparator  the comparator to use to compare the objects,
     *  <code>null</code> means to treat the <code>lhs</code> as <code>Comparable</code>.
     * @return CompareToBuilder - used to chain calls.
     * @throws ClassCastException  if the specified Object's type prevents it
     *  from being compared to this Object.
     */
    public CompareToBuilder append(Object[] lhs, Object[] rhs, Comparator comparator) {
        if (comparison != 0) {
            return this;
        }
        if (lhs == rhs) {
            return this;
        }
        if (lhs == null) {
            comparison = -1;
            return this;
        }
        if (rhs == null) {
            comparison = +1;
            return this;
        }
        if (lhs.length != rhs.length) {
            comparison = (lhs.length < rhs.length) ? -1 : +1;
            return this;
        }
        for (int i = 0; i < lhs.length && comparison == 0; i++) {
            append(lhs[i], rhs[i], comparator);
        }
        return this;
    }

FRAGMENT LENGTH: 1688
FRAGMENT LINE AVG SIZE: 38.36363636363637
DEPTHS:
0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 2 3 2 2 3 2 2 3 3 2 2 3 3 2 2 3 3 2 2 3 2 2 1 1 
AREA: 74
AVG DEPTH: 1.6818181818181819
---REFACTORING_FINISH---
-----REFACTORINGS_END-----
COMMIT ID: 99ba8f14d5c2e563042b515bf0a8043c5618788b
URL: https://github.com/apache/commons-lang/commit/99ba8f14d5c2e563042b515bf0a8043c5618788b
DESCRIPTION: Extract Method	public getCause(t Throwable, methodNames String[]) : Throwable extracted from public getCause(t Throwable) : Throwable in class org.apache.commons.lang.exception.ExceptionUtils
REFACTORING FILE DIFF URL: https://github.com/apache/commons-lang/commit/99ba8f14d5c2e563042b515bf0a8043c5618788b/src/java/org/apache/commons/lang/exception/ExceptionUtils.java
REFACTORING URL: https://github.com/apache/commons-lang/blob/99ba8f14d5c2e563042b515bf0a8043c5618788b/src/java/org/apache/commons/lang/exception/ExceptionUtils.java#L116
DIRECTLY EXTRACTED OPERATION:
     * Extends the API of {@link #getCause(Throwable)} by
     * introspecting for only user-specified method names.
     *
     * @see #getCause(Throwable)
     */
    public static Throwable getCause(Throwable t, String[] methodNames)
    {
        Throwable cause = getCauseUsingWellKnownTypes(t);
        if (cause == null)
        {
            for (int i = 0; i < methodNames.length; i++)
            {
                cause = getCauseUsingMethodName(t, methodNames[i]);
                if (cause != null)
                {
                    break;
                }
            }

            if (cause == null)
            {
                cause = getCauseUsingFieldName(t, "detail");
            }
        }
        return cause;
    }
    
PARAMS COUNT: 2
IS VOID METHOD: false
FRAGMENT LENGTH: 753
FRAGMENT LINE AVG SIZE: 27.88888888888889
DEPTHS:
0 1 1 1 1 1 1 2 2 2 3 3 4 4 4 5 4 3 3 3 3 4 3 2 2 1 1 
AREA: 64
AVG DEPTH: 2.3703703703703702
---REFACTORING_FINISH---
-----REFACTORINGS_END-----
COMMIT ID: 6fdd16815acb4d46bf82f94236e09291aba0ff5b
URL: https://github.com/apache/commons-lang/commit/6fdd16815acb4d46bf82f94236e09291aba0ff5b
DESCRIPTION: Extract Method	private getCauseUsingWellKnownTypes(t Throwable) : Throwable extracted from public getCause(t Throwable) : Throwable in class org.apache.commons.lang.exception.ExceptionUtils
REFACTORING FILE DIFF URL: https://github.com/apache/commons-lang/commit/6fdd16815acb4d46bf82f94236e09291aba0ff5b/src/java/org/apache/commons/lang/exception/ExceptionUtils.java
REFACTORING URL: https://github.com/apache/commons-lang/blob/6fdd16815acb4d46bf82f94236e09291aba0ff5b/src/java/org/apache/commons/lang/exception/ExceptionUtils.java#L134
DIRECTLY EXTRACTED OPERATION:
     * Uses <code>instanceof</code> checks to examine the exception,
     * looking for well known types which could contain chained or
     * wrapped exceptions.
     *
     * @param t The exception to examine.
     * @return The wrapped exception, or <code>null</code> if not
     * found.
     */
    private static Throwable getCauseUsingWellKnownTypes(Throwable t)
    {
        if (t instanceof NestableException)
        {
            return ((NestableException) t).getCause();
        }
        else if (t instanceof NestableRuntimeException)
        {
            return ((NestableRuntimeException) t).getCause();
        }
        else if (t instanceof SQLException)
        {
            return ((SQLException) t).getNextException();
        }
        else if (t instanceof InvocationTargetException)
        {
            return ((InvocationTargetException) t).getTargetException();
        }
        else
        {
            return null;
        }
    }

PARAMS COUNT: 1
IS VOID METHOD: false
FRAGMENT LENGTH: 970
FRAGMENT LINE AVG SIZE: 30.3125
DEPTHS:
0 1 1 1 1 1 1 1 1 1 2 2 3 2 2 2 3 2 2 2 3 2 2 2 3 2 2 2 3 2 1 1 
AREA: 56
AVG DEPTH: 1.75
---REFACTORING_FINISH---
DESCRIPTION: Extract Method	private getCauseUsingMethodName(methodName String, t Throwable) : Throwable extracted from public getCause(t Throwable) : Throwable in class org.apache.commons.lang.exception.ExceptionUtils
REFACTORING FILE DIFF URL: https://github.com/apache/commons-lang/commit/6fdd16815acb4d46bf82f94236e09291aba0ff5b/src/java/org/apache/commons/lang/exception/ExceptionUtils.java
REFACTORING URL: https://github.com/apache/commons-lang/blob/6fdd16815acb4d46bf82f94236e09291aba0ff5b/src/java/org/apache/commons/lang/exception/ExceptionUtils.java#L167
DIRECTLY EXTRACTED OPERATION:
     * @param methodName The name of the method to find and invoke.
     * @param t The exception to examine.
     * @return The wrapped exception, or <code>null</code> if not
     * found.
     */
    private static Throwable getCauseUsingMethodName(String methodName,
                                                     Throwable t)
    {
        Method method = null;
        try
        {
            method = t.getClass().getMethod(methodName, null);
        }
        catch (NoSuchMethodException ignored)
        {
        }
        catch (SecurityException ignored)
        {
        }

        if (method != null &&
            Throwable.class.isAssignableFrom(method.getReturnType()))
        {
            try
            {
                return (Throwable) method.invoke(t, CAUSE_METHOD_PARAMS);
            }
            catch (IllegalAccessException ignored)
            {
            }
            catch (IllegalArgumentException ignored)
            {
            }
            catch (InvocationTargetException ignored)
            {
            }
        }
        return null;
    }
}
PARAMS COUNT: 2
IS VOID METHOD: false
FRAGMENT LENGTH: 1105
FRAGMENT LINE AVG SIZE: 27.625
DEPTHS:
0 1 1 1 1 1 1 1 2 2 2 3 2 2 2 2 2 2 2 2 2 2 2 3 3 4 3 3 3 3 3 3 3 3 3 3 2 2 1 0 
AREA: 83
AVG DEPTH: 2.075
---REFACTORING_FINISH---
-----REFACTORINGS_END-----
COMMIT ID: e0340c896977e4dea905370bd8d7db05f1ad2b3f
URL: https://github.com/apache/commons-lang/commit/e0340c896977e4dea905370bd8d7db05f1ad2b3f
DESCRIPTION: Extract Method	public getThrowableCount() : int extracted from public getLength() : int in class org.apache.commons.lang.exception.NestableException
REFACTORING FILE DIFF URL: https://github.com/apache/commons-lang/commit/e0340c896977e4dea905370bd8d7db05f1ad2b3f/src/java/org/apache/commons/lang/exception/NestableException.java
REFACTORING URL: https://github.com/apache/commons-lang/blob/e0340c896977e4dea905370bd8d7db05f1ad2b3f/src/java/org/apache/commons/lang/exception/NestableException.java#L250
DIRECTLY EXTRACTED OPERATION:
    {
        return delegate.getThrowableCount();
    }
    
IS VOID METHOD: false
FRAGMENT LENGTH: 62
FRAGMENT LINE AVG SIZE: 15.5
DEPTHS:
1 2 1 1 
AREA: 5
AVG DEPTH: 1.25
---REFACTORING_FINISH---
DESCRIPTION: Extract Method	public getThrowableCount() : int extracted from public getLength() : int in class org.apache.commons.lang.exception.NestableRuntimeException
REFACTORING FILE DIFF URL: https://github.com/apache/commons-lang/commit/e0340c896977e4dea905370bd8d7db05f1ad2b3f/src/java/org/apache/commons/lang/exception/NestableRuntimeException.java
REFACTORING URL: https://github.com/apache/commons-lang/blob/e0340c896977e4dea905370bd8d7db05f1ad2b3f/src/java/org/apache/commons/lang/exception/NestableRuntimeException.java#L197
DIRECTLY EXTRACTED OPERATION:
    {
        return delegate.getThrowableCount();
    }
    
IS VOID METHOD: false
FRAGMENT LENGTH: 62
FRAGMENT LINE AVG SIZE: 15.5
DEPTHS:
1 2 1 1 
AREA: 5
AVG DEPTH: 1.25
---REFACTORING_FINISH---
-----REFACTORINGS_END-----
0
